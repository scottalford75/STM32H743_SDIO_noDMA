
STM32H743_SDIO_noDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d4c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a188  0800a188  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a190  0800a190  0001a190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800a198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000017c  24000074  0800a20c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001f0  0800a20c  000201f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017b31  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ec0  00000000  00000000  00037bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011a0  00000000  00000000  0003aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001058  00000000  00000000  0003bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039409  00000000  00000000  0003cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018a89  00000000  00000000  00076099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f69f  00000000  00000000  0008eb22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ee1c1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000050cc  00000000  00000000  001ee214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009fd4 	.word	0x08009fd4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08009fd4 	.word	0x08009fd4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800068c:	1d39      	adds	r1, r7, #4
 800068e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000692:	2201      	movs	r2, #1
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <__io_putchar+0x20>)
 8000696:	f005 fdb3 	bl	8006200 <HAL_UART_Transmit>
  return ch;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2400010c 	.word	0x2400010c

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	f6ad 2da8 	subw	sp, sp, #2728	; 0xaa8
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fcbc 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f8aa 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //MPU_Config();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f9ca 	bl	8000a50 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006bc:	f000 f97c 	bl	80009b8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80006c0:	f000 f952 	bl	8000968 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006c4:	f007 fc1c 	bl	8007f00 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  printf("SDPath: ");
 80006c8:	4844      	ldr	r0, [pc, #272]	; (80007dc <main+0x134>)
 80006ca:	f008 fc21 	bl	8008f10 <iprintf>
  printf(SDPath);
 80006ce:	4844      	ldr	r0, [pc, #272]	; (80007e0 <main+0x138>)
 80006d0:	f008 fc1e 	bl	8008f10 <iprintf>
  printf("\n");
 80006d4:	200a      	movs	r0, #10
 80006d6:	f008 fc33 	bl	8008f40 <putchar>
  FATFS fs;
  DSTATUS status;
  BYTE work[1024]; /* Work area (larger is better for processing time) */

  /* Disk initialization */
  printf("Initialize disk: ");
 80006da:	4842      	ldr	r0, [pc, #264]	; (80007e4 <main+0x13c>)
 80006dc:	f008 fc18 	bl	8008f10 <iprintf>
  status = disk_initialize(0);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f007 fdc5 	bl	8008270 <disk_initialize>
 80006e6:	4603      	mov	r3, r0
 80006e8:	f887 3aa7 	strb.w	r3, [r7, #2727]	; 0xaa7
  if (status != RES_OK)
 80006ec:	f897 3aa7 	ldrb.w	r3, [r7, #2727]	; 0xaa7
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <main+0x54>
  {
	printf("Fail\n");
 80006f4:	483c      	ldr	r0, [pc, #240]	; (80007e8 <main+0x140>)
 80006f6:	f008 fca7 	bl	8009048 <puts>
 80006fa:	e002      	b.n	8000702 <main+0x5a>
  }
  else
  {
    printf("OK\n");
 80006fc:	483b      	ldr	r0, [pc, #236]	; (80007ec <main+0x144>)
 80006fe:	f008 fca3 	bl	8009048 <puts>
  }

  /* Mount */
  printf("Mount disk: ");
 8000702:	483b      	ldr	r0, [pc, #236]	; (80007f0 <main+0x148>)
 8000704:	f008 fc04 	bl	8008f10 <iprintf>
  res = f_mount(&fs, (TCHAR const*)SDPath, 0);
 8000708:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800070c:	2200      	movs	r2, #0
 800070e:	4934      	ldr	r1, [pc, #208]	; (80007e0 <main+0x138>)
 8000710:	4618      	mov	r0, r3
 8000712:	f008 fa73 	bl	8008bfc <f_mount>
 8000716:	4603      	mov	r3, r0
 8000718:	f887 3aa6 	strb.w	r3, [r7, #2726]	; 0xaa6
  if (res != FR_OK)
 800071c:	f897 3aa6 	ldrb.w	r3, [r7, #2726]	; 0xaa6
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <main+0x84>
  {
	printf("Fail\n");
 8000724:	4830      	ldr	r0, [pc, #192]	; (80007e8 <main+0x140>)
 8000726:	f008 fc8f 	bl	8009048 <puts>
 800072a:	e002      	b.n	8000732 <main+0x8a>
  }
  else
  {
	printf("OK\n");
 800072c:	482f      	ldr	r0, [pc, #188]	; (80007ec <main+0x144>)
 800072e:	f008 fc8b 	bl	8009048 <puts>
  }

  /* Get volume information and free clusters of drive 1 */
  printf("Disk space:\n");
 8000732:	4830      	ldr	r0, [pc, #192]	; (80007f4 <main+0x14c>)
 8000734:	f008 fc88 	bl	8009048 <puts>
  uint32_t freeClust;
  FATFS* fs_ptr = &fs;
 8000738:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800073c:	f6a3 23a4 	subw	r3, r3, #2724	; 0xaa4
 8000740:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8000744:	601a      	str	r2, [r3, #0]
  res = f_getfree("", &freeClust, &fs_ptr); // Warning! This fills fs.n_fatent and fs.csize!
 8000746:	1d3a      	adds	r2, r7, #4
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4619      	mov	r1, r3
 800074e:	482a      	ldr	r0, [pc, #168]	; (80007f8 <main+0x150>)
 8000750:	f008 fa9a 	bl	8008c88 <f_getfree>
 8000754:	4603      	mov	r3, r0
 8000756:	f887 3aa6 	strb.w	r3, [r7, #2726]	; 0xaa6
  if(res != FR_OK) {
 800075a:	f897 3aa6 	ldrb.w	r3, [r7, #2726]	; 0xaa6
 800075e:	2b00      	cmp	r3, #0
 8000760:	d005      	beq.n	800076e <main+0xc6>
      printf("f_getfree() failed, res = %d\r\n", res);
 8000762:	f897 3aa6 	ldrb.w	r3, [r7, #2726]	; 0xaa6
 8000766:	4619      	mov	r1, r3
 8000768:	4824      	ldr	r0, [pc, #144]	; (80007fc <main+0x154>)
 800076a:	f008 fbd1 	bl	8008f10 <iprintf>
  }

  //printf("f_getfree() done!\r\n");

  uint32_t totalBlocks = (fs.n_fatent - 2) * fs.csize;
 800076e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000772:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	3b02      	subs	r3, #2
 800077a:	f607 22a8 	addw	r2, r7, #2728	; 0xaa8
 800077e:	f2a2 629c 	subw	r2, r2, #1692	; 0x69c
 8000782:	8952      	ldrh	r2, [r2, #10]
 8000784:	fb02 f303 	mul.w	r3, r2, r3
 8000788:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
  uint32_t freeBlocks = freeClust * fs.csize;
 800078c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000790:	f2a3 639c 	subw	r3, r3, #1692	; 0x69c
 8000794:	895b      	ldrh	r3, [r3, #10]
 8000796:	461a      	mov	r2, r3
 8000798:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800079c:	f5a3 632a 	sub.w	r3, r3, #2720	; 0xaa0
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	fb02 f303 	mul.w	r3, r2, r3
 80007a6:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c

  printf("Total blocks: %lu (%lu Mb)\r\n", totalBlocks, totalBlocks / 2000);
 80007aa:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <main+0x158>)
 80007b0:	fba2 2303 	umull	r2, r3, r2, r3
 80007b4:	09db      	lsrs	r3, r3, #7
 80007b6:	461a      	mov	r2, r3
 80007b8:	f8d7 1aa0 	ldr.w	r1, [r7, #2720]	; 0xaa0
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <main+0x15c>)
 80007be:	f008 fba7 	bl	8008f10 <iprintf>
  printf("Free blocks: %lu (%lu Mb)\r\n", freeBlocks, freeBlocks / 2000);
 80007c2:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <main+0x158>)
 80007c8:	fba2 2303 	umull	r2, r3, r2, r3
 80007cc:	09db      	lsrs	r3, r3, #7
 80007ce:	461a      	mov	r2, r3
 80007d0:	f8d7 1a9c 	ldr.w	r1, [r7, #2716]	; 0xa9c
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <main+0x160>)
 80007d6:	f008 fb9b 	bl	8008f10 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007da:	e7fe      	b.n	80007da <main+0x132>
 80007dc:	08009fec 	.word	0x08009fec
 80007e0:	240001a8 	.word	0x240001a8
 80007e4:	08009ff8 	.word	0x08009ff8
 80007e8:	0800a00c 	.word	0x0800a00c
 80007ec:	0800a014 	.word	0x0800a014
 80007f0:	0800a018 	.word	0x0800a018
 80007f4:	0800a028 	.word	0x0800a028
 80007f8:	0800a034 	.word	0x0800a034
 80007fc:	0800a038 	.word	0x0800a038
 8000800:	10624dd3 	.word	0x10624dd3
 8000804:	0800a058 	.word	0x0800a058
 8000808:	0800a078 	.word	0x0800a078

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09e      	sub	sp, #120	; 0x78
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000816:	224c      	movs	r2, #76	; 0x4c
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f008 fb70 	bl	8008f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2220      	movs	r2, #32
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f008 fb69 	bl	8008f00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800082e:	2002      	movs	r0, #2
 8000830:	f000 ff6a 	bl	8001708 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b48      	ldr	r3, [pc, #288]	; (800095c <SystemClock_Config+0x150>)
 800083a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083c:	4a47      	ldr	r2, [pc, #284]	; (800095c <SystemClock_Config+0x150>)
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000844:	4b45      	ldr	r3, [pc, #276]	; (800095c <SystemClock_Config+0x150>)
 8000846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b44      	ldr	r3, [pc, #272]	; (8000960 <SystemClock_Config+0x154>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a43      	ldr	r2, [pc, #268]	; (8000960 <SystemClock_Config+0x154>)
 8000854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <SystemClock_Config+0x154>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000866:	bf00      	nop
 8000868:	4b3d      	ldr	r3, [pc, #244]	; (8000960 <SystemClock_Config+0x154>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000874:	d1f8      	bne.n	8000868 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <SystemClock_Config+0x158>)
 8000878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800087c:	4a39      	ldr	r2, [pc, #228]	; (8000964 <SystemClock_Config+0x158>)
 800087e:	f043 0302 	orr.w	r3, r3, #2
 8000882:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000886:	4b37      	ldr	r3, [pc, #220]	; (8000964 <SystemClock_Config+0x158>)
 8000888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000894:	2300      	movs	r3, #0
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	4b31      	ldr	r3, [pc, #196]	; (8000960 <SystemClock_Config+0x154>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a30      	ldr	r2, [pc, #192]	; (8000960 <SystemClock_Config+0x154>)
 800089e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <SystemClock_Config+0x154>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <SystemClock_Config+0x150>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	4a2a      	ldr	r2, [pc, #168]	; (800095c <SystemClock_Config+0x150>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <SystemClock_Config+0x150>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c6:	bf00      	nop
 80008c8:	4b25      	ldr	r3, [pc, #148]	; (8000960 <SystemClock_Config+0x154>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d4:	d1f8      	bne.n	80008c8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d6:	2301      	movs	r3, #1
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	2302      	movs	r3, #2
 80008e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e4:	2302      	movs	r3, #2
 80008e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008e8:	2305      	movs	r3, #5
 80008ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008ec:	23c0      	movs	r3, #192	; 0xc0
 80008ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008fc:	2308      	movs	r3, #8
 80008fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000900:	2300      	movs	r3, #0
 8000902:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090c:	4618      	mov	r0, r3
 800090e:	f000 ff35 	bl	800177c <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000918:	f000 f8f6 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	233f      	movs	r3, #63	; 0x3f
 800091e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2303      	movs	r3, #3
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000928:	2308      	movs	r3, #8
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2104      	movs	r1, #4
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fb47 	bl	8001fd8 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000950:	f000 f8da 	bl	8000b08 <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3778      	adds	r7, #120	; 0x78
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58000400 	.word	0x58000400
 8000960:	58024800 	.word	0x58024800
 8000964:	58024400 	.word	0x58024400

08000968 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_SDMMC1_SD_Init+0x44>)
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <MX_SDMMC1_SD_Init+0x48>)
 8000970:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_SDMMC1_SD_Init+0x44>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_SDMMC1_SD_Init+0x44>)
 800097a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800097e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_SDMMC1_SD_Init+0x44>)
 8000982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000986:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_SDMMC1_SD_Init+0x44>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_SDMMC1_SD_Init+0x44>)
 8000990:	2208      	movs	r2, #8
 8000992:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_SDMMC1_SD_Init+0x44>)
 8000996:	f004 f837 	bl	8004a08 <HAL_SD_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <MX_SDMMC1_SD_Init+0x3e>
  {
      printf("SD_Init error\n");
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_SDMMC1_SD_Init+0x4c>)
 80009a2:	f008 fb51 	bl	8009048 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	24000090 	.word	0x24000090
 80009b0:	52007000 	.word	0x52007000
 80009b4:	0800a094 	.word	0x0800a094

080009b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <MX_USART1_UART_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 8000a02:	f005 fbad 	bl	8006160 <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f87c 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 8000a14:	f006 fbe0 	bl	80071d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 f873 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 8000a26:	f006 fc15 	bl	8007254 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 f86a 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_USART1_UART_Init+0x90>)
 8000a36:	f006 fb96 	bl	8007166 <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f862 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2400010c 	.word	0x2400010c
 8000a4c:	40011000 	.word	0x40011000

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	4a24      	ldr	r2, [pc, #144]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	4a1d      	ldr	r2, [pc, #116]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000ac8:	f043 0308 	orr.w	r3, r3, #8
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_GPIO_Init+0xb0>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_GPIO_Init+0xb4>)
 8000af2:	f000 fc41 	bl	8001378 <HAL_GPIO_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	58024400 	.word	0x58024400
 8000b04:	58020800 	.word	0x58020800

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_MspInit+0x30>)
 8000b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b20:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x30>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x30>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	58024400 	.word	0x58024400

08000b48 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0ba      	sub	sp, #232	; 0xe8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b60:	f107 0318 	add.w	r3, r7, #24
 8000b64:	22bc      	movs	r2, #188	; 0xbc
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f008 f9c9 	bl	8008f00 <memset>
  if(hsd->Instance==SDMMC1)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a37      	ldr	r2, [pc, #220]	; (8000c50 <HAL_SD_MspInit+0x108>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d166      	bne.n	8000c46 <HAL_SD_MspInit+0xfe>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fdb2 	bl	80026f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000b92:	f7ff ffb9 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b96:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <HAL_SD_MspInit+0x10c>)
 8000b98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000b9c:	4a2d      	ldr	r2, [pc, #180]	; (8000c54 <HAL_SD_MspInit+0x10c>)
 8000b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <HAL_SD_MspInit+0x10c>)
 8000ba8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_SD_MspInit+0x10c>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	4a26      	ldr	r2, [pc, #152]	; (8000c54 <HAL_SD_MspInit+0x10c>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <HAL_SD_MspInit+0x10c>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_SD_MspInit+0x10c>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <HAL_SD_MspInit+0x10c>)
 8000bda:	f043 0308 	orr.w	r3, r3, #8
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_SD_MspInit+0x10c>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bf0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4810      	ldr	r0, [pc, #64]	; (8000c58 <HAL_SD_MspInit+0x110>)
 8000c18:	f000 fbae 	bl	8001378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000c34:	230c      	movs	r3, #12
 8000c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <HAL_SD_MspInit+0x114>)
 8000c42:	f000 fb99 	bl	8001378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	37e8      	adds	r7, #232	; 0xe8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	52007000 	.word	0x52007000
 8000c54:	58024400 	.word	0x58024400
 8000c58:	58020800 	.word	0x58020800
 8000c5c:	58020c00 	.word	0x58020c00

08000c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0b8      	sub	sp, #224	; 0xe0
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	22bc      	movs	r2, #188	; 0xbc
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f008 f93d 	bl	8008f00 <memset>
  if(huart->Instance==USART1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <HAL_UART_MspInit+0xc0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d142      	bne.n	8000d16 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fd26 	bl	80026f0 <HAL_RCCEx_PeriphCLKConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000caa:	f7ff ff2d 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d04:	2307      	movs	r3, #7
 8000d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_UART_MspInit+0xc8>)
 8000d12:	f000 fb31 	bl	8001378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	37e0      	adds	r7, #224	; 0xe0
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40011000 	.word	0x40011000
 8000d24:	58024400 	.word	0x58024400
 8000d28:	58020000 	.word	0x58020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f9ca 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	e00a      	b.n	8000da8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d92:	f3af 8000 	nop.w
 8000d96:	4601      	mov	r1, r0
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf0      	blt.n	8000d92 <_read+0x12>
	}

return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	e009      	b.n	8000de0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fc55 	bl	8000684 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf1      	blt.n	8000dcc <_write+0x12>
	}
	return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_close>:

int _close(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_isatty>:

int _isatty(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
	return 1;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f008 f80e 	bl	8008eac <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	24080000 	.word	0x24080000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	2400019c 	.word	0x2400019c
 8000ec4:	240001f0 	.word	0x240001f0

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b37      	ldr	r3, [pc, #220]	; (8000fac <SystemInit+0xe4>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a36      	ldr	r2, [pc, #216]	; (8000fac <SystemInit+0xe4>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000edc:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <SystemInit+0xe8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 030f 	and.w	r3, r3, #15
 8000ee4:	2b06      	cmp	r3, #6
 8000ee6:	d807      	bhi.n	8000ef8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <SystemInit+0xe8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f023 030f 	bic.w	r3, r3, #15
 8000ef0:	4a2f      	ldr	r2, [pc, #188]	; (8000fb0 <SystemInit+0xe8>)
 8000ef2:	f043 0307 	orr.w	r3, r3, #7
 8000ef6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <SystemInit+0xec>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a2d      	ldr	r2, [pc, #180]	; (8000fb4 <SystemInit+0xec>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <SystemInit+0xec>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <SystemInit+0xec>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4929      	ldr	r1, [pc, #164]	; (8000fb4 <SystemInit+0xec>)
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <SystemInit+0xf0>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <SystemInit+0xe8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <SystemInit+0xe8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f023 030f 	bic.w	r3, r3, #15
 8000f2a:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <SystemInit+0xe8>)
 8000f2c:	f043 0307 	orr.w	r3, r3, #7
 8000f30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <SystemInit+0xec>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <SystemInit+0xec>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <SystemInit+0xec>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <SystemInit+0xec>)
 8000f46:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <SystemInit+0xf4>)
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <SystemInit+0xec>)
 8000f4c:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <SystemInit+0xf8>)
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <SystemInit+0xec>)
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <SystemInit+0xfc>)
 8000f54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <SystemInit+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <SystemInit+0xec>)
 8000f5e:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <SystemInit+0xfc>)
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <SystemInit+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <SystemInit+0xec>)
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <SystemInit+0xfc>)
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <SystemInit+0xec>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <SystemInit+0xec>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <SystemInit+0xec>)
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <SystemInit+0xec>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <SystemInit+0x100>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <SystemInit+0x104>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f92:	d202      	bcs.n	8000f9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <SystemInit+0x108>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <SystemInit+0x10c>)
 8000f9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fa0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00
 8000fb0:	52002000 	.word	0x52002000
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fbc:	02020200 	.word	0x02020200
 8000fc0:	01ff0000 	.word	0x01ff0000
 8000fc4:	01010280 	.word	0x01010280
 8000fc8:	5c001000 	.word	0x5c001000
 8000fcc:	ffff0000 	.word	0xffff0000
 8000fd0:	51008108 	.word	0x51008108
 8000fd4:	52004000 	.word	0x52004000

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001010 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fdc:	f7ff ff74 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fe2:	490d      	ldr	r1, [pc, #52]	; (8001018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe8:	e002      	b.n	8000ff0 <LoopCopyDataInit>

08000fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fee:	3304      	adds	r3, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff4:	d3f9      	bcc.n	8000fea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff8:	4c0a      	ldr	r4, [pc, #40]	; (8001024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ffc:	e001      	b.n	8001002 <LoopFillZerobss>

08000ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001000:	3204      	adds	r2, #4

08001002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001004:	d3fb      	bcc.n	8000ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001006:	f007 ff57 	bl	8008eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fb4d 	bl	80006a8 <main>
  bx  lr
 800100e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001014:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001018:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800101c:	0800a198 	.word	0x0800a198
  ldr r2, =_sbss
 8001020:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001024:	240001f0 	.word	0x240001f0

08001028 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC3_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
 8001034:	f000 f96e 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001038:	f001 f984 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 800103c:	4602      	mov	r2, r0
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_Init+0x68>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	f003 030f 	and.w	r3, r3, #15
 8001048:	4913      	ldr	r1, [pc, #76]	; (8001098 <HAL_Init+0x6c>)
 800104a:	5ccb      	ldrb	r3, [r1, r3]
 800104c:	f003 031f 	and.w	r3, r3, #31
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_Init+0x68>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_Init+0x6c>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	fa22 f303 	lsr.w	r3, r2, r3
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_Init+0x70>)
 800106e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <HAL_Init+0x74>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001076:	200f      	movs	r0, #15
 8001078:	f000 f814 	bl	80010a4 <HAL_InitTick>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e002      	b.n	800108c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001086:	f7ff fd45 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	58024400 	.word	0x58024400
 8001098:	0800a0a4 	.word	0x0800a0a4
 800109c:	24000004 	.word	0x24000004
 80010a0:	24000000 	.word	0x24000000

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_InitTick+0x60>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e021      	b.n	80010fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_InitTick+0x64>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_InitTick+0x60>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f945 	bl	800135e <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f91d 	bl	800132a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_InitTick+0x68>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2400000c 	.word	0x2400000c
 8001108:	24000000 	.word	0x24000000
 800110c:	24000008 	.word	0x24000008

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2400000c 	.word	0x2400000c
 8001134:	240001a0 	.word	0x240001a0

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	240001a0 	.word	0x240001a0

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2400000c 	.word	0x2400000c

08001198 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetREVID+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	0c1b      	lsrs	r3, r3, #16
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	5c001000 	.word	0x5c001000

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x40>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00
 80011f4:	05fa0000 	.word	0x05fa0000

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f7ff ff8e 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff47 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff5e 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff90 	bl	8001268 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5f 	bl	8001214 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffb2 	bl	80012d0 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001386:	4b89      	ldr	r3, [pc, #548]	; (80015ac <HAL_GPIO_Init+0x234>)
 8001388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800138a:	e194      	b.n	80016b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2101      	movs	r1, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8186 	beq.w	80016b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d005      	beq.n	80013bc <HAL_GPIO_Init+0x44>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d130      	bne.n	800141e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013f2:	2201      	movs	r2, #1
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	f003 0201 	and.w	r2, r3, #1
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b03      	cmp	r3, #3
 8001428:	d017      	beq.n	800145a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d123      	bne.n	80014ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	691a      	ldr	r2, [r3, #16]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	08da      	lsrs	r2, r3, #3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3208      	adds	r2, #8
 80014a8:	69b9      	ldr	r1, [r7, #24]
 80014aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0203 	and.w	r2, r3, #3
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80e0 	beq.w	80016b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_GPIO_Init+0x238>)
 80014f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014f6:	4a2e      	ldr	r2, [pc, #184]	; (80015b0 <HAL_GPIO_Init+0x238>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_GPIO_Init+0x238>)
 8001502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150e:	4a29      	ldr	r2, [pc, #164]	; (80015b4 <HAL_GPIO_Init+0x23c>)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	3302      	adds	r3, #2
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <HAL_GPIO_Init+0x240>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d052      	beq.n	80015e0 <HAL_GPIO_Init+0x268>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <HAL_GPIO_Init+0x244>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d031      	beq.n	80015a6 <HAL_GPIO_Init+0x22e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <HAL_GPIO_Init+0x248>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d02b      	beq.n	80015a2 <HAL_GPIO_Init+0x22a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a1d      	ldr	r2, [pc, #116]	; (80015c4 <HAL_GPIO_Init+0x24c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d025      	beq.n	800159e <HAL_GPIO_Init+0x226>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <HAL_GPIO_Init+0x250>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_Init+0x222>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <HAL_GPIO_Init+0x254>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x21e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <HAL_GPIO_Init+0x258>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x21a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_GPIO_Init+0x25c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x216>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <HAL_GPIO_Init+0x260>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x212>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_GPIO_Init+0x264>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x20e>
 8001582:	2309      	movs	r3, #9
 8001584:	e02d      	b.n	80015e2 <HAL_GPIO_Init+0x26a>
 8001586:	230a      	movs	r3, #10
 8001588:	e02b      	b.n	80015e2 <HAL_GPIO_Init+0x26a>
 800158a:	2308      	movs	r3, #8
 800158c:	e029      	b.n	80015e2 <HAL_GPIO_Init+0x26a>
 800158e:	2307      	movs	r3, #7
 8001590:	e027      	b.n	80015e2 <HAL_GPIO_Init+0x26a>
 8001592:	2306      	movs	r3, #6
 8001594:	e025      	b.n	80015e2 <HAL_GPIO_Init+0x26a>
 8001596:	2305      	movs	r3, #5
 8001598:	e023      	b.n	80015e2 <HAL_GPIO_Init+0x26a>
 800159a:	2304      	movs	r3, #4
 800159c:	e021      	b.n	80015e2 <HAL_GPIO_Init+0x26a>
 800159e:	2303      	movs	r3, #3
 80015a0:	e01f      	b.n	80015e2 <HAL_GPIO_Init+0x26a>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e01d      	b.n	80015e2 <HAL_GPIO_Init+0x26a>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e01b      	b.n	80015e2 <HAL_GPIO_Init+0x26a>
 80015aa:	bf00      	nop
 80015ac:	58000080 	.word	0x58000080
 80015b0:	58024400 	.word	0x58024400
 80015b4:	58000400 	.word	0x58000400
 80015b8:	58020000 	.word	0x58020000
 80015bc:	58020400 	.word	0x58020400
 80015c0:	58020800 	.word	0x58020800
 80015c4:	58020c00 	.word	0x58020c00
 80015c8:	58021000 	.word	0x58021000
 80015cc:	58021400 	.word	0x58021400
 80015d0:	58021800 	.word	0x58021800
 80015d4:	58021c00 	.word	0x58021c00
 80015d8:	58022000 	.word	0x58022000
 80015dc:	58022400 	.word	0x58022400
 80015e0:	2300      	movs	r3, #0
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	f002 0203 	and.w	r2, r2, #3
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4093      	lsls	r3, r2
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f2:	4938      	ldr	r1, [pc, #224]	; (80016d4 <HAL_GPIO_Init+0x35c>)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	3301      	adds	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f47f ae63 	bne.w	800138c <HAL_GPIO_Init+0x14>
  }
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3724      	adds	r7, #36	; 0x24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	58000400 	.word	0x58000400

080016d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016f0:	2301      	movs	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	e001      	b.n	80016fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_PWREx_ConfigSupply+0x70>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b04      	cmp	r3, #4
 800171a:	d00a      	beq.n	8001732 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_PWREx_ConfigSupply+0x70>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	d001      	beq.n	800172e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e01f      	b.n	800176e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e01d      	b.n	800176e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_PWREx_ConfigSupply+0x70>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f023 0207 	bic.w	r2, r3, #7
 800173a:	490f      	ldr	r1, [pc, #60]	; (8001778 <HAL_PWREx_ConfigSupply+0x70>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4313      	orrs	r3, r2
 8001740:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001742:	f7ff fcf9 	bl	8001138 <HAL_GetTick>
 8001746:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001748:	e009      	b.n	800175e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800174a:	f7ff fcf5 	bl	8001138 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001758:	d901      	bls.n	800175e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e007      	b.n	800176e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_PWREx_ConfigSupply+0x70>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800176a:	d1ee      	bne.n	800174a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	58024800 	.word	0x58024800

0800177c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	; 0x30
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	f000 bc1d 	b.w	8001fca <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8087 	beq.w	80018ac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179e:	4b99      	ldr	r3, [pc, #612]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017a8:	4b96      	ldr	r3, [pc, #600]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d007      	beq.n	80017c4 <HAL_RCC_OscConfig+0x48>
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	2b18      	cmp	r3, #24
 80017b8:	d110      	bne.n	80017dc <HAL_RCC_OscConfig+0x60>
 80017ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d10b      	bne.n	80017dc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	4b8f      	ldr	r3, [pc, #572]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d06c      	beq.n	80018aa <HAL_RCC_OscConfig+0x12e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d168      	bne.n	80018aa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e3f6      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0x78>
 80017e6:	4b87      	ldr	r3, [pc, #540]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a86      	ldr	r2, [pc, #536]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e02e      	b.n	8001852 <HAL_RCC_OscConfig+0xd6>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10c      	bne.n	8001816 <HAL_RCC_OscConfig+0x9a>
 80017fc:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a80      	ldr	r2, [pc, #512]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b7e      	ldr	r3, [pc, #504]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a7d      	ldr	r2, [pc, #500]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e01d      	b.n	8001852 <HAL_RCC_OscConfig+0xd6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800181e:	d10c      	bne.n	800183a <HAL_RCC_OscConfig+0xbe>
 8001820:	4b78      	ldr	r3, [pc, #480]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a77      	ldr	r2, [pc, #476]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b75      	ldr	r3, [pc, #468]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a74      	ldr	r2, [pc, #464]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e00b      	b.n	8001852 <HAL_RCC_OscConfig+0xd6>
 800183a:	4b72      	ldr	r3, [pc, #456]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a71      	ldr	r2, [pc, #452]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 800184c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d013      	beq.n	8001882 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fc6d 	bl	8001138 <HAL_GetTick>
 800185e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001862:	f7ff fc69 	bl	8001138 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b64      	cmp	r3, #100	; 0x64
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e3aa      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001874:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0xe6>
 8001880:	e014      	b.n	80018ac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fc59 	bl	8001138 <HAL_GetTick>
 8001886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188a:	f7ff fc55 	bl	8001138 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b64      	cmp	r3, #100	; 0x64
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e396      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f0      	bne.n	800188a <HAL_RCC_OscConfig+0x10e>
 80018a8:	e000      	b.n	80018ac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80cb 	beq.w	8001a50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ba:	4b52      	ldr	r3, [pc, #328]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018c4:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <HAL_RCC_OscConfig+0x164>
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	2b18      	cmp	r3, #24
 80018d4:	d156      	bne.n	8001984 <HAL_RCC_OscConfig+0x208>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d151      	bne.n	8001984 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e0:	4b48      	ldr	r3, [pc, #288]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x17c>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e368      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 0219 	bic.w	r2, r3, #25
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	493f      	ldr	r1, [pc, #252]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800190a:	f7ff fc15 	bl	8001138 <HAL_GetTick>
 800190e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff fc11 	bl	8001138 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e352      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001924:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	f7ff fc32 	bl	8001198 <HAL_GetREVID>
 8001934:	4603      	mov	r3, r0
 8001936:	f241 0203 	movw	r2, #4099	; 0x1003
 800193a:	4293      	cmp	r3, r2
 800193c:	d817      	bhi.n	800196e <HAL_RCC_OscConfig+0x1f2>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b40      	cmp	r3, #64	; 0x40
 8001944:	d108      	bne.n	8001958 <HAL_RCC_OscConfig+0x1dc>
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800194e:	4a2d      	ldr	r2, [pc, #180]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001956:	e07b      	b.n	8001a50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	031b      	lsls	r3, r3, #12
 8001966:	4927      	ldr	r1, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196c:	e070      	b.n	8001a50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	061b      	lsls	r3, r3, #24
 800197c:	4921      	ldr	r1, [pc, #132]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001982:	e065      	b.n	8001a50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d048      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 0219 	bic.w	r2, r3, #25
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	491a      	ldr	r1, [pc, #104]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff fbcb 	bl	8001138 <HAL_GetTick>
 80019a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fbc7 	bl	8001138 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e308      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	f7ff fbe8 	bl	8001198 <HAL_GetREVID>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d81a      	bhi.n	8001a08 <HAL_RCC_OscConfig+0x28c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d108      	bne.n	80019ec <HAL_RCC_OscConfig+0x270>
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	6053      	str	r3, [r2, #4]
 80019ea:	e031      	b.n	8001a50 <HAL_RCC_OscConfig+0x2d4>
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	031b      	lsls	r3, r3, #12
 80019fa:	4902      	ldr	r1, [pc, #8]	; (8001a04 <HAL_RCC_OscConfig+0x288>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
 8001a00:	e026      	b.n	8001a50 <HAL_RCC_OscConfig+0x2d4>
 8001a02:	bf00      	nop
 8001a04:	58024400 	.word	0x58024400
 8001a08:	4b9a      	ldr	r3, [pc, #616]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	4997      	ldr	r1, [pc, #604]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
 8001a1c:	e018      	b.n	8001a50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1e:	4b95      	ldr	r3, [pc, #596]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a94      	ldr	r2, [pc, #592]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fb85 	bl	8001138 <HAL_GetTick>
 8001a2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff fb81 	bl	8001138 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e2c2      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a44:	4b8b      	ldr	r3, [pc, #556]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80a9 	beq.w	8001bb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a5e:	4b85      	ldr	r3, [pc, #532]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a68:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d007      	beq.n	8001a84 <HAL_RCC_OscConfig+0x308>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b18      	cmp	r3, #24
 8001a78:	d13a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x374>
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d135      	bne.n	8001af0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a84:	4b7b      	ldr	r3, [pc, #492]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_OscConfig+0x320>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b80      	cmp	r3, #128	; 0x80
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e296      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a9c:	f7ff fb7c 	bl	8001198 <HAL_GetREVID>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d817      	bhi.n	8001ada <HAL_RCC_OscConfig+0x35e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	2b20      	cmp	r3, #32
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x348>
 8001ab2:	4b70      	ldr	r3, [pc, #448]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001aba:	4a6e      	ldr	r2, [pc, #440]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ac0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ac2:	e075      	b.n	8001bb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	069b      	lsls	r3, r3, #26
 8001ad2:	4968      	ldr	r1, [pc, #416]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ad8:	e06a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ada:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	061b      	lsls	r3, r3, #24
 8001ae8:	4962      	ldr	r1, [pc, #392]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aee:	e05f      	b.n	8001bb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d042      	beq.n	8001b7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001af8:	4b5e      	ldr	r3, [pc, #376]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5d      	ldr	r2, [pc, #372]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fb18 	bl	8001138 <HAL_GetTick>
 8001b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fb14 	bl	8001138 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e255      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b1e:	4b55      	ldr	r3, [pc, #340]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b2a:	f7ff fb35 	bl	8001198 <HAL_GetREVID>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d817      	bhi.n	8001b68 <HAL_RCC_OscConfig+0x3ec>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d108      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3d6>
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b48:	4a4a      	ldr	r2, [pc, #296]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b4e:	6053      	str	r3, [r2, #4]
 8001b50:	e02e      	b.n	8001bb0 <HAL_RCC_OscConfig+0x434>
 8001b52:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	069b      	lsls	r3, r3, #26
 8001b60:	4944      	ldr	r1, [pc, #272]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
 8001b66:	e023      	b.n	8001bb0 <HAL_RCC_OscConfig+0x434>
 8001b68:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	061b      	lsls	r3, r3, #24
 8001b76:	493f      	ldr	r1, [pc, #252]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
 8001b7c:	e018      	b.n	8001bb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a3c      	ldr	r2, [pc, #240]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fad5 	bl	8001138 <HAL_GetTick>
 8001b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b92:	f7ff fad1 	bl	8001138 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e212      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ba4:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d036      	beq.n	8001c2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d019      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fab2 	bl	8001138 <HAL_GetTick>
 8001bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff faae 	bl	8001138 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1ef      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x45c>
 8001bf6:	e018      	b.n	8001c2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff fa98 	bl	8001138 <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fa94 	bl	8001138 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1d5      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d039      	beq.n	8001caa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d01c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fa75 	bl	8001138 <HAL_GetTick>
 8001c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c52:	f7ff fa71 	bl	8001138 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e1b2      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_OscConfig+0x4f8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x4d6>
 8001c70:	e01b      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
 8001c72:	bf00      	nop
 8001c74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c78:	4b9b      	ldr	r3, [pc, #620]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a9a      	ldr	r2, [pc, #616]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c84:	f7ff fa58 	bl	8001138 <HAL_GetTick>
 8001c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001c8c:	f7ff fa54 	bl	8001138 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e195      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c9e:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8081 	beq.w	8001dba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cb8:	4b8c      	ldr	r3, [pc, #560]	; (8001eec <HAL_RCC_OscConfig+0x770>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a8b      	ldr	r2, [pc, #556]	; (8001eec <HAL_RCC_OscConfig+0x770>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cc4:	f7ff fa38 	bl	8001138 <HAL_GetTick>
 8001cc8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ccc:	f7ff fa34 	bl	8001138 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e175      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cde:	4b83      	ldr	r3, [pc, #524]	; (8001eec <HAL_RCC_OscConfig+0x770>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d106      	bne.n	8001d00 <HAL_RCC_OscConfig+0x584>
 8001cf2:	4b7d      	ldr	r3, [pc, #500]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	4a7c      	ldr	r2, [pc, #496]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfe:	e02d      	b.n	8001d5c <HAL_RCC_OscConfig+0x5e0>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5a6>
 8001d08:	4b77      	ldr	r3, [pc, #476]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	4a76      	ldr	r2, [pc, #472]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	6713      	str	r3, [r2, #112]	; 0x70
 8001d14:	4b74      	ldr	r3, [pc, #464]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a73      	ldr	r2, [pc, #460]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d1a:	f023 0304 	bic.w	r3, r3, #4
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x5e0>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5c8>
 8001d2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6713      	str	r3, [r2, #112]	; 0x70
 8001d36:	4b6c      	ldr	r3, [pc, #432]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a6b      	ldr	r2, [pc, #428]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	e00b      	b.n	8001d5c <HAL_RCC_OscConfig+0x5e0>
 8001d44:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	4a67      	ldr	r2, [pc, #412]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d50:	4b65      	ldr	r3, [pc, #404]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d54:	4a64      	ldr	r2, [pc, #400]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d56:	f023 0304 	bic.w	r3, r3, #4
 8001d5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d015      	beq.n	8001d90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff f9e8 	bl	8001138 <HAL_GetTick>
 8001d68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff f9e4 	bl	8001138 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e123      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d82:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ee      	beq.n	8001d6c <HAL_RCC_OscConfig+0x5f0>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff f9d2 	bl	8001138 <HAL_GetTick>
 8001d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7ff f9ce 	bl	8001138 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e10d      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dae:	4b4e      	ldr	r3, [pc, #312]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ee      	bne.n	8001d98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8102 	beq.w	8001fc8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dc4:	4b48      	ldr	r3, [pc, #288]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dcc:	2b18      	cmp	r3, #24
 8001dce:	f000 80bd 	beq.w	8001f4c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	f040 809e 	bne.w	8001f18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a41      	ldr	r2, [pc, #260]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff f9a6 	bl	8001138 <HAL_GetTick>
 8001dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff f9a2 	bl	8001138 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e0e3      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e02:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <HAL_RCC_OscConfig+0x774>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	430a      	orrs	r2, r1
 8001e22:	4931      	ldr	r1, [pc, #196]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	628b      	str	r3, [r1, #40]	; 0x28
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	3b01      	subs	r3, #1
 8001e38:	025b      	lsls	r3, r3, #9
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	3b01      	subs	r3, #1
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e50:	3b01      	subs	r3, #1
 8001e52:	061b      	lsls	r3, r3, #24
 8001e54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e58:	4923      	ldr	r1, [pc, #140]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001e5e:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_RCC_OscConfig+0x778>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e76:	00d2      	lsls	r2, r2, #3
 8001e78:	491b      	ldr	r1, [pc, #108]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	f023 020c 	bic.w	r2, r3, #12
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4917      	ldr	r1, [pc, #92]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	f023 0202 	bic.w	r2, r3, #2
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	4912      	ldr	r1, [pc, #72]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	4a10      	ldr	r2, [pc, #64]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff f92b 	bl	8001138 <HAL_GetTick>
 8001ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ee4:	e011      	b.n	8001f0a <HAL_RCC_OscConfig+0x78e>
 8001ee6:	bf00      	nop
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	58024800 	.word	0x58024800
 8001ef0:	fffffc0c 	.word	0xfffffc0c
 8001ef4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff f91e 	bl	8001138 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e05f      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f0a:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_RCC_OscConfig+0x858>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x77c>
 8001f16:	e057      	b.n	8001fc8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <HAL_RCC_OscConfig+0x858>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <HAL_RCC_OscConfig+0x858>)
 8001f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f908 	bl	8001138 <HAL_GetTick>
 8001f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7ff f904 	bl	8001138 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e045      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f3e:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <HAL_RCC_OscConfig+0x858>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x7b0>
 8001f4a:	e03d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_RCC_OscConfig+0x858>)
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_RCC_OscConfig+0x858>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d031      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d12a      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d122      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d11a      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	0a5b      	lsrs	r3, r3, #9
 8001f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d111      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	0c1b      	lsrs	r3, r3, #16
 8001fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d108      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	0e1b      	lsrs	r3, r3, #24
 8001fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3730      	adds	r7, #48	; 0x30
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	58024400 	.word	0x58024400

08001fd8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e19c      	b.n	8002326 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b8a      	ldr	r3, [pc, #552]	; (8002218 <HAL_RCC_ClockConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b87      	ldr	r3, [pc, #540]	; (8002218 <HAL_RCC_ClockConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 020f 	bic.w	r2, r3, #15
 8002002:	4985      	ldr	r1, [pc, #532]	; (8002218 <HAL_RCC_ClockConfig+0x240>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b83      	ldr	r3, [pc, #524]	; (8002218 <HAL_RCC_ClockConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e184      	b.n	8002326 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	4b7b      	ldr	r3, [pc, #492]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002034:	429a      	cmp	r2, r3
 8002036:	d908      	bls.n	800204a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002038:	4b78      	ldr	r3, [pc, #480]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	4975      	ldr	r1, [pc, #468]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 8002046:	4313      	orrs	r3, r2
 8002048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d010      	beq.n	8002078 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	4b70      	ldr	r3, [pc, #448]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002062:	429a      	cmp	r2, r3
 8002064:	d908      	bls.n	8002078 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002066:	4b6d      	ldr	r3, [pc, #436]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	496a      	ldr	r1, [pc, #424]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 8002074:	4313      	orrs	r3, r2
 8002076:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d010      	beq.n	80020a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	4b64      	ldr	r3, [pc, #400]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002090:	429a      	cmp	r2, r3
 8002092:	d908      	bls.n	80020a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002094:	4b61      	ldr	r3, [pc, #388]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	495e      	ldr	r1, [pc, #376]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020be:	429a      	cmp	r2, r3
 80020c0:	d908      	bls.n	80020d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020c2:	4b56      	ldr	r3, [pc, #344]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4953      	ldr	r1, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d010      	beq.n	8002102 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d908      	bls.n	8002102 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f023 020f 	bic.w	r2, r3, #15
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4947      	ldr	r1, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d055      	beq.n	80021ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800210e:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4940      	ldr	r1, [pc, #256]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 800211c:	4313      	orrs	r3, r2
 800211e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d107      	bne.n	8002138 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002128:	4b3c      	ldr	r3, [pc, #240]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d121      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0f6      	b.n	8002326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d107      	bne.n	8002150 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002140:	4b36      	ldr	r3, [pc, #216]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d115      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0ea      	b.n	8002326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002158:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0de      	b.n	8002326 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002168:	4b2c      	ldr	r3, [pc, #176]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0d6      	b.n	8002326 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f023 0207 	bic.w	r2, r3, #7
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4925      	ldr	r1, [pc, #148]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 8002186:	4313      	orrs	r3, r2
 8002188:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7fe ffd5 	bl	8001138 <HAL_GetTick>
 800218e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7fe ffd1 	bl	8001138 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0be      	b.n	8002326 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a8:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d1eb      	bne.n	8002192 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d010      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d208      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f023 020f 	bic.w	r2, r3, #15
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_RCC_ClockConfig+0x244>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_ClockConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d214      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_RCC_ClockConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 020f 	bic.w	r2, r3, #15
 80021fe:	4906      	ldr	r1, [pc, #24]	; (8002218 <HAL_RCC_ClockConfig+0x240>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_RCC_ClockConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e086      	b.n	8002326 <HAL_RCC_ClockConfig+0x34e>
 8002218:	52002000 	.word	0x52002000
 800221c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d010      	beq.n	800224e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002238:	429a      	cmp	r2, r3
 800223a:	d208      	bcs.n	800224e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800223c:	4b3c      	ldr	r3, [pc, #240]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	4939      	ldr	r1, [pc, #228]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 800224a:	4313      	orrs	r3, r2
 800224c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d010      	beq.n	800227c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	4b34      	ldr	r3, [pc, #208]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002266:	429a      	cmp	r2, r3
 8002268:	d208      	bcs.n	800227c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800226a:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	492e      	ldr	r1, [pc, #184]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 8002278:	4313      	orrs	r3, r2
 800227a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002294:	429a      	cmp	r2, r3
 8002296:	d208      	bcs.n	80022aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4922      	ldr	r1, [pc, #136]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d208      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	4917      	ldr	r1, [pc, #92]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022d8:	f000 f834 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	4912      	ldr	r1, [pc, #72]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x358>)
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <HAL_RCC_ClockConfig+0x35c>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x360>)
 800230e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_RCC_ClockConfig+0x364>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x368>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fec2 	bl	80010a4 <HAL_InitTick>
 8002320:	4603      	mov	r3, r0
 8002322:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	58024400 	.word	0x58024400
 8002334:	0800a0a4 	.word	0x0800a0a4
 8002338:	24000004 	.word	0x24000004
 800233c:	24000000 	.word	0x24000000
 8002340:	24000008 	.word	0x24000008

08002344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800234a:	4bb3      	ldr	r3, [pc, #716]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002352:	2b18      	cmp	r3, #24
 8002354:	f200 8155 	bhi.w	8002602 <HAL_RCC_GetSysClockFreq+0x2be>
 8002358:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <HAL_RCC_GetSysClockFreq+0x1c>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	080023c5 	.word	0x080023c5
 8002364:	08002603 	.word	0x08002603
 8002368:	08002603 	.word	0x08002603
 800236c:	08002603 	.word	0x08002603
 8002370:	08002603 	.word	0x08002603
 8002374:	08002603 	.word	0x08002603
 8002378:	08002603 	.word	0x08002603
 800237c:	08002603 	.word	0x08002603
 8002380:	080023eb 	.word	0x080023eb
 8002384:	08002603 	.word	0x08002603
 8002388:	08002603 	.word	0x08002603
 800238c:	08002603 	.word	0x08002603
 8002390:	08002603 	.word	0x08002603
 8002394:	08002603 	.word	0x08002603
 8002398:	08002603 	.word	0x08002603
 800239c:	08002603 	.word	0x08002603
 80023a0:	080023f1 	.word	0x080023f1
 80023a4:	08002603 	.word	0x08002603
 80023a8:	08002603 	.word	0x08002603
 80023ac:	08002603 	.word	0x08002603
 80023b0:	08002603 	.word	0x08002603
 80023b4:	08002603 	.word	0x08002603
 80023b8:	08002603 	.word	0x08002603
 80023bc:	08002603 	.word	0x08002603
 80023c0:	080023f7 	.word	0x080023f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023c4:	4b94      	ldr	r3, [pc, #592]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d009      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023d0:	4b91      	ldr	r3, [pc, #580]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	08db      	lsrs	r3, r3, #3
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	4a90      	ldr	r2, [pc, #576]	; (800261c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023e2:	e111      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023e4:	4b8d      	ldr	r3, [pc, #564]	; (800261c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023e6:	61bb      	str	r3, [r7, #24]
    break;
 80023e8:	e10e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023ea:	4b8d      	ldr	r3, [pc, #564]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023ec:	61bb      	str	r3, [r7, #24]
    break;
 80023ee:	e10b      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023f0:	4b8c      	ldr	r3, [pc, #560]	; (8002624 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80023f2:	61bb      	str	r3, [r7, #24]
    break;
 80023f4:	e108      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023f6:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002400:	4b85      	ldr	r3, [pc, #532]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800240a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800240c:	4b82      	ldr	r3, [pc, #520]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002416:	4b80      	ldr	r3, [pc, #512]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80e1 	beq.w	80025fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b02      	cmp	r3, #2
 800243e:	f000 8083 	beq.w	8002548 <HAL_RCC_GetSysClockFreq+0x204>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b02      	cmp	r3, #2
 8002446:	f200 80a1 	bhi.w	800258c <HAL_RCC_GetSysClockFreq+0x248>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x114>
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d056      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002456:	e099      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002458:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d02d      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002464:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	08db      	lsrs	r3, r3, #3
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	4a6b      	ldr	r2, [pc, #428]	; (800261c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
 8002474:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800248e:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800249e:	ed97 6a02 	vldr	s12, [r7, #8]
 80024a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024be:	e087      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800262c <HAL_RCC_GetSysClockFreq+0x2e8>
 80024ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024d2:	4b51      	ldr	r3, [pc, #324]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002502:	e065      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800250e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002630 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002516:	4b40      	ldr	r3, [pc, #256]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002526:	ed97 6a02 	vldr	s12, [r7, #8]
 800252a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002628 <HAL_RCC_GetSysClockFreq+0x2e4>
 800252e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800253a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800253e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002546:	e043      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002552:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002634 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800256a:	ed97 6a02 	vldr	s12, [r7, #8]
 800256e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002628 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800257a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800257e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800258a:	e021      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002596:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002630 <HAL_RCC_GetSysClockFreq+0x2ec>
 800259a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80025b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002628 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	0a5b      	lsrs	r3, r3, #9
 80025d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025da:	3301      	adds	r3, #1
 80025dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80025ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025f4:	ee17 3a90 	vmov	r3, s15
 80025f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025fa:	e005      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]
    break;
 8002600:	e002      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002604:	61bb      	str	r3, [r7, #24]
    break;
 8002606:	bf00      	nop
  }

  return sysclockfreq;
 8002608:	69bb      	ldr	r3, [r7, #24]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	58024400 	.word	0x58024400
 800261c:	03d09000 	.word	0x03d09000
 8002620:	003d0900 	.word	0x003d0900
 8002624:	017d7840 	.word	0x017d7840
 8002628:	46000000 	.word	0x46000000
 800262c:	4c742400 	.word	0x4c742400
 8002630:	4a742400 	.word	0x4a742400
 8002634:	4bbebc20 	.word	0x4bbebc20

08002638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800263e:	f7ff fe81 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8002642:	4602      	mov	r2, r0
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCC_GetHCLKFreq+0x50>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	490f      	ldr	r1, [pc, #60]	; (800268c <HAL_RCC_GetHCLKFreq+0x54>)
 8002650:	5ccb      	ldrb	r3, [r1, r3]
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_RCC_GetHCLKFreq+0x50>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_RCC_GetHCLKFreq+0x54>)
 8002666:	5cd3      	ldrb	r3, [r2, r3]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a07      	ldr	r2, [pc, #28]	; (8002690 <HAL_RCC_GetHCLKFreq+0x58>)
 8002674:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002676:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <HAL_RCC_GetHCLKFreq+0x58>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	58024400 	.word	0x58024400
 800268c:	0800a0a4 	.word	0x0800a0a4
 8002690:	24000004 	.word	0x24000004
 8002694:	24000000 	.word	0x24000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800269c:	f7ff ffcc 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4904      	ldr	r1, [pc, #16]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	58024400 	.word	0x58024400
 80026c0:	0800a0a4 	.word	0x0800a0a4

080026c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80026c8:	f7ff ffb6 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4904      	ldr	r1, [pc, #16]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	58024400 	.word	0x58024400
 80026ec:	0800a0a4 	.word	0x0800a0a4

080026f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026f8:	2300      	movs	r3, #0
 80026fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026fc:	2300      	movs	r3, #0
 80026fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d03f      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002710:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002714:	d02a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002716:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800271a:	d824      	bhi.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800271c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002720:	d018      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002726:	d81e      	bhi.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800272c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002730:	d007      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002732:	e018      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002734:	4ba3      	ldr	r3, [pc, #652]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	4aa2      	ldr	r2, [pc, #648]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800273a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002740:	e015      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	2102      	movs	r1, #2
 8002748:	4618      	mov	r0, r3
 800274a:	f001 fff9 	bl	8004740 <RCCEx_PLL2_Config>
 800274e:	4603      	mov	r3, r0
 8002750:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002752:	e00c      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3324      	adds	r3, #36	; 0x24
 8002758:	2102      	movs	r1, #2
 800275a:	4618      	mov	r0, r3
 800275c:	f002 f8a2 	bl	80048a4 <RCCEx_PLL3_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002764:	e003      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
      break;
 800276a:	e000      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800276c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002774:	4b93      	ldr	r3, [pc, #588]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002780:	4990      	ldr	r1, [pc, #576]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	650b      	str	r3, [r1, #80]	; 0x50
 8002786:	e001      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d03d      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	2b04      	cmp	r3, #4
 800279e:	d826      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027bd 	.word	0x080027bd
 80027ac:	080027cb 	.word	0x080027cb
 80027b0:	080027dd 	.word	0x080027dd
 80027b4:	080027f5 	.word	0x080027f5
 80027b8:	080027f5 	.word	0x080027f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027bc:	4b81      	ldr	r3, [pc, #516]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	4a80      	ldr	r2, [pc, #512]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027c8:	e015      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 ffb5 	bl	8004740 <RCCEx_PLL2_Config>
 80027d6:	4603      	mov	r3, r0
 80027d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027da:	e00c      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 f85e 	bl	80048a4 <RCCEx_PLL3_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027ec:	e003      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
      break;
 80027f2:	e000      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80027f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027fc:	4b71      	ldr	r3, [pc, #452]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002800:	f023 0207 	bic.w	r2, r3, #7
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	496e      	ldr	r1, [pc, #440]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	650b      	str	r3, [r1, #80]	; 0x50
 800280e:	e001      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281c:	2b00      	cmp	r3, #0
 800281e:	d042      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002828:	d02b      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800282a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282e:	d825      	bhi.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002830:	2bc0      	cmp	r3, #192	; 0xc0
 8002832:	d028      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002834:	2bc0      	cmp	r3, #192	; 0xc0
 8002836:	d821      	bhi.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002838:	2b80      	cmp	r3, #128	; 0x80
 800283a:	d016      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800283c:	2b80      	cmp	r3, #128	; 0x80
 800283e:	d81d      	bhi.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d007      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002848:	e018      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800284a:	4b5e      	ldr	r3, [pc, #376]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	4a5d      	ldr	r2, [pc, #372]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002854:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002856:	e017      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3304      	adds	r3, #4
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f001 ff6e 	bl	8004740 <RCCEx_PLL2_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002868:	e00e      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3324      	adds	r3, #36	; 0x24
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f002 f817 	bl	80048a4 <RCCEx_PLL3_Config>
 8002876:	4603      	mov	r3, r0
 8002878:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	75fb      	strb	r3, [r7, #23]
      break;
 8002880:	e002      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800288e:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002892:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	494a      	ldr	r1, [pc, #296]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	650b      	str	r3, [r1, #80]	; 0x50
 80028a0:	e001      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d049      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028bc:	d030      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80028be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028c2:	d82a      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028c8:	d02c      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80028ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028ce:	d824      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d4:	d018      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028da:	d81e      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80028e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028e4:	d007      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80028e6:	e018      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e8:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	4a35      	ldr	r2, [pc, #212]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028f4:	e017      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f001 ff1f 	bl	8004740 <RCCEx_PLL2_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002906:	e00e      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3324      	adds	r3, #36	; 0x24
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f001 ffc8 	bl	80048a4 <RCCEx_PLL3_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002918:	e005      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
      break;
 800291e:	e002      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002920:	bf00      	nop
 8002922:	e000      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800293a:	4922      	ldr	r1, [pc, #136]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	658b      	str	r3, [r1, #88]	; 0x58
 8002940:	e001      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002942:	7dfb      	ldrb	r3, [r7, #23]
 8002944:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294e:	2b00      	cmp	r3, #0
 8002950:	d04b      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800295c:	d030      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800295e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002962:	d82a      	bhi.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002964:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002968:	d02e      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800296a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800296e:	d824      	bhi.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002974:	d018      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800297a:	d81e      	bhi.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d007      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002986:	e018      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002988:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800298e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002992:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002994:	e019      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3304      	adds	r3, #4
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f001 fecf 	bl	8004740 <RCCEx_PLL2_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80029a6:	e010      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3324      	adds	r3, #36	; 0x24
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f001 ff78 	bl	80048a4 <RCCEx_PLL3_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b8:	e007      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	75fb      	strb	r3, [r7, #23]
      break;
 80029be:	e004      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80029c0:	bf00      	nop
 80029c2:	e002      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80029c4:	58024400 	.word	0x58024400
      break;
 80029c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80029d0:	4b99      	ldr	r3, [pc, #612]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029de:	4996      	ldr	r1, [pc, #600]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	658b      	str	r3, [r1, #88]	; 0x58
 80029e4:	e001      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d032      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fa:	2b30      	cmp	r3, #48	; 0x30
 80029fc:	d01c      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80029fe:	2b30      	cmp	r3, #48	; 0x30
 8002a00:	d817      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d00c      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d813      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d016      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d10f      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a12:	4b89      	ldr	r3, [pc, #548]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	4a88      	ldr	r2, [pc, #544]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a1e:	e00e      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	2102      	movs	r1, #2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fe8a 	bl	8004740 <RCCEx_PLL2_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a30:	e005      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002a38:	bf00      	nop
 8002a3a:	e000      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a44:	4b7c      	ldr	r3, [pc, #496]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a50:	4979      	ldr	r1, [pc, #484]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a56:	e001      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d047      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a70:	d030      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a76:	d82a      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a7c:	d02c      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a82:	d824      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a88:	d018      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8e:	d81e      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a98:	d007      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002a9a:	e018      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a9c:	4b66      	ldr	r3, [pc, #408]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	4a65      	ldr	r2, [pc, #404]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002aa8:	e017      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 fe45 	bl	8004740 <RCCEx_PLL2_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002aba:	e00e      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3324      	adds	r3, #36	; 0x24
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 feee 	bl	80048a4 <RCCEx_PLL3_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002acc:	e005      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ad2:	e002      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002ad4:	bf00      	nop
 8002ad6:	e000      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ae0:	4b55      	ldr	r3, [pc, #340]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	4952      	ldr	r1, [pc, #328]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	650b      	str	r3, [r1, #80]	; 0x50
 8002af2:	e001      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d049      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d02e      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b12:	d828      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b18:	d02a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002b1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b1e:	d822      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b24:	d026      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002b26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b2a:	d81c      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b30:	d010      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b36:	d816      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01d      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d111      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2101      	movs	r1, #1
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 fdf9 	bl	8004740 <RCCEx_PLL2_Config>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b52:	e012      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3324      	adds	r3, #36	; 0x24
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f001 fea2 	bl	80048a4 <RCCEx_PLL3_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b64:	e009      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6a:	e006      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b6c:	bf00      	nop
 8002b6e:	e004      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b70:	bf00      	nop
 8002b72:	e002      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b74:	bf00      	nop
 8002b76:	e000      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b80:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8c:	492a      	ldr	r1, [pc, #168]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	650b      	str	r3, [r1, #80]	; 0x50
 8002b92:	e001      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d04d      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bae:	d02e      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb4:	d828      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bba:	d02a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc0:	d822      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bc6:	d026      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002bc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bcc:	d81c      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd2:	d010      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd8:	d816      	bhi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01d      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002be2:	d111      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3304      	adds	r3, #4
 8002be8:	2101      	movs	r1, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 fda8 	bl	8004740 <RCCEx_PLL2_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002bf4:	e012      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3324      	adds	r3, #36	; 0x24
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 fe51 	bl	80048a4 <RCCEx_PLL3_Config>
 8002c02:	4603      	mov	r3, r0
 8002c04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c06:	e009      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c0c:	e006      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e004      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c12:	bf00      	nop
 8002c14:	e002      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c16:	bf00      	nop
 8002c18:	e000      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c30:	4901      	ldr	r1, [pc, #4]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	658b      	str	r3, [r1, #88]	; 0x58
 8002c36:	e003      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002c38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d02f      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c54:	d00e      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c5a:	d814      	bhi.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c64:	d10f      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c66:	4baf      	ldr	r3, [pc, #700]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	4aae      	ldr	r2, [pc, #696]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c72:	e00c      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	2101      	movs	r1, #1
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 fd60 	bl	8004740 <RCCEx_PLL2_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c84:	e003      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
      break;
 8002c8a:	e000      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c94:	4ba3      	ldr	r3, [pc, #652]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca0:	49a0      	ldr	r1, [pc, #640]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	650b      	str	r3, [r1, #80]	; 0x50
 8002ca6:	e001      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d032      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d81b      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002cc0:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002cff 	.word	0x08002cff
 8002ccc:	08002cd9 	.word	0x08002cd9
 8002cd0:	08002ce7 	.word	0x08002ce7
 8002cd4:	08002cff 	.word	0x08002cff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd8:	4b92      	ldr	r3, [pc, #584]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	4a91      	ldr	r2, [pc, #580]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	2102      	movs	r1, #2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 fd27 	bl	8004740 <RCCEx_PLL2_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cf6:	e003      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002cfc:	e000      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d06:	4b87      	ldr	r3, [pc, #540]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	f023 0203 	bic.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4984      	ldr	r1, [pc, #528]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d18:	e001      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8086 	beq.w	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d2c:	4b7e      	ldr	r3, [pc, #504]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a7d      	ldr	r2, [pc, #500]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d38:	f7fe f9fe 	bl	8001138 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d3e:	e009      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fe f9fa 	bl	8001138 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d902      	bls.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	75fb      	strb	r3, [r7, #23]
        break;
 8002d52:	e005      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d54:	4b74      	ldr	r3, [pc, #464]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ef      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d166      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d66:	4b6f      	ldr	r3, [pc, #444]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d70:	4053      	eors	r3, r2
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d013      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d84:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	4a66      	ldr	r2, [pc, #408]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d90:	4b64      	ldr	r3, [pc, #400]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	4a63      	ldr	r2, [pc, #396]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d9c:	4a61      	ldr	r2, [pc, #388]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dac:	d115      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fe f9c3 	bl	8001138 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002db4:	e00b      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe f9bf 	bl	8001138 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d902      	bls.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	75fb      	strb	r3, [r7, #23]
            break;
 8002dcc:	e005      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dce:	4b55      	ldr	r3, [pc, #340]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0ed      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d126      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dee:	d10d      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dfe:	0919      	lsrs	r1, r3, #4
 8002e00:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002e02:	400b      	ands	r3, r1
 8002e04:	4947      	ldr	r1, [pc, #284]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	610b      	str	r3, [r1, #16]
 8002e0a:	e005      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002e0c:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	4a44      	ldr	r2, [pc, #272]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e16:	6113      	str	r3, [r2, #16]
 8002e18:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e26:	493f      	ldr	r1, [pc, #252]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	670b      	str	r3, [r1, #112]	; 0x70
 8002e2c:	e004      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	75bb      	strb	r3, [r7, #22]
 8002e32:	e001      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8085 	beq.w	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4a:	2b28      	cmp	r3, #40	; 0x28
 8002e4c:	d866      	bhi.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002f31 	.word	0x08002f31
 8002e58:	08002f1d 	.word	0x08002f1d
 8002e5c:	08002f1d 	.word	0x08002f1d
 8002e60:	08002f1d 	.word	0x08002f1d
 8002e64:	08002f1d 	.word	0x08002f1d
 8002e68:	08002f1d 	.word	0x08002f1d
 8002e6c:	08002f1d 	.word	0x08002f1d
 8002e70:	08002f1d 	.word	0x08002f1d
 8002e74:	08002ef9 	.word	0x08002ef9
 8002e78:	08002f1d 	.word	0x08002f1d
 8002e7c:	08002f1d 	.word	0x08002f1d
 8002e80:	08002f1d 	.word	0x08002f1d
 8002e84:	08002f1d 	.word	0x08002f1d
 8002e88:	08002f1d 	.word	0x08002f1d
 8002e8c:	08002f1d 	.word	0x08002f1d
 8002e90:	08002f1d 	.word	0x08002f1d
 8002e94:	08002f0b 	.word	0x08002f0b
 8002e98:	08002f1d 	.word	0x08002f1d
 8002e9c:	08002f1d 	.word	0x08002f1d
 8002ea0:	08002f1d 	.word	0x08002f1d
 8002ea4:	08002f1d 	.word	0x08002f1d
 8002ea8:	08002f1d 	.word	0x08002f1d
 8002eac:	08002f1d 	.word	0x08002f1d
 8002eb0:	08002f1d 	.word	0x08002f1d
 8002eb4:	08002f31 	.word	0x08002f31
 8002eb8:	08002f1d 	.word	0x08002f1d
 8002ebc:	08002f1d 	.word	0x08002f1d
 8002ec0:	08002f1d 	.word	0x08002f1d
 8002ec4:	08002f1d 	.word	0x08002f1d
 8002ec8:	08002f1d 	.word	0x08002f1d
 8002ecc:	08002f1d 	.word	0x08002f1d
 8002ed0:	08002f1d 	.word	0x08002f1d
 8002ed4:	08002f31 	.word	0x08002f31
 8002ed8:	08002f1d 	.word	0x08002f1d
 8002edc:	08002f1d 	.word	0x08002f1d
 8002ee0:	08002f1d 	.word	0x08002f1d
 8002ee4:	08002f1d 	.word	0x08002f1d
 8002ee8:	08002f1d 	.word	0x08002f1d
 8002eec:	08002f1d 	.word	0x08002f1d
 8002ef0:	08002f1d 	.word	0x08002f1d
 8002ef4:	08002f31 	.word	0x08002f31
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 fc1e 	bl	8004740 <RCCEx_PLL2_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f08:	e013      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3324      	adds	r3, #36	; 0x24
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f001 fcc7 	bl	80048a4 <RCCEx_PLL3_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f20:	e007      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f22:	bf00      	nop
 8002f24:	58024400 	.word	0x58024400
 8002f28:	58024800 	.word	0x58024800
 8002f2c:	00ffffcf 	.word	0x00ffffcf
      break;
 8002f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f38:	4b96      	ldr	r3, [pc, #600]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f44:	4993      	ldr	r1, [pc, #588]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	654b      	str	r3, [r1, #84]	; 0x54
 8002f4a:	e001      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d038      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	d821      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002f64:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002faf 	.word	0x08002faf
 8002f70:	08002f85 	.word	0x08002f85
 8002f74:	08002f97 	.word	0x08002f97
 8002f78:	08002faf 	.word	0x08002faf
 8002f7c:	08002faf 	.word	0x08002faf
 8002f80:	08002faf 	.word	0x08002faf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 fbd8 	bl	8004740 <RCCEx_PLL2_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f94:	e00c      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3324      	adds	r3, #36	; 0x24
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fc81 	bl	80048a4 <RCCEx_PLL3_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002fa6:	e003      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	75fb      	strb	r3, [r7, #23]
      break;
 8002fac:	e000      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002fb6:	4b77      	ldr	r3, [pc, #476]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	f023 0207 	bic.w	r2, r3, #7
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	4974      	ldr	r1, [pc, #464]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	654b      	str	r3, [r1, #84]	; 0x54
 8002fc8:	e001      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d821      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002fe4:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	0800302f 	.word	0x0800302f
 8002ff0:	08003005 	.word	0x08003005
 8002ff4:	08003017 	.word	0x08003017
 8002ff8:	0800302f 	.word	0x0800302f
 8002ffc:	0800302f 	.word	0x0800302f
 8003000:	0800302f 	.word	0x0800302f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	2101      	movs	r1, #1
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fb98 	bl	8004740 <RCCEx_PLL2_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003014:	e00c      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3324      	adds	r3, #36	; 0x24
 800301a:	2101      	movs	r1, #1
 800301c:	4618      	mov	r0, r3
 800301e:	f001 fc41 	bl	80048a4 <RCCEx_PLL3_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003026:	e003      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]
      break;
 800302c:	e000      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800302e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003036:	4b57      	ldr	r3, [pc, #348]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	f023 0207 	bic.w	r2, r3, #7
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	4953      	ldr	r1, [pc, #332]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	658b      	str	r3, [r1, #88]	; 0x58
 800304a:	e001      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d04b      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003066:	d02e      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800306c:	d828      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d02a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003078:	d822      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800307a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800307e:	d026      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003080:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003084:	d81c      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800308a:	d010      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800308c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003090:	d816      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01d      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800309a:	d111      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 fb4c 	bl	8004740 <RCCEx_PLL2_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030ac:	e012      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3324      	adds	r3, #36	; 0x24
 80030b2:	2102      	movs	r1, #2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f001 fbf5 	bl	80048a4 <RCCEx_PLL3_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030be:	e009      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
      break;
 80030c4:	e006      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80030c6:	bf00      	nop
 80030c8:	e004      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80030ca:	bf00      	nop
 80030cc:	e002      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80030ce:	bf00      	nop
 80030d0:	e000      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80030d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030da:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e8:	492a      	ldr	r1, [pc, #168]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	654b      	str	r3, [r1, #84]	; 0x54
 80030ee:	e001      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d04d      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003106:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800310a:	d02e      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800310c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003110:	d828      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	d02a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311c:	d822      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800311e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003122:	d026      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003124:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003128:	d81c      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800312a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312e:	d010      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003134:	d816      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01d      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313e:	d111      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f001 fafa 	bl	8004740 <RCCEx_PLL2_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003150:	e012      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3324      	adds	r3, #36	; 0x24
 8003156:	2102      	movs	r1, #2
 8003158:	4618      	mov	r0, r3
 800315a:	f001 fba3 	bl	80048a4 <RCCEx_PLL3_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003162:	e009      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	75fb      	strb	r3, [r7, #23]
      break;
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800316a:	bf00      	nop
 800316c:	e004      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800316e:	bf00      	nop
 8003170:	e002      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318c:	4901      	ldr	r1, [pc, #4]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	658b      	str	r3, [r1, #88]	; 0x58
 8003192:	e003      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d04b      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031b2:	d02e      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80031b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031b8:	d828      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80031ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031be:	d02a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c4:	d822      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80031c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031ca:	d026      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80031cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80031d0:	d81c      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80031d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031d6:	d010      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80031d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031dc:	d816      	bhi.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01d      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80031e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e6:	d111      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 faa6 	bl	8004740 <RCCEx_PLL2_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031f8:	e012      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3324      	adds	r3, #36	; 0x24
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f001 fb4f 	bl	80048a4 <RCCEx_PLL3_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800320a:	e009      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
      break;
 8003210:	e006      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003212:	bf00      	nop
 8003214:	e004      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003216:	bf00      	nop
 8003218:	e002      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800321a:	bf00      	nop
 800321c:	e000      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800321e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003226:	4b9d      	ldr	r3, [pc, #628]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003234:	4999      	ldr	r1, [pc, #612]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003236:	4313      	orrs	r3, r2
 8003238:	658b      	str	r3, [r1, #88]	; 0x58
 800323a:	e001      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003256:	d10a      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3324      	adds	r3, #36	; 0x24
 800325c:	2102      	movs	r1, #2
 800325e:	4618      	mov	r0, r3
 8003260:	f001 fb20 	bl	80048a4 <RCCEx_PLL3_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800326e:	4b8b      	ldr	r3, [pc, #556]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327c:	4987      	ldr	r1, [pc, #540]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800327e:	4313      	orrs	r3, r2
 8003280:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003298:	d10a      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3324      	adds	r3, #36	; 0x24
 800329e:	2102      	movs	r1, #2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 faff 	bl	80048a4 <RCCEx_PLL3_Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032b0:	4b7a      	ldr	r3, [pc, #488]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032be:	4977      	ldr	r1, [pc, #476]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d034      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032da:	d01d      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80032dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032e0:	d817      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ea:	d009      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80032ec:	e011      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3304      	adds	r3, #4
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 fa23 	bl	8004740 <RCCEx_PLL2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032fe:	e00c      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3324      	adds	r3, #36	; 0x24
 8003304:	2102      	movs	r1, #2
 8003306:	4618      	mov	r0, r3
 8003308:	f001 facc 	bl	80048a4 <RCCEx_PLL3_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003310:	e003      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
      break;
 8003316:	e000      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003320:	4b5e      	ldr	r3, [pc, #376]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800332e:	495b      	ldr	r1, [pc, #364]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003330:	4313      	orrs	r3, r2
 8003332:	658b      	str	r3, [r1, #88]	; 0x58
 8003334:	e001      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d033      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003350:	d01c      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003352:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003356:	d816      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800335c:	d003      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800335e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003362:	d007      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003364:	e00f      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003366:	4b4d      	ldr	r3, [pc, #308]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	4a4c      	ldr	r2, [pc, #304]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003372:	e00c      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3324      	adds	r3, #36	; 0x24
 8003378:	2101      	movs	r1, #1
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fa92 	bl	80048a4 <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003384:	e003      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
      break;
 800338a:	e000      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800338c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003394:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a2:	493e      	ldr	r1, [pc, #248]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	654b      	str	r3, [r1, #84]	; 0x54
 80033a8:	e001      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d029      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c6:	d007      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80033c8:	e00f      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ca:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	4a33      	ldr	r2, [pc, #204]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033d6:	e00b      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2102      	movs	r1, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 f9ae 	bl	8004740 <RCCEx_PLL2_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80033e8:	e002      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
      break;
 80033ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	4926      	ldr	r1, [pc, #152]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003404:	4313      	orrs	r3, r2
 8003406:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003408:	e001      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3324      	adds	r3, #36	; 0x24
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f001 fa3f 	bl	80048a4 <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d033      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003444:	d017      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344a:	d811      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800344c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003450:	d013      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003456:	d80b      	bhi.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d010      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800345c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003460:	d106      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	4a0d      	ldr	r2, [pc, #52]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800346e:	e007      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]
      break;
 8003474:	e004      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800347e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003492:	4902      	ldr	r1, [pc, #8]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003494:	4313      	orrs	r3, r2
 8003496:	654b      	str	r3, [r1, #84]	; 0x54
 8003498:	e004      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800349a:	bf00      	nop
 800349c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034b0:	4b31      	ldr	r3, [pc, #196]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	492e      	ldr	r1, [pc, #184]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034dc:	4926      	ldr	r1, [pc, #152]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fa:	491f      	ldr	r1, [pc, #124]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	4a19      	ldr	r2, [pc, #100]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003512:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003516:	6113      	str	r3, [r2, #16]
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003522:	4915      	ldr	r1, [pc, #84]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003524:	4313      	orrs	r3, r2
 8003526:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	da08      	bge.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003534:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	490e      	ldr	r1, [pc, #56]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800353e:	4313      	orrs	r3, r2
 8003540:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	4906      	ldr	r1, [pc, #24]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800355e:	4313      	orrs	r3, r2
 8003560:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003562:	7dbb      	ldrb	r3, [r7, #22]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	58024400 	.word	0x58024400

0800357c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b090      	sub	sp, #64	; 0x40
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358a:	f040 8095 	bne.w	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800358e:	4b97      	ldr	r3, [pc, #604]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	2b04      	cmp	r3, #4
 800359c:	f200 8088 	bhi.w	80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80035a0:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	080035bd 	.word	0x080035bd
 80035ac:	080035e5 	.word	0x080035e5
 80035b0:	0800360d 	.word	0x0800360d
 80035b4:	080036a9 	.word	0x080036a9
 80035b8:	08003635 	.word	0x08003635
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80035bc:	4b8b      	ldr	r3, [pc, #556]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035c8:	d108      	bne.n	80035dc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80035ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 ff64 	bl	800449c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80035d8:	f000 bc94 	b.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80035e0:	f000 bc90 	b.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80035e4:	4b81      	ldr	r3, [pc, #516]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f0:	d108      	bne.n	8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80035f2:	f107 0318 	add.w	r3, r7, #24
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fca8 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003600:	f000 bc80 	b.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003608:	f000 bc7c 	b.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800360c:	4b77      	ldr	r3, [pc, #476]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003618:	d108      	bne.n	800362c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800361a:	f107 030c 	add.w	r3, r7, #12
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fde8 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003628:	f000 bc6c 	b.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003630:	f000 bc68 	b.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003634:	4b6d      	ldr	r3, [pc, #436]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800363c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800363e:	4b6b      	ldr	r3, [pc, #428]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b04      	cmp	r3, #4
 8003648:	d10c      	bne.n	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003650:	4b66      	ldr	r3, [pc, #408]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	08db      	lsrs	r3, r3, #3
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	4a65      	ldr	r2, [pc, #404]	; (80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003662:	e01f      	b.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003670:	d106      	bne.n	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003678:	d102      	bne.n	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800367a:	4b5e      	ldr	r3, [pc, #376]	; (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800367c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800367e:	e011      	b.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003680:	4b5a      	ldr	r3, [pc, #360]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800368c:	d106      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003694:	d102      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003696:	4b58      	ldr	r3, [pc, #352]	; (80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8003698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80036a0:	f000 bc30 	b.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80036a4:	f000 bc2e 	b.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80036a8:	4b54      	ldr	r3, [pc, #336]	; (80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036ac:	f000 bc2a 	b.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80036b4:	f000 bc26 	b.w	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036be:	f040 809f 	bne.w	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80036c2:	4b4a      	ldr	r3, [pc, #296]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80036c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d2:	d04d      	beq.n	8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036da:	f200 8084 	bhi.w	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	2bc0      	cmp	r3, #192	; 0xc0
 80036e2:	d07d      	beq.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	2bc0      	cmp	r3, #192	; 0xc0
 80036e8:	d87d      	bhi.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	2b80      	cmp	r3, #128	; 0x80
 80036ee:	d02d      	beq.n	800374c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d877      	bhi.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d012      	beq.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003702:	e070      	b.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003704:	4b39      	ldr	r3, [pc, #228]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003710:	d107      	bne.n	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fec0 	bl	800449c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003720:	e3f0      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003726:	e3ed      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003728:	4b30      	ldr	r3, [pc, #192]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003734:	d107      	bne.n	8003746 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003736:	f107 0318 	add.w	r3, r7, #24
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fc06 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003744:	e3de      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800374a:	e3db      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800374c:	4b27      	ldr	r3, [pc, #156]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003758:	d107      	bne.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800375a:	f107 030c 	add.w	r3, r7, #12
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fd48 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003768:	e3cc      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800376e:	e3c9      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003770:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8003772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003778:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b04      	cmp	r3, #4
 8003784:	d10c      	bne.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	08db      	lsrs	r3, r3, #3
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
 800379c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379e:	e01e      	b.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80037a0:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ac:	d106      	bne.n	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80037ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b4:	d102      	bne.n	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80037b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ba:	e010      	b.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c8:	d106      	bne.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80037ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d0:	d102      	bne.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80037d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d6:	e002      	b.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80037dc:	e392      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80037de:	e391      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80037e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037e4:	e38e      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80037ea:	e38b      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80037ec:	58024400 	.word	0x58024400
 80037f0:	03d09000 	.word	0x03d09000
 80037f4:	003d0900 	.word	0x003d0900
 80037f8:	017d7840 	.word	0x017d7840
 80037fc:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003806:	f040 809c 	bne.w	8003942 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800380a:	4b9d      	ldr	r3, [pc, #628]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8003812:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800381a:	d054      	beq.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003822:	f200 808b 	bhi.w	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800382c:	f000 8083 	beq.w	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003836:	f200 8081 	bhi.w	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003840:	d02f      	beq.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003848:	d878      	bhi.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003856:	d012      	beq.n	800387e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8003858:	e070      	b.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800385a:	4b89      	ldr	r3, [pc, #548]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003866:	d107      	bne.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fe15 	bl	800449c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003876:	e345      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800387c:	e342      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800387e:	4b80      	ldr	r3, [pc, #512]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800388a:	d107      	bne.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800388c:	f107 0318 	add.w	r3, r7, #24
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fb5b 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800389a:	e333      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038a0:	e330      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80038a2:	4b77      	ldr	r3, [pc, #476]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ae:	d107      	bne.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fc9d 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80038be:	e321      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80038c4:	e31e      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80038c6:	4b6e      	ldr	r3, [pc, #440]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80038d0:	4b6b      	ldr	r3, [pc, #428]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d10c      	bne.n	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80038dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038e2:	4b67      	ldr	r3, [pc, #412]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	08db      	lsrs	r3, r3, #3
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	4a65      	ldr	r2, [pc, #404]	; (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80038ee:	fa22 f303 	lsr.w	r3, r2, r3
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f4:	e01e      	b.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80038f6:	4b62      	ldr	r3, [pc, #392]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003902:	d106      	bne.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8003904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800390a:	d102      	bne.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800390c:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800390e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003910:	e010      	b.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003912:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800391e:	d106      	bne.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003926:	d102      	bne.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003928:	4b58      	ldr	r3, [pc, #352]	; (8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392c:	e002      	b.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003932:	e2e7      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003934:	e2e6      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003936:	4b56      	ldr	r3, [pc, #344]	; (8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800393a:	e2e3      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003940:	e2e0      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003948:	f040 80a7 	bne.w	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800394c:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003954:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800395c:	d055      	beq.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003964:	f200 8096 	bhi.w	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800396e:	f000 8084 	beq.w	8003a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003978:	f200 808c 	bhi.w	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003982:	d030      	beq.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800398a:	f200 8083 	bhi.w	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800399a:	d012      	beq.n	80039c2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800399c:	e07a      	b.n	8003a94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800399e:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039aa:	d107      	bne.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fd73 	bl	800449c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80039ba:	e2a3      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039c0:	e2a0      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80039c2:	4b2f      	ldr	r3, [pc, #188]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ce:	d107      	bne.n	80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039d0:	f107 0318 	add.w	r3, r7, #24
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fab9 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80039de:	e291      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80039e4:	e28e      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f2:	d107      	bne.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fbfb 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003a02:	e27f      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a08:	e27c      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	08db      	lsrs	r3, r3, #3
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a38:	e01e      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003a3a:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a46:	d106      	bne.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8003a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a4e:	d102      	bne.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003a50:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a54:	e010      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a62:	d106      	bne.n	8003a72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8003a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6a:	d102      	bne.n	8003a72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8003a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a70:	e002      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003a76:	e245      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003a78:	e244      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a7e:	e241      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003a80:	58024400 	.word	0x58024400
 8003a84:	03d09000 	.word	0x03d09000
 8003a88:	003d0900 	.word	0x003d0900
 8003a8c:	017d7840 	.word	0x017d7840
 8003a90:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003a98:	e234      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa0:	f040 809c 	bne.w	8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8003aa4:	4b9b      	ldr	r3, [pc, #620]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003aac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab4:	d054      	beq.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003abc:	f200 808b 	bhi.w	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ac6:	f000 8083 	beq.w	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ad0:	f200 8081 	bhi.w	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ada:	d02f      	beq.n	8003b3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	d878      	bhi.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d012      	beq.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8003af2:	e070      	b.n	8003bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003af4:	4b87      	ldr	r3, [pc, #540]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b00:	d107      	bne.n	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fcc8 	bl	800449c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b10:	e1f8      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b16:	e1f5      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b18:	4b7e      	ldr	r3, [pc, #504]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b24:	d107      	bne.n	8003b36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b26:	f107 0318 	add.w	r3, r7, #24
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fa0e 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b34:	e1e6      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b3a:	e1e3      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003b3c:	4b75      	ldr	r3, [pc, #468]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d107      	bne.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b4a:	f107 030c 	add.w	r3, r7, #12
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fb50 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003b58:	e1d4      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003b5e:	e1d1      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003b60:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b68:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003b6a:	4b6a      	ldr	r3, [pc, #424]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d109      	bne.n	8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b7c:	4b65      	ldr	r3, [pc, #404]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	4a64      	ldr	r2, [pc, #400]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b8e:	e01e      	b.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003b90:	4b60      	ldr	r3, [pc, #384]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9c:	d106      	bne.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ba4:	d102      	bne.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003baa:	e010      	b.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003bac:	4b59      	ldr	r3, [pc, #356]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bc0:	d102      	bne.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003bc2:	4b57      	ldr	r3, [pc, #348]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc6:	e002      	b.n	8003bce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003bcc:	e19a      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003bce:	e199      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8003bd0:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bd4:	e196      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003bda:	e193      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003be2:	d173      	bne.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8003be4:	4b4b      	ldr	r3, [pc, #300]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bf4:	d02f      	beq.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bfc:	d863      	bhi.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8003c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0a:	d012      	beq.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8003c0c:	e05b      	b.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003c0e:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c1c:	f107 0318 	add.w	r3, r7, #24
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f993 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003c2a:	e16b      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c30:	e168      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003c32:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c3e:	d107      	bne.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c40:	f107 030c 	add.w	r3, r7, #12
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fad5 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003c4e:	e159      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003c54:	e156      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8003c56:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003c60:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8003c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c72:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	08db      	lsrs	r3, r3, #3
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8003c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c84:	e01e      	b.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003c86:	4b23      	ldr	r3, [pc, #140]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8003c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9a:	d102      	bne.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8003c9c:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca0:	e010      	b.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cae:	d106      	bne.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb6:	d102      	bne.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cbc:	e002      	b.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8003cc2:	e11f      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003cc4:	e11e      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003cca:	e11b      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd2:	d13e      	bne.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cea:	d01d      	beq.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8003cec:	e02e      	b.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fbcb 	bl	800449c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003d0a:	e0fb      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d10:	e0f8      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8003d12:	bf00      	nop
 8003d14:	58024400 	.word	0x58024400
 8003d18:	03d09000 	.word	0x03d09000
 8003d1c:	003d0900 	.word	0x003d0900
 8003d20:	017d7840 	.word	0x017d7840
 8003d24:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003d28:	4b79      	ldr	r3, [pc, #484]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d34:	d107      	bne.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d36:	f107 0318 	add.w	r3, r7, #24
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f906 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003d44:	e0de      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d4a:	e0db      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003d50:	e0d8      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d58:	f040 8085 	bne.w	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8003d5c:	4b6c      	ldr	r3, [pc, #432]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6c:	d06b      	beq.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d74:	d874      	bhi.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d056      	beq.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d86c      	bhi.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d8c:	d03b      	beq.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d94:	d864      	bhi.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9c:	d021      	beq.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da4:	d85c      	bhi.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db2:	d004      	beq.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8003db4:	e054      	b.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8003db6:	f000 f8b3 	bl	8003f20 <HAL_RCCEx_GetD3PCLK1Freq>
 8003dba:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8003dbc:	e0a2      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003dbe:	4b54      	ldr	r3, [pc, #336]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dca:	d107      	bne.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003dcc:	f107 0318 	add.w	r3, r7, #24
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f8bb 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003dda:	e093      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003de0:	e090      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003de2:	4b4b      	ldr	r3, [pc, #300]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dee:	d107      	bne.n	8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f9fd 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003dfe:	e081      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e04:	e07e      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e06:	4b42      	ldr	r3, [pc, #264]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d109      	bne.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e12:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	08db      	lsrs	r3, r3, #3
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	4a3d      	ldr	r2, [pc, #244]	; (8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8003e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003e24:	e06e      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e2a:	e06b      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003e2c:	4b38      	ldr	r3, [pc, #224]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e38:	d102      	bne.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8003e3a:	4b37      	ldr	r3, [pc, #220]	; (8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8003e3e:	e061      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e44:	e05e      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e46:	4b32      	ldr	r3, [pc, #200]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e52:	d102      	bne.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8003e54:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003e58:	e054      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e5e:	e051      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003e64:	e04e      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e6c:	d148      	bne.n	8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8003e6e:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7e:	d02a      	beq.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e86:	d838      	bhi.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e94:	d00d      	beq.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8003e96:	e030      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e98:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ea4:	d102      	bne.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003eaa:	e02b      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003eb0:	e028      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003eb2:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ebe:	d107      	bne.n	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fae9 	bl	800449c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003ece:	e019      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ed4:	e016      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ee4:	f107 0318 	add.w	r3, r7, #24
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 f82f 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8003ef2:	e007      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003ef8:	e004      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8003efe:	e001      	b.n	8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8003f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3740      	adds	r7, #64	; 0x40
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	58024400 	.word	0x58024400
 8003f14:	03d09000 	.word	0x03d09000
 8003f18:	003d0900 	.word	0x003d0900
 8003f1c:	017d7840 	.word	0x017d7840

08003f20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f24:	f7fe fb88 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	4904      	ldr	r1, [pc, #16]	; (8003f48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f36:	5ccb      	ldrb	r3, [r1, r3]
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	58024400 	.word	0x58024400
 8003f48:	0800a0a4 	.word	0x0800a0a4

08003f4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	; 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f54:	4ba1      	ldr	r3, [pc, #644]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003f5e:	4b9f      	ldr	r3, [pc, #636]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	0b1b      	lsrs	r3, r3, #12
 8003f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f6a:	4b9c      	ldr	r3, [pc, #624]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003f76:	4b99      	ldr	r3, [pc, #612]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	08db      	lsrs	r3, r3, #3
 8003f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	fb02 f303 	mul.w	r3, r2, r3
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8111 	beq.w	80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	f000 8083 	beq.w	80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	f200 80a1 	bhi.w	80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d056      	beq.n	8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003fb6:	e099      	b.n	80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fb8:	4b88      	ldr	r3, [pc, #544]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02d      	beq.n	8004020 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fc4:	4b85      	ldr	r3, [pc, #532]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	08db      	lsrs	r3, r3, #3
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	4a84      	ldr	r2, [pc, #528]	; (80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b7b      	ldr	r3, [pc, #492]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004002:	eddf 5a78 	vldr	s11, [pc, #480]	; 80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800401e:	e087      	b.n	8004130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800402e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004032:	4b6a      	ldr	r3, [pc, #424]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004042:	ed97 6a03 	vldr	s12, [r7, #12]
 8004046:	eddf 5a67 	vldr	s11, [pc, #412]	; 80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800404a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004062:	e065      	b.n	8004130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004076:	4b59      	ldr	r3, [pc, #356]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004086:	ed97 6a03 	vldr	s12, [r7, #12]
 800408a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800408e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800409a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040a6:	e043      	b.n	8004130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80040b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ba:	4b48      	ldr	r3, [pc, #288]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ea:	e021      	b.n	8004130 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fe:	4b37      	ldr	r3, [pc, #220]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004112:	eddf 5a34 	vldr	s11, [pc, #208]	; 80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800412e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004130:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	0a5b      	lsrs	r3, r3, #9
 8004136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800414a:	edd7 6a07 	vldr	s13, [r7, #28]
 800414e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004156:	ee17 2a90 	vmov	r2, s15
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	0c1b      	lsrs	r3, r3, #16
 8004164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004168:	ee07 3a90 	vmov	s15, r3
 800416c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004174:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004178:	edd7 6a07 	vldr	s13, [r7, #28]
 800417c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004184:	ee17 2a90 	vmov	r2, s15
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800418c:	4b13      	ldr	r3, [pc, #76]	; (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	0e1b      	lsrs	r3, r3, #24
 8004192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80041aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b2:	ee17 2a90 	vmov	r2, s15
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041ba:	e008      	b.n	80041ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
}
 80041ce:	bf00      	nop
 80041d0:	3724      	adds	r7, #36	; 0x24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	58024400 	.word	0x58024400
 80041e0:	03d09000 	.word	0x03d09000
 80041e4:	46000000 	.word	0x46000000
 80041e8:	4c742400 	.word	0x4c742400
 80041ec:	4a742400 	.word	0x4a742400
 80041f0:	4bbebc20 	.word	0x4bbebc20

080041f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041fc:	4ba1      	ldr	r3, [pc, #644]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004206:	4b9f      	ldr	r3, [pc, #636]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	0d1b      	lsrs	r3, r3, #20
 800420c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004210:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004212:	4b9c      	ldr	r3, [pc, #624]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800421e:	4b99      	ldr	r3, [pc, #612]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	08db      	lsrs	r3, r3, #3
 8004224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	fb02 f303 	mul.w	r3, r2, r3
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004236:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8111 	beq.w	8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b02      	cmp	r3, #2
 8004246:	f000 8083 	beq.w	8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b02      	cmp	r3, #2
 800424e:	f200 80a1 	bhi.w	8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d056      	beq.n	800430c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800425e:	e099      	b.n	8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004260:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d02d      	beq.n	80042c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800426c:	4b85      	ldr	r3, [pc, #532]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	08db      	lsrs	r3, r3, #3
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	4a84      	ldr	r2, [pc, #528]	; (8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004296:	4b7b      	ldr	r3, [pc, #492]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800448c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80042c6:	e087      	b.n	80043d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80042d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042da:	4b6a      	ldr	r3, [pc, #424]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800448c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800430a:	e065      	b.n	80043d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004316:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800431a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431e:	4b59      	ldr	r3, [pc, #356]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004332:	eddf 5a56 	vldr	s11, [pc, #344]	; 800448c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800434e:	e043      	b.n	80043d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004498 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800435e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004362:	4b48      	ldr	r3, [pc, #288]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004372:	ed97 6a03 	vldr	s12, [r7, #12]
 8004376:	eddf 5a45 	vldr	s11, [pc, #276]	; 800448c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800437a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004392:	e021      	b.n	80043d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a6:	4b37      	ldr	r3, [pc, #220]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800448c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80043d8:	4b2a      	ldr	r3, [pc, #168]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	0a5b      	lsrs	r3, r3, #9
 80043de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80043f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043fe:	ee17 2a90 	vmov	r2, s15
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004406:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004410:	ee07 3a90 	vmov	s15, r3
 8004414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800441c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004420:	edd7 6a07 	vldr	s13, [r7, #28]
 8004424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442c:	ee17 2a90 	vmov	r2, s15
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004434:	4b13      	ldr	r3, [pc, #76]	; (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	0e1b      	lsrs	r3, r3, #24
 800443a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800444a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800444e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800445a:	ee17 2a90 	vmov	r2, s15
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004462:	e008      	b.n	8004476 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	609a      	str	r2, [r3, #8]
}
 8004476:	bf00      	nop
 8004478:	3724      	adds	r7, #36	; 0x24
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	58024400 	.word	0x58024400
 8004488:	03d09000 	.word	0x03d09000
 800448c:	46000000 	.word	0x46000000
 8004490:	4c742400 	.word	0x4c742400
 8004494:	4a742400 	.word	0x4a742400
 8004498:	4bbebc20 	.word	0x4bbebc20

0800449c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044a4:	4ba0      	ldr	r3, [pc, #640]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80044ae:	4b9e      	ldr	r3, [pc, #632]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80044ba:	4b9b      	ldr	r3, [pc, #620]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80044c4:	4b98      	ldr	r3, [pc, #608]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	08db      	lsrs	r3, r3, #3
 80044ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	fb02 f303 	mul.w	r3, r2, r3
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 8111 	beq.w	800470a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	f000 8083 	beq.w	80045f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	f200 80a1 	bhi.w	800463a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d056      	beq.n	80045b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8004504:	e099      	b.n	800463a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004506:	4b88      	ldr	r3, [pc, #544]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d02d      	beq.n	800456e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004512:	4b85      	ldr	r3, [pc, #532]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	08db      	lsrs	r3, r3, #3
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	4a83      	ldr	r2, [pc, #524]	; (800472c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800451e:	fa22 f303 	lsr.w	r3, r2, r3
 8004522:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453c:	4b7a      	ldr	r3, [pc, #488]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004550:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004568:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800456c:	e087      	b.n	800467e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004578:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004734 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800457c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004580:	4b69      	ldr	r3, [pc, #420]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004590:	ed97 6a03 	vldr	s12, [r7, #12]
 8004594:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004598:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045b0:	e065      	b.n	800467e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004738 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80045c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c4:	4b58      	ldr	r3, [pc, #352]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80045dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045f4:	e043      	b.n	800467e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004600:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800473c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8004604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004608:	4b47      	ldr	r3, [pc, #284]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004618:	ed97 6a03 	vldr	s12, [r7, #12]
 800461c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004628:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004634:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004638:	e021      	b.n	800467e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	ee07 3a90 	vmov	s15, r3
 8004640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004644:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8004734 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464c:	4b36      	ldr	r3, [pc, #216]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004654:	ee07 3a90 	vmov	s15, r3
 8004658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004660:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004730 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004678:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800467c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800467e:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	0a5b      	lsrs	r3, r3, #9
 8004684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004688:	ee07 3a90 	vmov	s15, r3
 800468c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004698:	edd7 6a07 	vldr	s13, [r7, #28]
 800469c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a4:	ee17 2a90 	vmov	r2, s15
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80046ac:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d2:	ee17 2a90 	vmov	r2, s15
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	0e1b      	lsrs	r3, r3, #24
 80046e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e4:	ee07 3a90 	vmov	s15, r3
 80046e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004700:	ee17 2a90 	vmov	r2, s15
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004708:	e008      	b.n	800471c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	609a      	str	r2, [r3, #8]
}
 800471c:	bf00      	nop
 800471e:	3724      	adds	r7, #36	; 0x24
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	58024400 	.word	0x58024400
 800472c:	03d09000 	.word	0x03d09000
 8004730:	46000000 	.word	0x46000000
 8004734:	4c742400 	.word	0x4c742400
 8004738:	4a742400 	.word	0x4a742400
 800473c:	4bbebc20 	.word	0x4bbebc20

08004740 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800474e:	4b53      	ldr	r3, [pc, #332]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b03      	cmp	r3, #3
 8004758:	d101      	bne.n	800475e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e099      	b.n	8004892 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800475e:	4b4f      	ldr	r3, [pc, #316]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a4e      	ldr	r2, [pc, #312]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004764:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476a:	f7fc fce5 	bl	8001138 <HAL_GetTick>
 800476e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004770:	e008      	b.n	8004784 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004772:	f7fc fce1 	bl	8001138 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e086      	b.n	8004892 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004784:	4b45      	ldr	r3, [pc, #276]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f0      	bne.n	8004772 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004790:	4b42      	ldr	r3, [pc, #264]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	031b      	lsls	r3, r3, #12
 800479e:	493f      	ldr	r1, [pc, #252]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	628b      	str	r3, [r1, #40]	; 0x28
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	025b      	lsls	r3, r3, #9
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	3b01      	subs	r3, #1
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	061b      	lsls	r3, r3, #24
 80047d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047d4:	4931      	ldr	r1, [pc, #196]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047da:	4b30      	ldr	r3, [pc, #192]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	492d      	ldr	r1, [pc, #180]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047ec:	4b2b      	ldr	r3, [pc, #172]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	f023 0220 	bic.w	r2, r3, #32
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	4928      	ldr	r1, [pc, #160]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047fe:	4b27      	ldr	r3, [pc, #156]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	4a26      	ldr	r2, [pc, #152]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800480a:	4b24      	ldr	r3, [pc, #144]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 800480c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <RCCEx_PLL2_Config+0x160>)
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	69d2      	ldr	r2, [r2, #28]
 8004816:	00d2      	lsls	r2, r2, #3
 8004818:	4920      	ldr	r1, [pc, #128]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800481e:	4b1f      	ldr	r3, [pc, #124]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	4a1e      	ldr	r2, [pc, #120]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004824:	f043 0310 	orr.w	r3, r3, #16
 8004828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800483a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800483c:	e00f      	b.n	800485e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d106      	bne.n	8004852 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004844:	4b15      	ldr	r3, [pc, #84]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	4a14      	ldr	r2, [pc, #80]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 800484a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800484e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004850:	e005      	b.n	800485e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004852:	4b12      	ldr	r3, [pc, #72]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	4a11      	ldr	r2, [pc, #68]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800485c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800485e:	4b0f      	ldr	r3, [pc, #60]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a0e      	ldr	r2, [pc, #56]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004864:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486a:	f7fc fc65 	bl	8001138 <HAL_GetTick>
 800486e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004870:	e008      	b.n	8004884 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004872:	f7fc fc61 	bl	8001138 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e006      	b.n	8004892 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <RCCEx_PLL2_Config+0x15c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	58024400 	.word	0x58024400
 80048a0:	ffff0007 	.word	0xffff0007

080048a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048b2:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d101      	bne.n	80048c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e099      	b.n	80049f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048c2:	4b4f      	ldr	r3, [pc, #316]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a4e      	ldr	r2, [pc, #312]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80048c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ce:	f7fc fc33 	bl	8001138 <HAL_GetTick>
 80048d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048d6:	f7fc fc2f 	bl	8001138 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e086      	b.n	80049f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048e8:	4b45      	ldr	r3, [pc, #276]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f0      	bne.n	80048d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048f4:	4b42      	ldr	r3, [pc, #264]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	051b      	lsls	r3, r3, #20
 8004902:	493f      	ldr	r1, [pc, #252]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	628b      	str	r3, [r1, #40]	; 0x28
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	3b01      	subs	r3, #1
 800490e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	3b01      	subs	r3, #1
 8004918:	025b      	lsls	r3, r3, #9
 800491a:	b29b      	uxth	r3, r3
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	3b01      	subs	r3, #1
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	3b01      	subs	r3, #1
 8004932:	061b      	lsls	r3, r3, #24
 8004934:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004938:	4931      	ldr	r1, [pc, #196]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 800493a:	4313      	orrs	r3, r2
 800493c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800493e:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	492d      	ldr	r1, [pc, #180]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 800494c:	4313      	orrs	r3, r2
 800494e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	4928      	ldr	r1, [pc, #160]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004962:	4b27      	ldr	r3, [pc, #156]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	4a26      	ldr	r2, [pc, #152]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800496c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004972:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <RCCEx_PLL3_Config+0x160>)
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	69d2      	ldr	r2, [r2, #28]
 800497a:	00d2      	lsls	r2, r2, #3
 800497c:	4920      	ldr	r1, [pc, #128]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 800497e:	4313      	orrs	r3, r2
 8004980:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004982:	4b1f      	ldr	r3, [pc, #124]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	4a1e      	ldr	r2, [pc, #120]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 800499a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800499e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049a0:	e00f      	b.n	80049c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d106      	bne.n	80049b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049a8:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049b4:	e005      	b.n	80049c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049c2:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a0e      	ldr	r2, [pc, #56]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ce:	f7fc fbb3 	bl	8001138 <HAL_GetTick>
 80049d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049d4:	e008      	b.n	80049e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049d6:	f7fc fbaf 	bl	8001138 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d901      	bls.n	80049e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e006      	b.n	80049f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <RCCEx_PLL3_Config+0x15c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f0      	beq.n	80049d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	58024400 	.word	0x58024400
 8004a04:	ffff0007 	.word	0xffff0007

08004a08 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e075      	b.n	8004b06 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d105      	bne.n	8004a32 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fc f88b 	bl	8000b48 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2204      	movs	r2, #4
 8004a36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f868 	bl	8004b10 <HAL_SD_InitCard>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e05d      	b.n	8004b06 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8004a4a:	f107 0308 	add.w	r3, r7, #8
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fdaf 	bl	80055b4 <HAL_SD_GetCardStatus>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e052      	b.n	8004b06 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8004a60:	7e3b      	ldrb	r3, [r7, #24]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004a66:	7e7b      	ldrb	r3, [r7, #25]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d10a      	bne.n	8004a8a <HAL_SD_Init+0x82>
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <HAL_SD_Init+0x78>
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d004      	beq.n	8004a8a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a86:	659a      	str	r2, [r3, #88]	; 0x58
 8004a88:	e00b      	b.n	8004aa2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d104      	bne.n	8004a9c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a98:	659a      	str	r2, [r3, #88]	; 0x58
 8004a9a:	e002      	b.n	8004aa2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fe6d 	bl	8005788 <HAL_SD_ConfigWideBusOperation>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e026      	b.n	8004b06 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004ab8:	f7fc fb3e 	bl	8001138 <HAL_GetTick>
 8004abc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004abe:	e011      	b.n	8004ae4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004ac0:	f7fc fb3a 	bl	8001138 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d109      	bne.n	8004ae4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ad6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e010      	b.n	8004b06 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 ff61 	bl	80059ac <HAL_SD_GetCardState>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d1e7      	bne.n	8004ac0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3728      	adds	r7, #40	; 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b08d      	sub	sp, #52	; 0x34
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004b2c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004b30:	f7fe fd24 	bl	800357c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b34:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b4a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e06a      	b.n	8004c26 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	4a36      	ldr	r2, [pc, #216]	; (8004c30 <HAL_SD_InitCard+0x120>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681c      	ldr	r4, [r3, #0]
 8004b62:	466a      	mov	r2, sp
 8004b64:	f107 0318 	add.w	r3, r7, #24
 8004b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004b70:	f107 030c 	add.w	r3, r7, #12
 8004b74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b76:	4620      	mov	r0, r4
 8004b78:	f002 fbf8 	bl	800736c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f002 fc3b 	bl	80073fc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004b92:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <HAL_SD_InitCard+0x124>)
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fc fad7 	bl	8001150 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fff0 	bl	8005b88 <SD_PowerON>
 8004ba8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e02e      	b.n	8004c26 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 ff0f 	bl	80059ec <SD_InitCard>
 8004bce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e01b      	b.n	8004c26 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f002 fc96 	bl	8007528 <SDMMC_CmdBlockLength>
 8004bfc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00f      	beq.n	8004c24 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a0b      	ldr	r2, [pc, #44]	; (8004c38 <HAL_SD_InitCard+0x128>)
 8004c0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	372c      	adds	r7, #44	; 0x2c
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd90      	pop	{r4, r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	014f8b59 	.word	0x014f8b59
 8004c34:	00012110 	.word	0x00012110
 8004c38:	1fe00fff 	.word	0x1fe00fff

08004c3c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b092      	sub	sp, #72	; 0x48
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c4a:	f7fc fa75 	bl	8001138 <HAL_GetTick>
 8004c4e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d107      	bne.n	8004c6e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e167      	b.n	8004f3e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	f040 815a 	bne.w	8004f30 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	441a      	add	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d907      	bls.n	8004ca0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e14e      	b.n	8004f3e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2200      	movs	r2, #0
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d002      	beq.n	8004cbe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	025b      	lsls	r3, r3, #9
 8004cbc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	025b      	lsls	r3, r3, #9
 8004cc8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004cca:	2390      	movs	r3, #144	; 0x90
 8004ccc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f107 0214 	add.w	r2, r7, #20
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f002 fbf3 	bl	80074d0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d90a      	bls.n	8004d16 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2202      	movs	r2, #2
 8004d04:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f002 fc51 	bl	80075b4 <SDMMC_CmdReadMultiBlock>
 8004d12:	6478      	str	r0, [r7, #68]	; 0x44
 8004d14:	e009      	b.n	8004d2a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d22:	4618      	mov	r0, r3
 8004d24:	f002 fc23 	bl	800756e <SDMMC_CmdReadSingleBlock>
 8004d28:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8004d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d012      	beq.n	8004d56 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a84      	ldr	r2, [pc, #528]	; (8004f48 <HAL_SD_ReadBlocks+0x30c>)
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e0f3      	b.n	8004f3e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004d5a:	e058      	b.n	8004e0e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d033      	beq.n	8004dd2 <HAL_SD_ReadBlocks+0x196>
 8004d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6c:	2b1f      	cmp	r3, #31
 8004d6e:	d930      	bls.n	8004dd2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8004d70:	2300      	movs	r3, #0
 8004d72:	643b      	str	r3, [r7, #64]	; 0x40
 8004d74:	e027      	b.n	8004dc6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f002 fb20 	bl	80073c0 <SDMMC_ReadFIFO>
 8004d80:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dac:	3301      	adds	r3, #1
 8004dae:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	0e1b      	lsrs	r3, r3, #24
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8004dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8004dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc8:	2b07      	cmp	r3, #7
 8004dca:	d9d4      	bls.n	8004d76 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8004dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dce:	3b20      	subs	r3, #32
 8004dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8004dd2:	f7fc f9b1 	bl	8001138 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d902      	bls.n	8004de8 <HAL_SD_ReadBlocks+0x1ac>
 8004de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d112      	bne.n	8004e0e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a56      	ldr	r2, [pc, #344]	; (8004f48 <HAL_SD_ReadBlocks+0x30c>)
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e097      	b.n	8004f3e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d09f      	beq.n	8004d5c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e2a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d022      	beq.n	8004e80 <HAL_SD_ReadBlocks+0x244>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d91f      	bls.n	8004e80 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d01b      	beq.n	8004e80 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f002 fc1b 	bl	8007688 <SDMMC_CmdStopTransfer>
 8004e52:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8004e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d012      	beq.n	8004e80 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a3a      	ldr	r2, [pc, #232]	; (8004f48 <HAL_SD_ReadBlocks+0x30c>)
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e05e      	b.n	8004f3e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d012      	beq.n	8004eb4 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2d      	ldr	r2, [pc, #180]	; (8004f48 <HAL_SD_ReadBlocks+0x30c>)
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	f043 0208 	orr.w	r2, r3, #8
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e044      	b.n	8004f3e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d012      	beq.n	8004ee8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a20      	ldr	r2, [pc, #128]	; (8004f48 <HAL_SD_ReadBlocks+0x30c>)
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	f043 0202 	orr.w	r2, r3, #2
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e02a      	b.n	8004f3e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d012      	beq.n	8004f1c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <HAL_SD_ReadBlocks+0x30c>)
 8004efc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	f043 0220 	orr.w	r2, r3, #32
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e010      	b.n	8004f3e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <HAL_SD_ReadBlocks+0x310>)
 8004f22:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e006      	b.n	8004f3e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3748      	adds	r7, #72	; 0x48
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	1fe00fff 	.word	0x1fe00fff
 8004f4c:	18000f3a 	.word	0x18000f3a

08004f50 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b092      	sub	sp, #72	; 0x48
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004f5e:	f7fc f8eb 	bl	8001138 <HAL_GetTick>
 8004f62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d107      	bne.n	8004f82 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e16b      	b.n	800525a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	f040 815e 	bne.w	800524c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	441a      	add	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d907      	bls.n	8004fb4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e152      	b.n	800525a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d002      	beq.n	8004fd2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fce:	025b      	lsls	r3, r3, #9
 8004fd0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	025b      	lsls	r3, r3, #9
 8004fdc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004fde:	2390      	movs	r3, #144	; 0x90
 8004fe0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f107 0218 	add.w	r2, r7, #24
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f002 fa69 	bl	80074d0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800500c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d90a      	bls.n	800502a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005020:	4618      	mov	r0, r3
 8005022:	f002 fb0d 	bl	8007640 <SDMMC_CmdWriteMultiBlock>
 8005026:	6478      	str	r0, [r7, #68]	; 0x44
 8005028:	e009      	b.n	800503e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2210      	movs	r2, #16
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005036:	4618      	mov	r0, r3
 8005038:	f002 fadf 	bl	80075fa <SDMMC_CmdWriteSingleBlock>
 800503c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800503e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005040:	2b00      	cmp	r3, #0
 8005042:	d012      	beq.n	800506a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a86      	ldr	r2, [pc, #536]	; (8005264 <HAL_SD_WriteBlocks+0x314>)
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005052:	431a      	orrs	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0f7      	b.n	800525a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800506e:	e05c      	b.n	800512a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d037      	beq.n	80050ee <HAL_SD_WriteBlocks+0x19e>
 800507e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005080:	2b1f      	cmp	r3, #31
 8005082:	d934      	bls.n	80050ee <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8005084:	2300      	movs	r3, #0
 8005086:	643b      	str	r3, [r7, #64]	; 0x40
 8005088:	e02b      	b.n	80050e2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005092:	3301      	adds	r3, #1
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	021a      	lsls	r2, r3, #8
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	3301      	adds	r3, #1
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	041a      	lsls	r2, r3, #16
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80050b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b6:	3301      	adds	r3, #1
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	061a      	lsls	r2, r3, #24
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80050c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c8:	3301      	adds	r3, #1
 80050ca:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f107 0214 	add.w	r2, r7, #20
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f002 f97f 	bl	80073da <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80050dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050de:	3301      	adds	r3, #1
 80050e0:	643b      	str	r3, [r7, #64]	; 0x40
 80050e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e4:	2b07      	cmp	r3, #7
 80050e6:	d9d0      	bls.n	800508a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80050e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ea:	3b20      	subs	r3, #32
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80050ee:	f7fc f823 	bl	8001138 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d902      	bls.n	8005104 <HAL_SD_WriteBlocks+0x1b4>
 80050fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005100:	2b00      	cmp	r3, #0
 8005102:	d112      	bne.n	800512a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a56      	ldr	r2, [pc, #344]	; (8005264 <HAL_SD_WriteBlocks+0x314>)
 800510a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005112:	431a      	orrs	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e097      	b.n	800525a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005130:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005134:	2b00      	cmp	r3, #0
 8005136:	d09b      	beq.n	8005070 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005146:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d022      	beq.n	800519c <HAL_SD_WriteBlocks+0x24c>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d91f      	bls.n	800519c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	2b03      	cmp	r3, #3
 8005162:	d01b      	beq.n	800519c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f002 fa8d 	bl	8007688 <SDMMC_CmdStopTransfer>
 800516e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005172:	2b00      	cmp	r3, #0
 8005174:	d012      	beq.n	800519c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a3a      	ldr	r2, [pc, #232]	; (8005264 <HAL_SD_WriteBlocks+0x314>)
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005184:	431a      	orrs	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e05e      	b.n	800525a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d012      	beq.n	80051d0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2d      	ldr	r2, [pc, #180]	; (8005264 <HAL_SD_WriteBlocks+0x314>)
 80051b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	f043 0208 	orr.w	r2, r3, #8
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e044      	b.n	800525a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d012      	beq.n	8005204 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a20      	ldr	r2, [pc, #128]	; (8005264 <HAL_SD_WriteBlocks+0x314>)
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ea:	f043 0202 	orr.w	r2, r3, #2
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e02a      	b.n	800525a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b00      	cmp	r3, #0
 8005210:	d012      	beq.n	8005238 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a13      	ldr	r2, [pc, #76]	; (8005264 <HAL_SD_WriteBlocks+0x314>)
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521e:	f043 0210 	orr.w	r2, r3, #16
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e010      	b.n	800525a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a0a      	ldr	r2, [pc, #40]	; (8005268 <HAL_SD_WriteBlocks+0x318>)
 800523e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e006      	b.n	800525a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005250:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3748      	adds	r7, #72	; 0x48
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	1fe00fff 	.word	0x1fe00fff
 8005268:	18000f3a 	.word	0x18000f3a

0800526c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527a:	0f9b      	lsrs	r3, r3, #30
 800527c:	b2da      	uxtb	r2, r3
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005286:	0e9b      	lsrs	r3, r3, #26
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	b2da      	uxtb	r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005298:	0e1b      	lsrs	r3, r3, #24
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052cc:	0d1b      	lsrs	r3, r3, #20
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ea:	0bdb      	lsrs	r3, r3, #15
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fc:	0b9b      	lsrs	r3, r3, #14
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	b2da      	uxtb	r2, r3
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530e:	0b5b      	lsrs	r3, r3, #13
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	b2da      	uxtb	r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005320:	0b1b      	lsrs	r3, r3, #12
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	b2da      	uxtb	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2200      	movs	r2, #0
 8005332:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	2b00      	cmp	r3, #0
 800533a:	d163      	bne.n	8005404 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005340:	009a      	lsls	r2, r3, #2
 8005342:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005346:	4013      	ands	r3, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800534c:	0f92      	lsrs	r2, r2, #30
 800534e:	431a      	orrs	r2, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005358:	0edb      	lsrs	r3, r3, #27
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	b2da      	uxtb	r2, r3
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536a:	0e1b      	lsrs	r3, r3, #24
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	b2da      	uxtb	r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800537c:	0d5b      	lsrs	r3, r3, #21
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	b2da      	uxtb	r2, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538e:	0c9b      	lsrs	r3, r3, #18
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	b2da      	uxtb	r2, r3
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053a0:	0bdb      	lsrs	r3, r3, #15
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	7e1b      	ldrb	r3, [r3, #24]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	3302      	adds	r3, #2
 80053c4:	2201      	movs	r2, #1
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053ce:	fb03 f202 	mul.w	r2, r3, r2
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	7a1b      	ldrb	r3, [r3, #8]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	2201      	movs	r2, #1
 80053e2:	409a      	lsls	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80053f0:	0a52      	lsrs	r2, r2, #9
 80053f2:	fb03 f202 	mul.w	r2, r3, r2
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005400:	655a      	str	r2, [r3, #84]	; 0x54
 8005402:	e031      	b.n	8005468 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	2b01      	cmp	r3, #1
 800540a:	d11d      	bne.n	8005448 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800541a:	0c1b      	lsrs	r3, r3, #16
 800541c:	431a      	orrs	r2, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	3301      	adds	r3, #1
 8005428:	029a      	lsls	r2, r3, #10
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800543c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
 8005446:	e00f      	b.n	8005468 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a58      	ldr	r2, [pc, #352]	; (80055b0 <HAL_SD_GetCardCSD+0x344>)
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005454:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e09d      	b.n	80055a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800546c:	0b9b      	lsrs	r3, r3, #14
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	b2da      	uxtb	r2, r3
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800547e:	09db      	lsrs	r3, r3, #7
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005486:	b2da      	uxtb	r2, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005496:	b2da      	uxtb	r2, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a0:	0fdb      	lsrs	r3, r3, #31
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054ac:	0f5b      	lsrs	r3, r3, #29
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054be:	0e9b      	lsrs	r3, r3, #26
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054d0:	0d9b      	lsrs	r3, r3, #22
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e2:	0d5b      	lsrs	r3, r3, #21
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054fe:	0c1b      	lsrs	r3, r3, #16
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	b2da      	uxtb	r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005512:	0bdb      	lsrs	r3, r3, #15
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	b2da      	uxtb	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005526:	0b9b      	lsrs	r3, r3, #14
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	b2da      	uxtb	r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800553a:	0b5b      	lsrs	r3, r3, #13
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	b2da      	uxtb	r2, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800554e:	0b1b      	lsrs	r3, r3, #12
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	b2da      	uxtb	r2, r3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005562:	0a9b      	lsrs	r3, r3, #10
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	b2da      	uxtb	r2, r3
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	b2da      	uxtb	r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005592:	b2da      	uxtb	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	1fe00fff 	.word	0x1fe00fff

080055b4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b094      	sub	sp, #80	; 0x50
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d101      	bne.n	80055d4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0a7      	b.n	8005724 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80055d4:	f107 0308 	add.w	r3, r7, #8
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fb62 	bl	8005ca4 <SD_SendSDStatus>
 80055e0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80055e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d011      	beq.n	800560c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a4f      	ldr	r2, [pc, #316]	; (800572c <HAL_SD_GetCardStatus+0x178>)
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800560a:	e070      	b.n	80056ee <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	099b      	lsrs	r3, r3, #6
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	b2da      	uxtb	r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	0a1b      	lsrs	r3, r3, #8
 8005630:	b29b      	uxth	r3, r3
 8005632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005636:	b29a      	uxth	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	0e1b      	lsrs	r3, r3, #24
 800563c:	b29b      	uxth	r3, r3
 800563e:	4313      	orrs	r3, r2
 8005640:	b29a      	uxth	r2, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	061a      	lsls	r2, r3, #24
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005652:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800565c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	0e1b      	lsrs	r3, r3, #24
 8005662:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	0a1b      	lsrs	r3, r3, #8
 8005674:	b2da      	uxtb	r2, r3
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	0d1b      	lsrs	r3, r3, #20
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	b2da      	uxtb	r2, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	b29b      	uxth	r3, r3
 8005690:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005694:	b29a      	uxth	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	b29b      	uxth	r3, r3
 800569a:	b2db      	uxtb	r3, r3
 800569c:	b29b      	uxth	r3, r3
 800569e:	4313      	orrs	r3, r2
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	0a9b      	lsrs	r3, r3, #10
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	0a1b      	lsrs	r3, r3, #8
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	0e1b      	lsrs	r3, r3, #24
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056f6:	4618      	mov	r0, r3
 80056f8:	f001 ff16 	bl	8007528 <SDMMC_CmdBlockLength>
 80056fc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80056fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00d      	beq.n	8005720 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a08      	ldr	r2, [pc, #32]	; (800572c <HAL_SD_GetCardStatus+0x178>)
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005710:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8005720:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005724:	4618      	mov	r0, r3
 8005726:	3750      	adds	r7, #80	; 0x50
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	1fe00fff 	.word	0x1fe00fff

08005730 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b08d      	sub	sp, #52	; 0x34
 800578c:	af02      	add	r7, sp, #8
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2203      	movs	r2, #3
 80057a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d02e      	beq.n	800580a <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b2:	d106      	bne.n	80057c2 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	635a      	str	r2, [r3, #52]	; 0x34
 80057c0:	e029      	b.n	8005816 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057c8:	d10a      	bne.n	80057e0 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fb62 	bl	8005e94 <SD_WideBus_Enable>
 80057d0:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	635a      	str	r2, [r3, #52]	; 0x34
 80057de:	e01a      	b.n	8005816 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fb9f 	bl	8005f2a <SD_WideBus_Disable>
 80057ec:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	635a      	str	r2, [r3, #52]	; 0x34
 80057fa:	e00c      	b.n	8005816 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005800:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	635a      	str	r2, [r3, #52]	; 0x34
 8005808:	e005      	b.n	8005816 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a5e      	ldr	r2, [pc, #376]	; (800599c <HAL_SD_ConfigWideBusOperation+0x214>)
 8005824:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800582c:	e094      	b.n	8005958 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800582e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005832:	f7fd fea3 	bl	800357c <HAL_RCCEx_GetPeriphCLKFreq>
 8005836:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8083 	beq.w	8005946 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	4950      	ldr	r1, [pc, #320]	; (80059a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800585e:	fba1 1303 	umull	r1, r3, r1, r3
 8005862:	0e1b      	lsrs	r3, r3, #24
 8005864:	429a      	cmp	r2, r3
 8005866:	d303      	bcc.n	8005870 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	e05a      	b.n	8005926 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005878:	d103      	bne.n	8005882 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	e051      	b.n	8005926 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588a:	d126      	bne.n	80058da <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10e      	bne.n	80058b2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	4a43      	ldr	r2, [pc, #268]	; (80059a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d906      	bls.n	80058aa <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	4a40      	ldr	r2, [pc, #256]	; (80059a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80058a0:	fba2 2303 	umull	r2, r3, r2, r3
 80058a4:	0e5b      	lsrs	r3, r3, #25
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	e03d      	b.n	8005926 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	61bb      	str	r3, [r7, #24]
 80058b0:	e039      	b.n	8005926 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	6a3a      	ldr	r2, [r7, #32]
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	4a39      	ldr	r2, [pc, #228]	; (80059a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d906      	bls.n	80058d2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	4a36      	ldr	r2, [pc, #216]	; (80059a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	0e5b      	lsrs	r3, r3, #25
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e029      	b.n	8005926 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e025      	b.n	8005926 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10e      	bne.n	8005900 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	4a30      	ldr	r2, [pc, #192]	; (80059a8 <HAL_SD_ConfigWideBusOperation+0x220>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d906      	bls.n	80058f8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	4a2c      	ldr	r2, [pc, #176]	; (80059a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	0e1b      	lsrs	r3, r3, #24
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	e016      	b.n	8005926 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	e012      	b.n	8005926 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	6a3a      	ldr	r2, [r7, #32]
 8005908:	fbb2 f3f3 	udiv	r3, r2, r3
 800590c:	4a26      	ldr	r2, [pc, #152]	; (80059a8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d906      	bls.n	8005920 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	0e1b      	lsrs	r3, r3, #24
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	e002      	b.n	8005926 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681c      	ldr	r4, [r3, #0]
 800592a:	466a      	mov	r2, sp
 800592c:	f107 0314 	add.w	r3, r7, #20
 8005930:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005934:	e882 0003 	stmia.w	r2, {r0, r1}
 8005938:	f107 0308 	add.w	r3, r7, #8
 800593c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800593e:	4620      	mov	r0, r4
 8005940:	f001 fd14 	bl	800736c <SDMMC_Init>
 8005944:	e008      	b.n	8005958 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005960:	4618      	mov	r0, r3
 8005962:	f001 fde1 	bl	8007528 <SDMMC_CmdBlockLength>
 8005966:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00c      	beq.n	8005988 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a0a      	ldr	r2, [pc, #40]	; (800599c <HAL_SD_ConfigWideBusOperation+0x214>)
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005994:	4618      	mov	r0, r3
 8005996:	372c      	adds	r7, #44	; 0x2c
 8005998:	46bd      	mov	sp, r7
 800599a:	bd90      	pop	{r4, r7, pc}
 800599c:	1fe00fff 	.word	0x1fe00fff
 80059a0:	55e63b89 	.word	0x55e63b89
 80059a4:	02faf080 	.word	0x02faf080
 80059a8:	017d7840 	.word	0x017d7840

080059ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80059b8:	f107 030c 	add.w	r3, r7, #12
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fa40 	bl	8005e44 <SD_SendStatus>
 80059c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	0a5b      	lsrs	r3, r3, #9
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80059e2:	693b      	ldr	r3, [r7, #16]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b090      	sub	sp, #64	; 0x40
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80059f8:	f7fb fb9e 	bl	8001138 <HAL_GetTick>
 80059fc:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 fd0b 	bl	800741e <SDMMC_GetPowerState>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005a12:	e0b5      	b.n	8005b80 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d02e      	beq.n	8005a7a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 ff56 	bl	80078d2 <SDMMC_CmdSendCID>
 8005a26:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8005a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <SD_InitCard+0x46>
    {
      return errorstate;
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	e0a6      	b.n	8005b80 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 fd36 	bl	80074aa <SDMMC_GetResponse>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2104      	movs	r1, #4
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 fd2d 	bl	80074aa <SDMMC_GetResponse>
 8005a50:	4602      	mov	r2, r0
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2108      	movs	r1, #8
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 fd24 	bl	80074aa <SDMMC_GetResponse>
 8005a62:	4602      	mov	r2, r0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	210c      	movs	r1, #12
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 fd1b 	bl	80074aa <SDMMC_GetResponse>
 8005a74:	4602      	mov	r2, r0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d01d      	beq.n	8005abe <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8005a82:	e019      	b.n	8005ab8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f107 020a 	add.w	r2, r7, #10
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 ff5e 	bl	8007950 <SDMMC_CmdSetRelAdd>
 8005a94:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9e:	e06f      	b.n	8005b80 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8005aa0:	f7fb fb4a 	bl	8001138 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f241 3287 	movw	r2, #4999	; 0x1387
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d902      	bls.n	8005ab8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8005ab2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ab6:	e063      	b.n	8005b80 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8005ab8:	897b      	ldrh	r3, [r7, #10]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0e2      	beq.n	8005a84 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d036      	beq.n	8005b34 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005ac6:	897b      	ldrh	r3, [r7, #10]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	041b      	lsls	r3, r3, #16
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f001 ff18 	bl	8007910 <SDMMC_CmdSendCSD>
 8005ae0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <SD_InitCard+0x100>
    {
      return errorstate;
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aea:	e049      	b.n	8005b80 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 fcd9 	bl	80074aa <SDMMC_GetResponse>
 8005af8:	4602      	mov	r2, r0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2104      	movs	r1, #4
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 fcd0 	bl	80074aa <SDMMC_GetResponse>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2108      	movs	r1, #8
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 fcc7 	bl	80074aa <SDMMC_GetResponse>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	210c      	movs	r1, #12
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f001 fcbe 	bl	80074aa <SDMMC_GetResponse>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2104      	movs	r1, #4
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 fcb5 	bl	80074aa <SDMMC_GetResponse>
 8005b40:	4603      	mov	r3, r0
 8005b42:	0d1a      	lsrs	r2, r3, #20
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005b48:	f107 030c 	add.w	r3, r7, #12
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff fb8c 	bl	800526c <HAL_SD_GetCardCSD>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b5e:	e00f      	b.n	8005b80 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b68:	041b      	lsls	r3, r3, #16
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f001 fdc7 	bl	8007700 <SDMMC_CmdSelDesel>
 8005b72:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <SD_InitCard+0x192>
  {
    return errorstate;
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	e000      	b.n	8005b80 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3740      	adds	r7, #64	; 0x40
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 fdd0 	bl	8007746 <SDMMC_CmdGoIdleState>
 8005ba6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	e072      	b.n	8005c98 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f001 fde3 	bl	8007782 <SDMMC_CmdOperCond>
 8005bbc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bc4:	d10d      	bne.n	8005be2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 fdb8 	bl	8007746 <SDMMC_CmdGoIdleState>
 8005bd6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <SD_PowerON+0x60>
    {
      return errorstate;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	e05a      	b.n	8005c98 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d137      	bne.n	8005c60 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 fde3 	bl	80077c2 <SDMMC_CmdAppCommand>
 8005bfc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02d      	beq.n	8005c60 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005c08:	e046      	b.n	8005c98 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2100      	movs	r1, #0
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 fdd6 	bl	80077c2 <SDMMC_CmdAppCommand>
 8005c16:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <SD_PowerON+0x9a>
    {
      return errorstate;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	e03a      	b.n	8005c98 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	491e      	ldr	r1, [pc, #120]	; (8005ca0 <SD_PowerON+0x118>)
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 fded 	bl	8007808 <SDMMC_CmdAppOperCommand>
 8005c2e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005c3a:	e02d      	b.n	8005c98 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f001 fc31 	bl	80074aa <SDMMC_GetResponse>
 8005c48:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	0fdb      	lsrs	r3, r3, #31
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <SD_PowerON+0xce>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <SD_PowerON+0xd0>
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]

    count++;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d802      	bhi.n	8005c70 <SD_PowerON+0xe8>
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0cc      	beq.n	8005c0a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d902      	bls.n	8005c80 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c7e:	e00b      	b.n	8005c98 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	c1100000 	.word	0xc1100000

08005ca4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08c      	sub	sp, #48	; 0x30
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005cae:	f7fb fa43 	bl	8001138 <HAL_GetTick>
 8005cb2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 fbf3 	bl	80074aa <SDMMC_GetResponse>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cce:	d102      	bne.n	8005cd6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cd4:	e0b0      	b.n	8005e38 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2140      	movs	r1, #64	; 0x40
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f001 fc23 	bl	8007528 <SDMMC_CmdBlockLength>
 8005ce2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	e0a0      	b.n	8005e38 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfe:	041b      	lsls	r3, r3, #16
 8005d00:	4619      	mov	r1, r3
 8005d02:	4610      	mov	r0, r2
 8005d04:	f001 fd5d 	bl	80077c2 <SDMMC_CmdAppCommand>
 8005d08:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	e08d      	b.n	8005e38 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d20:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005d22:	2340      	movs	r3, #64	; 0x40
 8005d24:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005d26:	2360      	movs	r3, #96	; 0x60
 8005d28:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005d32:	2301      	movs	r3, #1
 8005d34:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f107 0208 	add.w	r2, r7, #8
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 fbc5 	bl	80074d0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 fe45 	bl	80079da <SDMMC_CmdStatusRegister>
 8005d50:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d02b      	beq.n	8005db0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	e069      	b.n	8005e38 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d013      	beq.n	8005d9a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d76:	e00d      	b.n	8005d94 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fb1f 	bl	80073c0 <SDMMC_ReadFIFO>
 8005d82:	4602      	mov	r2, r0
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	601a      	str	r2, [r3, #0]
        pData++;
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	3301      	adds	r3, #1
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	2b07      	cmp	r3, #7
 8005d98:	d9ee      	bls.n	8005d78 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005d9a:	f7fb f9cd 	bl	8001138 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d102      	bne.n	8005db0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005daa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dae:	e043      	b.n	8005e38 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0d2      	beq.n	8005d64 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005dcc:	2308      	movs	r3, #8
 8005dce:	e033      	b.n	8005e38 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005dde:	2302      	movs	r3, #2
 8005de0:	e02a      	b.n	8005e38 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d017      	beq.n	8005e20 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005df0:	2320      	movs	r3, #32
 8005df2:	e021      	b.n	8005e38 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fae1 	bl	80073c0 <SDMMC_ReadFIFO>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	601a      	str	r2, [r3, #0]
    pData++;
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	3304      	adds	r3, #4
 8005e08:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e0a:	f7fb f995 	bl	8001138 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d102      	bne.n	8005e20 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005e1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e1e:	e00b      	b.n	8005e38 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e2      	bne.n	8005df4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a03      	ldr	r2, [pc, #12]	; (8005e40 <SD_SendSDStatus+0x19c>)
 8005e34:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3730      	adds	r7, #48	; 0x30
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	18000f3a 	.word	0x18000f3a

08005e44 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d102      	bne.n	8005e5a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005e54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e58:	e018      	b.n	8005e8c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f001 fd94 	bl	8007994 <SDMMC_CmdSendStatus>
 8005e6c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	e009      	b.n	8005e8c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 fb13 	bl	80074aa <SDMMC_GetResponse>
 8005e84:	4602      	mov	r2, r0
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 fafd 	bl	80074aa <SDMMC_GetResponse>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eba:	d102      	bne.n	8005ec2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ec0:	e02f      	b.n	8005f22 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005ec2:	f107 030c 	add.w	r3, r7, #12
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f879 	bl	8005fc0 <SD_FindSCR>
 8005ece:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	e023      	b.n	8005f22 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01c      	beq.n	8005f1e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eec:	041b      	lsls	r3, r3, #16
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f001 fc66 	bl	80077c2 <SDMMC_CmdAppCommand>
 8005ef6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	e00f      	b.n	8005f22 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2102      	movs	r1, #2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 fc9d 	bl	8007848 <SDMMC_CmdBusWidth>
 8005f0e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	e003      	b.n	8005f22 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e001      	b.n	8005f22 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b086      	sub	sp, #24
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 fab2 	bl	80074aa <SDMMC_GetResponse>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f50:	d102      	bne.n	8005f58 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005f52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f56:	e02f      	b.n	8005fb8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f82e 	bl	8005fc0 <SD_FindSCR>
 8005f64:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	e023      	b.n	8005fb8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01c      	beq.n	8005fb4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f001 fc1b 	bl	80077c2 <SDMMC_CmdAppCommand>
 8005f8c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	e00f      	b.n	8005fb8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f001 fc52 	bl	8007848 <SDMMC_CmdBusWidth>
 8005fa4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	e003      	b.n	8005fb8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e001      	b.n	8005fb8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005fb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08e      	sub	sp, #56	; 0x38
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005fca:	f7fb f8b5 	bl	8001138 <HAL_GetTick>
 8005fce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60bb      	str	r3, [r7, #8]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2108      	movs	r1, #8
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fa9e 	bl	8007528 <SDMMC_CmdBlockLength>
 8005fec:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	e0ad      	b.n	8006154 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f001 fbdc 	bl	80077c2 <SDMMC_CmdAppCommand>
 800600a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	e09e      	b.n	8006154 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006016:	f04f 33ff 	mov.w	r3, #4294967295
 800601a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800601c:	2308      	movs	r3, #8
 800601e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006020:	2330      	movs	r3, #48	; 0x30
 8006022:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006024:	2302      	movs	r3, #2
 8006026:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006028:	2300      	movs	r3, #0
 800602a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800602c:	2301      	movs	r3, #1
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f107 0210 	add.w	r2, r7, #16
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f001 fa48 	bl	80074d0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f001 fc22 	bl	800788e <SDMMC_CmdSendSCR>
 800604a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	2b00      	cmp	r3, #0
 8006050:	d027      	beq.n	80060a2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	e07e      	b.n	8006154 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d113      	bne.n	800608c <SD_FindSCR+0xcc>
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	2b00      	cmp	r3, #0
 8006068:	d110      	bne.n	800608c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f001 f9a6 	bl	80073c0 <SDMMC_ReadFIFO>
 8006074:	4603      	mov	r3, r0
 8006076:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f001 f99f 	bl	80073c0 <SDMMC_ReadFIFO>
 8006082:	4603      	mov	r3, r0
 8006084:	60fb      	str	r3, [r7, #12]
      index++;
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	3301      	adds	r3, #1
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800608c:	f7fb f854 	bl	8001138 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609a:	d102      	bne.n	80060a2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800609c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060a0:	e058      	b.n	8006154 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a8:	f240 532a 	movw	r3, #1322	; 0x52a
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0d1      	beq.n	8006056 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2208      	movs	r2, #8
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80060c8:	2308      	movs	r3, #8
 80060ca:	e043      	b.n	8006154 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2202      	movs	r2, #2
 80060e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80060e2:	2302      	movs	r3, #2
 80060e4:	e036      	b.n	8006154 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2220      	movs	r2, #32
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80060fc:	2320      	movs	r3, #32
 80060fe:	e029      	b.n	8006154 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a15      	ldr	r2, [pc, #84]	; (800615c <SD_FindSCR+0x19c>)
 8006106:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	061a      	lsls	r2, r3, #24
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006114:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	0a1b      	lsrs	r3, r3, #8
 800611a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800611e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	0e1b      	lsrs	r3, r3, #24
 8006124:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	601a      	str	r2, [r3, #0]
    scr++;
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	3304      	adds	r3, #4
 800612e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	061a      	lsls	r2, r3, #24
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800613c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	0a1b      	lsrs	r3, r3, #8
 8006142:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006146:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	0e1b      	lsrs	r3, r3, #24
 800614c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3738      	adds	r7, #56	; 0x38
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	18000f3a 	.word	0x18000f3a

08006160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e042      	b.n	80061f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006178:	2b00      	cmp	r3, #0
 800617a:	d106      	bne.n	800618a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fa fd6b 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2224      	movs	r2, #36	; 0x24
 800618e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0201 	bic.w	r2, r2, #1
 80061a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8c2 	bl	800632c <UART_SetConfig>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e022      	b.n	80061f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fe1e 	bl	8006dfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fea5 	bl	8006f40 <UART_CheckIdleState>
 80061f6:	4603      	mov	r3, r0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	; 0x28
 8006204:	af02      	add	r7, sp, #8
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006216:	2b20      	cmp	r3, #32
 8006218:	f040 8083 	bne.w	8006322 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_UART_Transmit+0x28>
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e07b      	b.n	8006324 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_UART_Transmit+0x3a>
 8006236:	2302      	movs	r3, #2
 8006238:	e074      	b.n	8006324 <HAL_UART_Transmit+0x124>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2221      	movs	r2, #33	; 0x21
 800624e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006252:	f7fa ff71 	bl	8001138 <HAL_GetTick>
 8006256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006270:	d108      	bne.n	8006284 <HAL_UART_Transmit+0x84>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	e003      	b.n	800628c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006294:	e02c      	b.n	80062f0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2200      	movs	r2, #0
 800629e:	2180      	movs	r1, #128	; 0x80
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fe98 	bl	8006fd6 <UART_WaitOnFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e039      	b.n	8006324 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10b      	bne.n	80062ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	3302      	adds	r3, #2
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	e007      	b.n	80062de <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	781a      	ldrb	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3301      	adds	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1cc      	bne.n	8006296 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2200      	movs	r2, #0
 8006304:	2140      	movs	r1, #64	; 0x40
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fe65 	bl	8006fd6 <UART_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e006      	b.n	8006324 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	e000      	b.n	8006324 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006322:	2302      	movs	r3, #2
  }
}
 8006324:	4618      	mov	r0, r3
 8006326:	3720      	adds	r7, #32
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800632c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006330:	b092      	sub	sp, #72	; 0x48
 8006332:	af00      	add	r7, sp, #0
 8006334:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	431a      	orrs	r2, r3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	431a      	orrs	r2, r3
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	4313      	orrs	r3, r2
 8006352:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4bbe      	ldr	r3, [pc, #760]	; (8006654 <UART_SetConfig+0x328>)
 800635c:	4013      	ands	r3, r2
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006364:	430b      	orrs	r3, r1
 8006366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4ab3      	ldr	r2, [pc, #716]	; (8006658 <UART_SetConfig+0x32c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d004      	beq.n	8006398 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006394:	4313      	orrs	r3, r2
 8006396:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	4baf      	ldr	r3, [pc, #700]	; (800665c <UART_SetConfig+0x330>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	f023 010f 	bic.w	r1, r3, #15
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4aa6      	ldr	r2, [pc, #664]	; (8006660 <UART_SetConfig+0x334>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d177      	bne.n	80064bc <UART_SetConfig+0x190>
 80063cc:	4ba5      	ldr	r3, [pc, #660]	; (8006664 <UART_SetConfig+0x338>)
 80063ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063d4:	2b28      	cmp	r3, #40	; 0x28
 80063d6:	d86d      	bhi.n	80064b4 <UART_SetConfig+0x188>
 80063d8:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <UART_SetConfig+0xb4>)
 80063da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063de:	bf00      	nop
 80063e0:	08006485 	.word	0x08006485
 80063e4:	080064b5 	.word	0x080064b5
 80063e8:	080064b5 	.word	0x080064b5
 80063ec:	080064b5 	.word	0x080064b5
 80063f0:	080064b5 	.word	0x080064b5
 80063f4:	080064b5 	.word	0x080064b5
 80063f8:	080064b5 	.word	0x080064b5
 80063fc:	080064b5 	.word	0x080064b5
 8006400:	0800648d 	.word	0x0800648d
 8006404:	080064b5 	.word	0x080064b5
 8006408:	080064b5 	.word	0x080064b5
 800640c:	080064b5 	.word	0x080064b5
 8006410:	080064b5 	.word	0x080064b5
 8006414:	080064b5 	.word	0x080064b5
 8006418:	080064b5 	.word	0x080064b5
 800641c:	080064b5 	.word	0x080064b5
 8006420:	08006495 	.word	0x08006495
 8006424:	080064b5 	.word	0x080064b5
 8006428:	080064b5 	.word	0x080064b5
 800642c:	080064b5 	.word	0x080064b5
 8006430:	080064b5 	.word	0x080064b5
 8006434:	080064b5 	.word	0x080064b5
 8006438:	080064b5 	.word	0x080064b5
 800643c:	080064b5 	.word	0x080064b5
 8006440:	0800649d 	.word	0x0800649d
 8006444:	080064b5 	.word	0x080064b5
 8006448:	080064b5 	.word	0x080064b5
 800644c:	080064b5 	.word	0x080064b5
 8006450:	080064b5 	.word	0x080064b5
 8006454:	080064b5 	.word	0x080064b5
 8006458:	080064b5 	.word	0x080064b5
 800645c:	080064b5 	.word	0x080064b5
 8006460:	080064a5 	.word	0x080064a5
 8006464:	080064b5 	.word	0x080064b5
 8006468:	080064b5 	.word	0x080064b5
 800646c:	080064b5 	.word	0x080064b5
 8006470:	080064b5 	.word	0x080064b5
 8006474:	080064b5 	.word	0x080064b5
 8006478:	080064b5 	.word	0x080064b5
 800647c:	080064b5 	.word	0x080064b5
 8006480:	080064ad 	.word	0x080064ad
 8006484:	2301      	movs	r3, #1
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648a:	e222      	b.n	80068d2 <UART_SetConfig+0x5a6>
 800648c:	2304      	movs	r3, #4
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006492:	e21e      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006494:	2308      	movs	r3, #8
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649a:	e21a      	b.n	80068d2 <UART_SetConfig+0x5a6>
 800649c:	2310      	movs	r3, #16
 800649e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a2:	e216      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80064a4:	2320      	movs	r3, #32
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064aa:	e212      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80064ac:	2340      	movs	r3, #64	; 0x40
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b2:	e20e      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80064b4:	2380      	movs	r3, #128	; 0x80
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ba:	e20a      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a69      	ldr	r2, [pc, #420]	; (8006668 <UART_SetConfig+0x33c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d130      	bne.n	8006528 <UART_SetConfig+0x1fc>
 80064c6:	4b67      	ldr	r3, [pc, #412]	; (8006664 <UART_SetConfig+0x338>)
 80064c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	d826      	bhi.n	8006520 <UART_SetConfig+0x1f4>
 80064d2:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <UART_SetConfig+0x1ac>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	080064f1 	.word	0x080064f1
 80064dc:	080064f9 	.word	0x080064f9
 80064e0:	08006501 	.word	0x08006501
 80064e4:	08006509 	.word	0x08006509
 80064e8:	08006511 	.word	0x08006511
 80064ec:	08006519 	.word	0x08006519
 80064f0:	2300      	movs	r3, #0
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f6:	e1ec      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80064f8:	2304      	movs	r3, #4
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fe:	e1e8      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006500:	2308      	movs	r3, #8
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006506:	e1e4      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006508:	2310      	movs	r3, #16
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650e:	e1e0      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006510:	2320      	movs	r3, #32
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006516:	e1dc      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006518:	2340      	movs	r3, #64	; 0x40
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651e:	e1d8      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006520:	2380      	movs	r3, #128	; 0x80
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006526:	e1d4      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a4f      	ldr	r2, [pc, #316]	; (800666c <UART_SetConfig+0x340>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d130      	bne.n	8006594 <UART_SetConfig+0x268>
 8006532:	4b4c      	ldr	r3, [pc, #304]	; (8006664 <UART_SetConfig+0x338>)
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	2b05      	cmp	r3, #5
 800653c:	d826      	bhi.n	800658c <UART_SetConfig+0x260>
 800653e:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <UART_SetConfig+0x218>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	0800655d 	.word	0x0800655d
 8006548:	08006565 	.word	0x08006565
 800654c:	0800656d 	.word	0x0800656d
 8006550:	08006575 	.word	0x08006575
 8006554:	0800657d 	.word	0x0800657d
 8006558:	08006585 	.word	0x08006585
 800655c:	2300      	movs	r3, #0
 800655e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006562:	e1b6      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006564:	2304      	movs	r3, #4
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656a:	e1b2      	b.n	80068d2 <UART_SetConfig+0x5a6>
 800656c:	2308      	movs	r3, #8
 800656e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006572:	e1ae      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006574:	2310      	movs	r3, #16
 8006576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657a:	e1aa      	b.n	80068d2 <UART_SetConfig+0x5a6>
 800657c:	2320      	movs	r3, #32
 800657e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006582:	e1a6      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006584:	2340      	movs	r3, #64	; 0x40
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658a:	e1a2      	b.n	80068d2 <UART_SetConfig+0x5a6>
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006592:	e19e      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a35      	ldr	r2, [pc, #212]	; (8006670 <UART_SetConfig+0x344>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d130      	bne.n	8006600 <UART_SetConfig+0x2d4>
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <UART_SetConfig+0x338>)
 80065a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	2b05      	cmp	r3, #5
 80065a8:	d826      	bhi.n	80065f8 <UART_SetConfig+0x2cc>
 80065aa:	a201      	add	r2, pc, #4	; (adr r2, 80065b0 <UART_SetConfig+0x284>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065c9 	.word	0x080065c9
 80065b4:	080065d1 	.word	0x080065d1
 80065b8:	080065d9 	.word	0x080065d9
 80065bc:	080065e1 	.word	0x080065e1
 80065c0:	080065e9 	.word	0x080065e9
 80065c4:	080065f1 	.word	0x080065f1
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ce:	e180      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80065d0:	2304      	movs	r3, #4
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d6:	e17c      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80065d8:	2308      	movs	r3, #8
 80065da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065de:	e178      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80065e0:	2310      	movs	r3, #16
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065e6:	e174      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80065e8:	2320      	movs	r3, #32
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ee:	e170      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80065f0:	2340      	movs	r3, #64	; 0x40
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f6:	e16c      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80065f8:	2380      	movs	r3, #128	; 0x80
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fe:	e168      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <UART_SetConfig+0x348>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d142      	bne.n	8006690 <UART_SetConfig+0x364>
 800660a:	4b16      	ldr	r3, [pc, #88]	; (8006664 <UART_SetConfig+0x338>)
 800660c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	2b05      	cmp	r3, #5
 8006614:	d838      	bhi.n	8006688 <UART_SetConfig+0x35c>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x2f0>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006635 	.word	0x08006635
 8006620:	0800663d 	.word	0x0800663d
 8006624:	08006645 	.word	0x08006645
 8006628:	0800664d 	.word	0x0800664d
 800662c:	08006679 	.word	0x08006679
 8006630:	08006681 	.word	0x08006681
 8006634:	2300      	movs	r3, #0
 8006636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663a:	e14a      	b.n	80068d2 <UART_SetConfig+0x5a6>
 800663c:	2304      	movs	r3, #4
 800663e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006642:	e146      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006644:	2308      	movs	r3, #8
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664a:	e142      	b.n	80068d2 <UART_SetConfig+0x5a6>
 800664c:	2310      	movs	r3, #16
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006652:	e13e      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006654:	cfff69f3 	.word	0xcfff69f3
 8006658:	58000c00 	.word	0x58000c00
 800665c:	11fff4ff 	.word	0x11fff4ff
 8006660:	40011000 	.word	0x40011000
 8006664:	58024400 	.word	0x58024400
 8006668:	40004400 	.word	0x40004400
 800666c:	40004800 	.word	0x40004800
 8006670:	40004c00 	.word	0x40004c00
 8006674:	40005000 	.word	0x40005000
 8006678:	2320      	movs	r3, #32
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e128      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006680:	2340      	movs	r3, #64	; 0x40
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e124      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668e:	e120      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4acb      	ldr	r2, [pc, #812]	; (80069c4 <UART_SetConfig+0x698>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d176      	bne.n	8006788 <UART_SetConfig+0x45c>
 800669a:	4bcb      	ldr	r3, [pc, #812]	; (80069c8 <UART_SetConfig+0x69c>)
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a2:	2b28      	cmp	r3, #40	; 0x28
 80066a4:	d86c      	bhi.n	8006780 <UART_SetConfig+0x454>
 80066a6:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <UART_SetConfig+0x380>)
 80066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ac:	08006751 	.word	0x08006751
 80066b0:	08006781 	.word	0x08006781
 80066b4:	08006781 	.word	0x08006781
 80066b8:	08006781 	.word	0x08006781
 80066bc:	08006781 	.word	0x08006781
 80066c0:	08006781 	.word	0x08006781
 80066c4:	08006781 	.word	0x08006781
 80066c8:	08006781 	.word	0x08006781
 80066cc:	08006759 	.word	0x08006759
 80066d0:	08006781 	.word	0x08006781
 80066d4:	08006781 	.word	0x08006781
 80066d8:	08006781 	.word	0x08006781
 80066dc:	08006781 	.word	0x08006781
 80066e0:	08006781 	.word	0x08006781
 80066e4:	08006781 	.word	0x08006781
 80066e8:	08006781 	.word	0x08006781
 80066ec:	08006761 	.word	0x08006761
 80066f0:	08006781 	.word	0x08006781
 80066f4:	08006781 	.word	0x08006781
 80066f8:	08006781 	.word	0x08006781
 80066fc:	08006781 	.word	0x08006781
 8006700:	08006781 	.word	0x08006781
 8006704:	08006781 	.word	0x08006781
 8006708:	08006781 	.word	0x08006781
 800670c:	08006769 	.word	0x08006769
 8006710:	08006781 	.word	0x08006781
 8006714:	08006781 	.word	0x08006781
 8006718:	08006781 	.word	0x08006781
 800671c:	08006781 	.word	0x08006781
 8006720:	08006781 	.word	0x08006781
 8006724:	08006781 	.word	0x08006781
 8006728:	08006781 	.word	0x08006781
 800672c:	08006771 	.word	0x08006771
 8006730:	08006781 	.word	0x08006781
 8006734:	08006781 	.word	0x08006781
 8006738:	08006781 	.word	0x08006781
 800673c:	08006781 	.word	0x08006781
 8006740:	08006781 	.word	0x08006781
 8006744:	08006781 	.word	0x08006781
 8006748:	08006781 	.word	0x08006781
 800674c:	08006779 	.word	0x08006779
 8006750:	2301      	movs	r3, #1
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006756:	e0bc      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006758:	2304      	movs	r3, #4
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675e:	e0b8      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006760:	2308      	movs	r3, #8
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006766:	e0b4      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006768:	2310      	movs	r3, #16
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676e:	e0b0      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006770:	2320      	movs	r3, #32
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006776:	e0ac      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006778:	2340      	movs	r3, #64	; 0x40
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677e:	e0a8      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006780:	2380      	movs	r3, #128	; 0x80
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006786:	e0a4      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a8f      	ldr	r2, [pc, #572]	; (80069cc <UART_SetConfig+0x6a0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d130      	bne.n	80067f4 <UART_SetConfig+0x4c8>
 8006792:	4b8d      	ldr	r3, [pc, #564]	; (80069c8 <UART_SetConfig+0x69c>)
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	2b05      	cmp	r3, #5
 800679c:	d826      	bhi.n	80067ec <UART_SetConfig+0x4c0>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <UART_SetConfig+0x478>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067bd 	.word	0x080067bd
 80067a8:	080067c5 	.word	0x080067c5
 80067ac:	080067cd 	.word	0x080067cd
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067dd 	.word	0x080067dd
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	2300      	movs	r3, #0
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c2:	e086      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80067c4:	2304      	movs	r3, #4
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ca:	e082      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80067cc:	2308      	movs	r3, #8
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d2:	e07e      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80067d4:	2310      	movs	r3, #16
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067da:	e07a      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80067dc:	2320      	movs	r3, #32
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e2:	e076      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ea:	e072      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80067ec:	2380      	movs	r3, #128	; 0x80
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f2:	e06e      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a75      	ldr	r2, [pc, #468]	; (80069d0 <UART_SetConfig+0x6a4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d130      	bne.n	8006860 <UART_SetConfig+0x534>
 80067fe:	4b72      	ldr	r3, [pc, #456]	; (80069c8 <UART_SetConfig+0x69c>)
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	2b05      	cmp	r3, #5
 8006808:	d826      	bhi.n	8006858 <UART_SetConfig+0x52c>
 800680a:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UART_SetConfig+0x4e4>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006829 	.word	0x08006829
 8006814:	08006831 	.word	0x08006831
 8006818:	08006839 	.word	0x08006839
 800681c:	08006841 	.word	0x08006841
 8006820:	08006849 	.word	0x08006849
 8006824:	08006851 	.word	0x08006851
 8006828:	2300      	movs	r3, #0
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e050      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006830:	2304      	movs	r3, #4
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006836:	e04c      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006838:	2308      	movs	r3, #8
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683e:	e048      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006840:	2310      	movs	r3, #16
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006846:	e044      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006848:	2320      	movs	r3, #32
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684e:	e040      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006856:	e03c      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685e:	e038      	b.n	80068d2 <UART_SetConfig+0x5a6>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a5b      	ldr	r2, [pc, #364]	; (80069d4 <UART_SetConfig+0x6a8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d130      	bne.n	80068cc <UART_SetConfig+0x5a0>
 800686a:	4b57      	ldr	r3, [pc, #348]	; (80069c8 <UART_SetConfig+0x69c>)
 800686c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	2b05      	cmp	r3, #5
 8006874:	d826      	bhi.n	80068c4 <UART_SetConfig+0x598>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0x550>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	08006895 	.word	0x08006895
 8006880:	0800689d 	.word	0x0800689d
 8006884:	080068a5 	.word	0x080068a5
 8006888:	080068ad 	.word	0x080068ad
 800688c:	080068b5 	.word	0x080068b5
 8006890:	080068bd 	.word	0x080068bd
 8006894:	2302      	movs	r3, #2
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e01a      	b.n	80068d2 <UART_SetConfig+0x5a6>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a2:	e016      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068aa:	e012      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b2:	e00e      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80068b4:	2320      	movs	r3, #32
 80068b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ba:	e00a      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80068bc:	2340      	movs	r3, #64	; 0x40
 80068be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068c2:	e006      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ca:	e002      	b.n	80068d2 <UART_SetConfig+0x5a6>
 80068cc:	2380      	movs	r3, #128	; 0x80
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a3f      	ldr	r2, [pc, #252]	; (80069d4 <UART_SetConfig+0x6a8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	f040 80f8 	bne.w	8006ace <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	dc46      	bgt.n	8006974 <UART_SetConfig+0x648>
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	f2c0 8082 	blt.w	80069f0 <UART_SetConfig+0x6c4>
 80068ec:	3b02      	subs	r3, #2
 80068ee:	2b1e      	cmp	r3, #30
 80068f0:	d87e      	bhi.n	80069f0 <UART_SetConfig+0x6c4>
 80068f2:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <UART_SetConfig+0x5cc>)
 80068f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f8:	0800697b 	.word	0x0800697b
 80068fc:	080069f1 	.word	0x080069f1
 8006900:	08006983 	.word	0x08006983
 8006904:	080069f1 	.word	0x080069f1
 8006908:	080069f1 	.word	0x080069f1
 800690c:	080069f1 	.word	0x080069f1
 8006910:	08006993 	.word	0x08006993
 8006914:	080069f1 	.word	0x080069f1
 8006918:	080069f1 	.word	0x080069f1
 800691c:	080069f1 	.word	0x080069f1
 8006920:	080069f1 	.word	0x080069f1
 8006924:	080069f1 	.word	0x080069f1
 8006928:	080069f1 	.word	0x080069f1
 800692c:	080069f1 	.word	0x080069f1
 8006930:	080069a3 	.word	0x080069a3
 8006934:	080069f1 	.word	0x080069f1
 8006938:	080069f1 	.word	0x080069f1
 800693c:	080069f1 	.word	0x080069f1
 8006940:	080069f1 	.word	0x080069f1
 8006944:	080069f1 	.word	0x080069f1
 8006948:	080069f1 	.word	0x080069f1
 800694c:	080069f1 	.word	0x080069f1
 8006950:	080069f1 	.word	0x080069f1
 8006954:	080069f1 	.word	0x080069f1
 8006958:	080069f1 	.word	0x080069f1
 800695c:	080069f1 	.word	0x080069f1
 8006960:	080069f1 	.word	0x080069f1
 8006964:	080069f1 	.word	0x080069f1
 8006968:	080069f1 	.word	0x080069f1
 800696c:	080069f1 	.word	0x080069f1
 8006970:	080069e3 	.word	0x080069e3
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d037      	beq.n	80069e8 <UART_SetConfig+0x6bc>
 8006978:	e03a      	b.n	80069f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800697a:	f7fd fad1 	bl	8003f20 <HAL_RCCEx_GetD3PCLK1Freq>
 800697e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006980:	e03c      	b.n	80069fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006986:	4618      	mov	r0, r3
 8006988:	f7fd fae0 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006990:	e034      	b.n	80069fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006992:	f107 0318 	add.w	r3, r7, #24
 8006996:	4618      	mov	r0, r3
 8006998:	f7fd fc2c 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a0:	e02c      	b.n	80069fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a2:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <UART_SetConfig+0x69c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d016      	beq.n	80069dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <UART_SetConfig+0x69c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	08db      	lsrs	r3, r3, #3
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	4a07      	ldr	r2, [pc, #28]	; (80069d8 <UART_SetConfig+0x6ac>)
 80069ba:	fa22 f303 	lsr.w	r3, r2, r3
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069c0:	e01c      	b.n	80069fc <UART_SetConfig+0x6d0>
 80069c2:	bf00      	nop
 80069c4:	40011400 	.word	0x40011400
 80069c8:	58024400 	.word	0x58024400
 80069cc:	40007800 	.word	0x40007800
 80069d0:	40007c00 	.word	0x40007c00
 80069d4:	58000c00 	.word	0x58000c00
 80069d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80069dc:	4b9d      	ldr	r3, [pc, #628]	; (8006c54 <UART_SetConfig+0x928>)
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e0:	e00c      	b.n	80069fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069e2:	4b9d      	ldr	r3, [pc, #628]	; (8006c58 <UART_SetConfig+0x92c>)
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e6:	e009      	b.n	80069fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ee:	e005      	b.n	80069fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80069fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 81de 	beq.w	8006dc0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	4a94      	ldr	r2, [pc, #592]	; (8006c5c <UART_SetConfig+0x930>)
 8006a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a16:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d305      	bcc.n	8006a34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d903      	bls.n	8006a3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a3a:	e1c1      	b.n	8006dc0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3e:	2200      	movs	r2, #0
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	60fa      	str	r2, [r7, #12]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	4a84      	ldr	r2, [pc, #528]	; (8006c5c <UART_SetConfig+0x930>)
 8006a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2200      	movs	r2, #0
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a5e:	f7f9 fc8f 	bl	8000380 <__aeabi_uldivmod>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4610      	mov	r0, r2
 8006a68:	4619      	mov	r1, r3
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	020b      	lsls	r3, r1, #8
 8006a74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a78:	0202      	lsls	r2, r0, #8
 8006a7a:	6979      	ldr	r1, [r7, #20]
 8006a7c:	6849      	ldr	r1, [r1, #4]
 8006a7e:	0849      	lsrs	r1, r1, #1
 8006a80:	2000      	movs	r0, #0
 8006a82:	460c      	mov	r4, r1
 8006a84:	4605      	mov	r5, r0
 8006a86:	eb12 0804 	adds.w	r8, r2, r4
 8006a8a:	eb43 0905 	adc.w	r9, r3, r5
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	469a      	mov	sl, r3
 8006a96:	4693      	mov	fp, r2
 8006a98:	4652      	mov	r2, sl
 8006a9a:	465b      	mov	r3, fp
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7f9 fc6e 	bl	8000380 <__aeabi_uldivmod>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ab2:	d308      	bcc.n	8006ac6 <UART_SetConfig+0x79a>
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aba:	d204      	bcs.n	8006ac6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ac2:	60da      	str	r2, [r3, #12]
 8006ac4:	e17c      	b.n	8006dc0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006acc:	e178      	b.n	8006dc0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad6:	f040 80c5 	bne.w	8006c64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006ada:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	dc48      	bgt.n	8006b74 <UART_SetConfig+0x848>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	db7b      	blt.n	8006bde <UART_SetConfig+0x8b2>
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	d879      	bhi.n	8006bde <UART_SetConfig+0x8b2>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <UART_SetConfig+0x7c4>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b7b 	.word	0x08006b7b
 8006af4:	08006b83 	.word	0x08006b83
 8006af8:	08006bdf 	.word	0x08006bdf
 8006afc:	08006bdf 	.word	0x08006bdf
 8006b00:	08006b8b 	.word	0x08006b8b
 8006b04:	08006bdf 	.word	0x08006bdf
 8006b08:	08006bdf 	.word	0x08006bdf
 8006b0c:	08006bdf 	.word	0x08006bdf
 8006b10:	08006b9b 	.word	0x08006b9b
 8006b14:	08006bdf 	.word	0x08006bdf
 8006b18:	08006bdf 	.word	0x08006bdf
 8006b1c:	08006bdf 	.word	0x08006bdf
 8006b20:	08006bdf 	.word	0x08006bdf
 8006b24:	08006bdf 	.word	0x08006bdf
 8006b28:	08006bdf 	.word	0x08006bdf
 8006b2c:	08006bdf 	.word	0x08006bdf
 8006b30:	08006bab 	.word	0x08006bab
 8006b34:	08006bdf 	.word	0x08006bdf
 8006b38:	08006bdf 	.word	0x08006bdf
 8006b3c:	08006bdf 	.word	0x08006bdf
 8006b40:	08006bdf 	.word	0x08006bdf
 8006b44:	08006bdf 	.word	0x08006bdf
 8006b48:	08006bdf 	.word	0x08006bdf
 8006b4c:	08006bdf 	.word	0x08006bdf
 8006b50:	08006bdf 	.word	0x08006bdf
 8006b54:	08006bdf 	.word	0x08006bdf
 8006b58:	08006bdf 	.word	0x08006bdf
 8006b5c:	08006bdf 	.word	0x08006bdf
 8006b60:	08006bdf 	.word	0x08006bdf
 8006b64:	08006bdf 	.word	0x08006bdf
 8006b68:	08006bdf 	.word	0x08006bdf
 8006b6c:	08006bdf 	.word	0x08006bdf
 8006b70:	08006bd1 	.word	0x08006bd1
 8006b74:	2b40      	cmp	r3, #64	; 0x40
 8006b76:	d02e      	beq.n	8006bd6 <UART_SetConfig+0x8aa>
 8006b78:	e031      	b.n	8006bde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b7a:	f7fb fd8d 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8006b7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b80:	e033      	b.n	8006bea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b82:	f7fb fd9f 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 8006b86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b88:	e02f      	b.n	8006bea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fd f9dc 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b98:	e027      	b.n	8006bea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9a:	f107 0318 	add.w	r3, r7, #24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd fb28 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba8:	e01f      	b.n	8006bea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006baa:	4b2d      	ldr	r3, [pc, #180]	; (8006c60 <UART_SetConfig+0x934>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d009      	beq.n	8006bca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bb6:	4b2a      	ldr	r3, [pc, #168]	; (8006c60 <UART_SetConfig+0x934>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	08db      	lsrs	r3, r3, #3
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	4a24      	ldr	r2, [pc, #144]	; (8006c54 <UART_SetConfig+0x928>)
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bc8:	e00f      	b.n	8006bea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006bca:	4b22      	ldr	r3, [pc, #136]	; (8006c54 <UART_SetConfig+0x928>)
 8006bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bce:	e00c      	b.n	8006bea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bd0:	4b21      	ldr	r3, [pc, #132]	; (8006c58 <UART_SetConfig+0x92c>)
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd4:	e009      	b.n	8006bea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bdc:	e005      	b.n	8006bea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006be8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80e7 	beq.w	8006dc0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	4a19      	ldr	r2, [pc, #100]	; (8006c5c <UART_SetConfig+0x930>)
 8006bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c04:	005a      	lsls	r2, r3, #1
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	441a      	add	r2, r3
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c16:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	2b0f      	cmp	r3, #15
 8006c1c:	d916      	bls.n	8006c4c <UART_SetConfig+0x920>
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c24:	d212      	bcs.n	8006c4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f023 030f 	bic.w	r3, r3, #15
 8006c2e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	085b      	lsrs	r3, r3, #1
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	e0b9      	b.n	8006dc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c52:	e0b5      	b.n	8006dc0 <UART_SetConfig+0xa94>
 8006c54:	03d09000 	.word	0x03d09000
 8006c58:	003d0900 	.word	0x003d0900
 8006c5c:	0800a0b4 	.word	0x0800a0b4
 8006c60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	dc49      	bgt.n	8006d00 <UART_SetConfig+0x9d4>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	db7c      	blt.n	8006d6a <UART_SetConfig+0xa3e>
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d87a      	bhi.n	8006d6a <UART_SetConfig+0xa3e>
 8006c74:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <UART_SetConfig+0x950>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006d07 	.word	0x08006d07
 8006c80:	08006d0f 	.word	0x08006d0f
 8006c84:	08006d6b 	.word	0x08006d6b
 8006c88:	08006d6b 	.word	0x08006d6b
 8006c8c:	08006d17 	.word	0x08006d17
 8006c90:	08006d6b 	.word	0x08006d6b
 8006c94:	08006d6b 	.word	0x08006d6b
 8006c98:	08006d6b 	.word	0x08006d6b
 8006c9c:	08006d27 	.word	0x08006d27
 8006ca0:	08006d6b 	.word	0x08006d6b
 8006ca4:	08006d6b 	.word	0x08006d6b
 8006ca8:	08006d6b 	.word	0x08006d6b
 8006cac:	08006d6b 	.word	0x08006d6b
 8006cb0:	08006d6b 	.word	0x08006d6b
 8006cb4:	08006d6b 	.word	0x08006d6b
 8006cb8:	08006d6b 	.word	0x08006d6b
 8006cbc:	08006d37 	.word	0x08006d37
 8006cc0:	08006d6b 	.word	0x08006d6b
 8006cc4:	08006d6b 	.word	0x08006d6b
 8006cc8:	08006d6b 	.word	0x08006d6b
 8006ccc:	08006d6b 	.word	0x08006d6b
 8006cd0:	08006d6b 	.word	0x08006d6b
 8006cd4:	08006d6b 	.word	0x08006d6b
 8006cd8:	08006d6b 	.word	0x08006d6b
 8006cdc:	08006d6b 	.word	0x08006d6b
 8006ce0:	08006d6b 	.word	0x08006d6b
 8006ce4:	08006d6b 	.word	0x08006d6b
 8006ce8:	08006d6b 	.word	0x08006d6b
 8006cec:	08006d6b 	.word	0x08006d6b
 8006cf0:	08006d6b 	.word	0x08006d6b
 8006cf4:	08006d6b 	.word	0x08006d6b
 8006cf8:	08006d6b 	.word	0x08006d6b
 8006cfc:	08006d5d 	.word	0x08006d5d
 8006d00:	2b40      	cmp	r3, #64	; 0x40
 8006d02:	d02e      	beq.n	8006d62 <UART_SetConfig+0xa36>
 8006d04:	e031      	b.n	8006d6a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d06:	f7fb fcc7 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8006d0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d0c:	e033      	b.n	8006d76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d0e:	f7fb fcd9 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 8006d12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d14:	e02f      	b.n	8006d76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fd f916 	bl	8003f4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d24:	e027      	b.n	8006d76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d26:	f107 0318 	add.w	r3, r7, #24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fd fa62 	bl	80041f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d34:	e01f      	b.n	8006d76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d36:	4b2d      	ldr	r3, [pc, #180]	; (8006dec <UART_SetConfig+0xac0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d42:	4b2a      	ldr	r3, [pc, #168]	; (8006dec <UART_SetConfig+0xac0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	08db      	lsrs	r3, r3, #3
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	4a28      	ldr	r2, [pc, #160]	; (8006df0 <UART_SetConfig+0xac4>)
 8006d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d54:	e00f      	b.n	8006d76 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d56:	4b26      	ldr	r3, [pc, #152]	; (8006df0 <UART_SetConfig+0xac4>)
 8006d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d5a:	e00c      	b.n	8006d76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d5c:	4b25      	ldr	r3, [pc, #148]	; (8006df4 <UART_SetConfig+0xac8>)
 8006d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d60:	e009      	b.n	8006d76 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d68:	e005      	b.n	8006d76 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d74:	bf00      	nop
    }

    if (pclk != 0U)
 8006d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d021      	beq.n	8006dc0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <UART_SetConfig+0xacc>)
 8006d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d86:	461a      	mov	r2, r3
 8006d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	441a      	add	r2, r3
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	2b0f      	cmp	r3, #15
 8006da4:	d909      	bls.n	8006dba <UART_SetConfig+0xa8e>
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dac:	d205      	bcs.n	8006dba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60da      	str	r2, [r3, #12]
 8006db8:	e002      	b.n	8006dc0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ddc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3748      	adds	r7, #72	; 0x48
 8006de4:	46bd      	mov	sp, r7
 8006de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dea:	bf00      	nop
 8006dec:	58024400 	.word	0x58024400
 8006df0:	03d09000 	.word	0x03d09000
 8006df4:	003d0900 	.word	0x003d0900
 8006df8:	0800a0b4 	.word	0x0800a0b4

08006dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00a      	beq.n	8006e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01a      	beq.n	8006f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efa:	d10a      	bne.n	8006f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	605a      	str	r2, [r3, #4]
  }
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f50:	f7fa f8f2 	bl	8001138 <HAL_GetTick>
 8006f54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d10e      	bne.n	8006f82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f82f 	bl	8006fd6 <UART_WaitOnFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e025      	b.n	8006fce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d10e      	bne.n	8006fae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f819 	bl	8006fd6 <UART_WaitOnFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e00f      	b.n	8006fce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b09c      	sub	sp, #112	; 0x70
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	603b      	str	r3, [r7, #0]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe6:	e0a9      	b.n	800713c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	f000 80a5 	beq.w	800713c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff2:	f7fa f8a1 	bl	8001138 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d302      	bcc.n	8007008 <UART_WaitOnFlagUntilTimeout+0x32>
 8007002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007004:	2b00      	cmp	r3, #0
 8007006:	d140      	bne.n	800708a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007018:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800701c:	667b      	str	r3, [r7, #100]	; 0x64
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007026:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007028:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800702c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e6      	bne.n	8007008 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3308      	adds	r3, #8
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	f023 0301 	bic.w	r3, r3, #1
 8007050:	663b      	str	r3, [r7, #96]	; 0x60
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3308      	adds	r3, #8
 8007058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800705a:	64ba      	str	r2, [r7, #72]	; 0x48
 800705c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e5      	bne.n	800703a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2220      	movs	r2, #32
 800707a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e069      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d051      	beq.n	800713c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a6:	d149      	bne.n	800713c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
 80070d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e6      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	613b      	str	r3, [r7, #16]
   return(result);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007104:	623a      	str	r2, [r7, #32]
 8007106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	69f9      	ldr	r1, [r7, #28]
 800710a:	6a3a      	ldr	r2, [r7, #32]
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	61bb      	str	r3, [r7, #24]
   return(result);
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2220      	movs	r2, #32
 800711c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e010      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69da      	ldr	r2, [r3, #28]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	4013      	ands	r3, r2
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	429a      	cmp	r2, r3
 800714a:	bf0c      	ite	eq
 800714c:	2301      	moveq	r3, #1
 800714e:	2300      	movne	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	461a      	mov	r2, r3
 8007154:	79fb      	ldrb	r3, [r7, #7]
 8007156:	429a      	cmp	r2, r3
 8007158:	f43f af46 	beq.w	8006fe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3770      	adds	r7, #112	; 0x70
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_UARTEx_DisableFifoMode+0x16>
 8007178:	2302      	movs	r3, #2
 800717a:	e027      	b.n	80071cc <HAL_UARTEx_DisableFifoMode+0x66>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2224      	movs	r2, #36	; 0x24
 8007188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0201 	bic.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80071aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e02d      	b.n	800724c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2224      	movs	r2, #36	; 0x24
 80071fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0201 	bic.w	r2, r2, #1
 8007216:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f84f 	bl	80072d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007268:	2302      	movs	r3, #2
 800726a:	e02d      	b.n	80072c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2224      	movs	r2, #36	; 0x24
 8007278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0201 	bic.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f811 	bl	80072d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d108      	bne.n	80072f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072f0:	e031      	b.n	8007356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072f2:	2310      	movs	r3, #16
 80072f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072f6:	2310      	movs	r3, #16
 80072f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	0e5b      	lsrs	r3, r3, #25
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	0f5b      	lsrs	r3, r3, #29
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	7b3a      	ldrb	r2, [r7, #12]
 800731e:	4911      	ldr	r1, [pc, #68]	; (8007364 <UARTEx_SetNbDataToProcess+0x94>)
 8007320:	5c8a      	ldrb	r2, [r1, r2]
 8007322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007326:	7b3a      	ldrb	r2, [r7, #12]
 8007328:	490f      	ldr	r1, [pc, #60]	; (8007368 <UARTEx_SetNbDataToProcess+0x98>)
 800732a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800732c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007330:	b29a      	uxth	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	7b7a      	ldrb	r2, [r7, #13]
 800733c:	4909      	ldr	r1, [pc, #36]	; (8007364 <UARTEx_SetNbDataToProcess+0x94>)
 800733e:	5c8a      	ldrb	r2, [r1, r2]
 8007340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007344:	7b7a      	ldrb	r2, [r7, #13]
 8007346:	4908      	ldr	r1, [pc, #32]	; (8007368 <UARTEx_SetNbDataToProcess+0x98>)
 8007348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800734a:	fb93 f3f2 	sdiv	r3, r3, r2
 800734e:	b29a      	uxth	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	0800a0cc 	.word	0x0800a0cc
 8007368:	0800a0d4 	.word	0x0800a0d4

0800736c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800736c:	b084      	sub	sp, #16
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	f107 001c 	add.w	r0, r7, #28
 800737a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007382:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007384:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007386:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800738a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800738e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8007392:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	4b07      	ldr	r3, [pc, #28]	; (80073bc <SDMMC_Init+0x50>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	b004      	add	sp, #16
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	ffc02c00 	.word	0xffc02c00

080073c0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f043 0203 	orr.w	r2, r3, #3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0303 	and.w	r3, r3, #3
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
	...

0800743c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800745a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8007460:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8007466:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	4b06      	ldr	r3, [pc, #24]	; (800748c <SDMMC_SendCommand+0x50>)
 8007474:	4013      	ands	r3, r2
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	fffee0c0 	.word	0xfffee0c0

08007490 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	b2db      	uxtb	r3, r3
}
 800749e:	4618      	mov	r0, r3
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3314      	adds	r3, #20
 80074b8:	461a      	mov	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	4413      	add	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80074f6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80074fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8007502:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800751a:	2300      	movs	r3, #0

}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007536:	2310      	movs	r3, #16
 8007538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800753a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800753e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007540:	2300      	movs	r3, #0
 8007542:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007548:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800754a:	f107 0308 	add.w	r3, r7, #8
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff ff73 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007556:	f241 3288 	movw	r2, #5000	; 0x1388
 800755a:	2110      	movs	r1, #16
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fa5f 	bl	8007a20 <SDMMC_GetCmdResp1>
 8007562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007564:	69fb      	ldr	r3, [r7, #28]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b088      	sub	sp, #32
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800757c:	2311      	movs	r3, #17
 800757e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800758a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800758e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007590:	f107 0308 	add.w	r3, r7, #8
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff ff50 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800759c:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a0:	2111      	movs	r1, #17
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa3c 	bl	8007a20 <SDMMC_GetCmdResp1>
 80075a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075aa:	69fb      	ldr	r3, [r7, #28]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3720      	adds	r7, #32
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b088      	sub	sp, #32
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80075c2:	2312      	movs	r3, #18
 80075c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075d6:	f107 0308 	add.w	r3, r7, #8
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff ff2d 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80075e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075e6:	2112      	movs	r1, #18
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fa19 	bl	8007a20 <SDMMC_GetCmdResp1>
 80075ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075f0:	69fb      	ldr	r3, [r7, #28]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3720      	adds	r7, #32
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b088      	sub	sp, #32
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007608:	2318      	movs	r3, #24
 800760a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800760c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800761a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800761c:	f107 0308 	add.w	r3, r7, #8
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff ff0a 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007628:	f241 3288 	movw	r2, #5000	; 0x1388
 800762c:	2118      	movs	r1, #24
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f9f6 	bl	8007a20 <SDMMC_GetCmdResp1>
 8007634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007636:	69fb      	ldr	r3, [r7, #28]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3720      	adds	r7, #32
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800764e:	2319      	movs	r3, #25
 8007650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007658:	2300      	movs	r3, #0
 800765a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800765c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007660:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007662:	f107 0308 	add.w	r3, r7, #8
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fee7 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800766e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007672:	2119      	movs	r1, #25
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f9d3 	bl	8007a20 <SDMMC_GetCmdResp1>
 800767a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800767c:	69fb      	ldr	r3, [r7, #28]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007694:	230c      	movs	r3, #12
 8007696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800769c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076c0:	f107 0308 	add.w	r3, r7, #8
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff feb8 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80076cc:	4a0b      	ldr	r2, [pc, #44]	; (80076fc <SDMMC_CmdStopTransfer+0x74>)
 80076ce:	210c      	movs	r1, #12
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f9a5 	bl	8007a20 <SDMMC_GetCmdResp1>
 80076d6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ea:	d101      	bne.n	80076f0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80076f0:	69fb      	ldr	r3, [r7, #28]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3720      	adds	r7, #32
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	05f5e100 	.word	0x05f5e100

08007700 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800770e:	2307      	movs	r3, #7
 8007710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007716:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007718:	2300      	movs	r3, #0
 800771a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800771c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007720:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007722:	f107 0308 	add.w	r3, r7, #8
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff fe87 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800772e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007732:	2107      	movs	r1, #7
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f973 	bl	8007a20 <SDMMC_GetCmdResp1>
 800773a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800773c:	69fb      	ldr	r3, [r7, #28]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3720      	adds	r7, #32
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b088      	sub	sp, #32
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007756:	2300      	movs	r3, #0
 8007758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800775e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007764:	f107 0308 	add.w	r3, r7, #8
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff fe66 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fb97 	bl	8007ea4 <SDMMC_GetCmdError>
 8007776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007778:	69fb      	ldr	r3, [r7, #28]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3720      	adds	r7, #32
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b088      	sub	sp, #32
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800778a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800778e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007790:	2308      	movs	r3, #8
 8007792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800779e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077a4:	f107 0308 	add.w	r3, r7, #8
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff fe46 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fb29 	bl	8007e08 <SDMMC_GetCmdResp7>
 80077b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077b8:	69fb      	ldr	r3, [r7, #28]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3720      	adds	r7, #32
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b088      	sub	sp, #32
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80077d0:	2337      	movs	r3, #55	; 0x37
 80077d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80077da:	2300      	movs	r3, #0
 80077dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077e4:	f107 0308 	add.w	r3, r7, #8
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fe26 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80077f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f4:	2137      	movs	r1, #55	; 0x37
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f912 	bl	8007a20 <SDMMC_GetCmdResp1>
 80077fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077fe:	69fb      	ldr	r3, [r7, #28]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007816:	2329      	movs	r3, #41	; 0x29
 8007818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800781a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800781e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007828:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800782a:	f107 0308 	add.w	r3, r7, #8
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fe03 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa2e 	bl	8007c98 <SDMMC_GetCmdResp3>
 800783c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800783e:	69fb      	ldr	r3, [r7, #28]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3720      	adds	r7, #32
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b088      	sub	sp, #32
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007856:	2306      	movs	r3, #6
 8007858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800785a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800785e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007868:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800786a:	f107 0308 	add.w	r3, r7, #8
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff fde3 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007876:	f241 3288 	movw	r2, #5000	; 0x1388
 800787a:	2106      	movs	r1, #6
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f8cf 	bl	8007a20 <SDMMC_GetCmdResp1>
 8007882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007884:	69fb      	ldr	r3, [r7, #28]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3720      	adds	r7, #32
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b088      	sub	sp, #32
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800789a:	2333      	movs	r3, #51	; 0x33
 800789c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800789e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078a4:	2300      	movs	r3, #0
 80078a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078ae:	f107 0308 	add.w	r3, r7, #8
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff fdc1 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80078ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80078be:	2133      	movs	r1, #51	; 0x33
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f8ad 	bl	8007a20 <SDMMC_GetCmdResp1>
 80078c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078c8:	69fb      	ldr	r3, [r7, #28]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b088      	sub	sp, #32
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80078de:	2302      	movs	r3, #2
 80078e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80078e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80078e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078f2:	f107 0308 	add.w	r3, r7, #8
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff fd9f 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f980 	bl	8007c04 <SDMMC_GetCmdResp2>
 8007904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007906:	69fb      	ldr	r3, [r7, #28]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3720      	adds	r7, #32
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800791e:	2309      	movs	r3, #9
 8007920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007928:	2300      	movs	r3, #0
 800792a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800792c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007930:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007932:	f107 0308 	add.w	r3, r7, #8
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff fd7f 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f960 	bl	8007c04 <SDMMC_GetCmdResp2>
 8007944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007946:	69fb      	ldr	r3, [r7, #28]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800795e:	2303      	movs	r3, #3
 8007960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007968:	2300      	movs	r3, #0
 800796a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800796c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007970:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007972:	f107 0308 	add.w	r3, r7, #8
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff fd5f 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	2103      	movs	r1, #3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f9c8 	bl	8007d18 <SDMMC_GetCmdResp6>
 8007988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800798a:	69fb      	ldr	r3, [r7, #28]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80079a2:	230d      	movs	r3, #13
 80079a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079b6:	f107 0308 	add.w	r3, r7, #8
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff fd3d 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80079c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c6:	210d      	movs	r1, #13
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f829 	bl	8007a20 <SDMMC_GetCmdResp1>
 80079ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079d0:	69fb      	ldr	r3, [r7, #28]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b088      	sub	sp, #32
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80079e6:	230d      	movs	r3, #13
 80079e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079fa:	f107 0308 	add.w	r3, r7, #8
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff fd1b 	bl	800743c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8007a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0a:	210d      	movs	r1, #13
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f807 	bl	8007a20 <SDMMC_GetCmdResp1>
 8007a12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a14:	69fb      	ldr	r3, [r7, #28]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b088      	sub	sp, #32
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007a2e:	4b70      	ldr	r3, [pc, #448]	; (8007bf0 <SDMMC_GetCmdResp1+0x1d0>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a70      	ldr	r2, [pc, #448]	; (8007bf4 <SDMMC_GetCmdResp1+0x1d4>)
 8007a34:	fba2 2303 	umull	r2, r3, r2, r3
 8007a38:	0a5a      	lsrs	r2, r3, #9
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	fb02 f303 	mul.w	r3, r2, r3
 8007a40:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	1e5a      	subs	r2, r3, #1
 8007a46:	61fa      	str	r2, [r7, #28]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a50:	e0c9      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a56:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	4b67      	ldr	r3, [pc, #412]	; (8007bf8 <SDMMC_GetCmdResp1+0x1d8>)
 8007a5c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0ef      	beq.n	8007a42 <SDMMC_GetCmdResp1+0x22>
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1ea      	bne.n	8007a42 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2204      	movs	r2, #4
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a7e:	2304      	movs	r3, #4
 8007a80:	e0b1      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d004      	beq.n	8007a98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e0a6      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a58      	ldr	r2, [pc, #352]	; (8007bfc <SDMMC_GetCmdResp1+0x1dc>)
 8007a9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff fcf6 	bl	8007490 <SDMMC_GetCommandResponse>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d001      	beq.n	8007ab2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e099      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f7ff fcf8 	bl	80074aa <SDMMC_GetResponse>
 8007aba:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4b50      	ldr	r3, [pc, #320]	; (8007c00 <SDMMC_GetCmdResp1+0x1e0>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e08d      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	da02      	bge.n	8007ad6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ad4:	e087      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007ae0:	2340      	movs	r3, #64	; 0x40
 8007ae2:	e080      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007aee:	2380      	movs	r3, #128	; 0x80
 8007af0:	e079      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b00:	e071      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b10:	e069      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b20:	e061      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b30:	e059      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b40:	e051      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b50:	e049      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007b5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b60:	e041      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b70:	e039      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b80:	e031      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d002      	beq.n	8007b92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007b8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b90:	e029      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007b9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ba0:	e021      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007bac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007bb0:	e019      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007bc0:	e011      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007bcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007bd0:	e009      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007bdc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007be0:	e001      	b.n	8007be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3720      	adds	r7, #32
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	24000000 	.word	0x24000000
 8007bf4:	10624dd3 	.word	0x10624dd3
 8007bf8:	00200045 	.word	0x00200045
 8007bfc:	002000c5 	.word	0x002000c5
 8007c00:	fdffe008 	.word	0xfdffe008

08007c04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007c0c:	4b1f      	ldr	r3, [pc, #124]	; (8007c8c <SDMMC_GetCmdResp2+0x88>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <SDMMC_GetCmdResp2+0x8c>)
 8007c12:	fba2 2303 	umull	r2, r3, r2, r3
 8007c16:	0a5b      	lsrs	r3, r3, #9
 8007c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c1c:	fb02 f303 	mul.w	r3, r2, r3
 8007c20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	1e5a      	subs	r2, r3, #1
 8007c26:	60fa      	str	r2, [r7, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d102      	bne.n	8007c32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c30:	e026      	b.n	8007c80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c36:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0ef      	beq.n	8007c22 <SDMMC_GetCmdResp2+0x1e>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1ea      	bne.n	8007c22 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c5e:	2304      	movs	r3, #4
 8007c60:	e00e      	b.n	8007c80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e003      	b.n	8007c80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a06      	ldr	r2, [pc, #24]	; (8007c94 <SDMMC_GetCmdResp2+0x90>)
 8007c7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	24000000 	.word	0x24000000
 8007c90:	10624dd3 	.word	0x10624dd3
 8007c94:	002000c5 	.word	0x002000c5

08007c98 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007ca0:	4b1a      	ldr	r3, [pc, #104]	; (8007d0c <SDMMC_GetCmdResp3+0x74>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1a      	ldr	r2, [pc, #104]	; (8007d10 <SDMMC_GetCmdResp3+0x78>)
 8007ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8007caa:	0a5b      	lsrs	r3, r3, #9
 8007cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb0:	fb02 f303 	mul.w	r3, r2, r3
 8007cb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	1e5a      	subs	r2, r3, #1
 8007cba:	60fa      	str	r2, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d102      	bne.n	8007cc6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cc4:	e01b      	b.n	8007cfe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0ef      	beq.n	8007cb6 <SDMMC_GetCmdResp3+0x1e>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1ea      	bne.n	8007cb6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d004      	beq.n	8007cf6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2204      	movs	r2, #4
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cf2:	2304      	movs	r3, #4
 8007cf4:	e003      	b.n	8007cfe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a06      	ldr	r2, [pc, #24]	; (8007d14 <SDMMC_GetCmdResp3+0x7c>)
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	24000000 	.word	0x24000000
 8007d10:	10624dd3 	.word	0x10624dd3
 8007d14:	002000c5 	.word	0x002000c5

08007d18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	460b      	mov	r3, r1
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007d26:	4b35      	ldr	r3, [pc, #212]	; (8007dfc <SDMMC_GetCmdResp6+0xe4>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a35      	ldr	r2, [pc, #212]	; (8007e00 <SDMMC_GetCmdResp6+0xe8>)
 8007d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d30:	0a5b      	lsrs	r3, r3, #9
 8007d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d36:	fb02 f303 	mul.w	r3, r2, r3
 8007d3a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	1e5a      	subs	r2, r3, #1
 8007d40:	61fa      	str	r2, [r7, #28]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d4a:	e052      	b.n	8007df2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d50:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0ef      	beq.n	8007d3c <SDMMC_GetCmdResp6+0x24>
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1ea      	bne.n	8007d3c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d004      	beq.n	8007d7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2204      	movs	r2, #4
 8007d76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d78:	2304      	movs	r3, #4
 8007d7a:	e03a      	b.n	8007df2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d004      	beq.n	8007d92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e02f      	b.n	8007df2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff fb7c 	bl	8007490 <SDMMC_GetCommandResponse>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d001      	beq.n	8007da6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e025      	b.n	8007df2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4a16      	ldr	r2, [pc, #88]	; (8007e04 <SDMMC_GetCmdResp6+0xec>)
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007dac:	2100      	movs	r1, #0
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff fb7b 	bl	80074aa <SDMMC_GetResponse>
 8007db4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d106      	bne.n	8007dce <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e011      	b.n	8007df2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ddc:	e009      	b.n	8007df2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dec:	e001      	b.n	8007df2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3720      	adds	r7, #32
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	24000000 	.word	0x24000000
 8007e00:	10624dd3 	.word	0x10624dd3
 8007e04:	002000c5 	.word	0x002000c5

08007e08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007e10:	4b22      	ldr	r3, [pc, #136]	; (8007e9c <SDMMC_GetCmdResp7+0x94>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a22      	ldr	r2, [pc, #136]	; (8007ea0 <SDMMC_GetCmdResp7+0x98>)
 8007e16:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1a:	0a5b      	lsrs	r3, r3, #9
 8007e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e20:	fb02 f303 	mul.w	r3, r2, r3
 8007e24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1e5a      	subs	r2, r3, #1
 8007e2a:	60fa      	str	r2, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e34:	e02c      	b.n	8007e90 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0ef      	beq.n	8007e26 <SDMMC_GetCmdResp7+0x1e>
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1ea      	bne.n	8007e26 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d004      	beq.n	8007e66 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2204      	movs	r2, #4
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e62:	2304      	movs	r3, #4
 8007e64:	e014      	b.n	8007e90 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e009      	b.n	8007e90 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2240      	movs	r2, #64	; 0x40
 8007e8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007e8e:	2300      	movs	r3, #0

}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	24000000 	.word	0x24000000
 8007ea0:	10624dd3 	.word	0x10624dd3

08007ea4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007eac:	4b11      	ldr	r3, [pc, #68]	; (8007ef4 <SDMMC_GetCmdError+0x50>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a11      	ldr	r2, [pc, #68]	; (8007ef8 <SDMMC_GetCmdError+0x54>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	0a5b      	lsrs	r3, r3, #9
 8007eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ebc:	fb02 f303 	mul.w	r3, r2, r3
 8007ec0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	1e5a      	subs	r2, r3, #1
 8007ec6:	60fa      	str	r2, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d102      	bne.n	8007ed2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ed0:	e009      	b.n	8007ee6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f1      	beq.n	8007ec2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a06      	ldr	r2, [pc, #24]	; (8007efc <SDMMC_GetCmdError+0x58>)
 8007ee2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	24000000 	.word	0x24000000
 8007ef8:	10624dd3 	.word	0x10624dd3
 8007efc:	002000c5 	.word	0x002000c5

08007f00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007f04:	4904      	ldr	r1, [pc, #16]	; (8007f18 <MX_FATFS_Init+0x18>)
 8007f06:	4805      	ldr	r0, [pc, #20]	; (8007f1c <MX_FATFS_Init+0x1c>)
 8007f08:	f000 ffc0 	bl	8008e8c <FATFS_LinkDriver>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4b03      	ldr	r3, [pc, #12]	; (8007f20 <MX_FATFS_Init+0x20>)
 8007f12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f14:	bf00      	nop
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	240001a8 	.word	0x240001a8
 8007f1c:	0800a0dc 	.word	0x0800a0dc
 8007f20:	240001a4 	.word	0x240001a4

08007f24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007f2e:	f000 f879 	bl	8008024 <BSP_SD_IsDetected>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d001      	beq.n	8007f3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e012      	b.n	8007f62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007f3c:	480b      	ldr	r0, [pc, #44]	; (8007f6c <BSP_SD_Init+0x48>)
 8007f3e:	f7fc fd63 	bl	8004a08 <HAL_SD_Init>
 8007f42:	4603      	mov	r3, r0
 8007f44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007f4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007f50:	4806      	ldr	r0, [pc, #24]	; (8007f6c <BSP_SD_Init+0x48>)
 8007f52:	f7fd fc19 	bl	8005788 <HAL_SD_ConfigWideBusOperation>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007f60:	79fb      	ldrb	r3, [r7, #7]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	24000090 	.word	0x24000090

08007f70 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	68f9      	ldr	r1, [r7, #12]
 8007f8c:	4806      	ldr	r0, [pc, #24]	; (8007fa8 <BSP_SD_ReadBlocks+0x38>)
 8007f8e:	f7fc fe55 	bl	8004c3c <HAL_SD_ReadBlocks>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	24000090 	.word	0x24000090

08007fac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af02      	add	r7, sp, #8
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	68f9      	ldr	r1, [r7, #12]
 8007fc8:	4806      	ldr	r0, [pc, #24]	; (8007fe4 <BSP_SD_WriteBlocks+0x38>)
 8007fca:	f7fc ffc1 	bl	8004f50 <HAL_SD_WriteBlocks>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	24000090 	.word	0x24000090

08007fe8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007fec:	4805      	ldr	r0, [pc, #20]	; (8008004 <BSP_SD_GetCardState+0x1c>)
 8007fee:	f7fd fcdd 	bl	80059ac <HAL_SD_GetCardState>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	bf14      	ite	ne
 8007ff8:	2301      	movne	r3, #1
 8007ffa:	2300      	moveq	r3, #0
 8007ffc:	b2db      	uxtb	r3, r3
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	24000090 	.word	0x24000090

08008008 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	4803      	ldr	r0, [pc, #12]	; (8008020 <BSP_SD_GetCardInfo+0x18>)
 8008014:	f7fd fb8c 	bl	8005730 <HAL_SD_GetCardInfo>
}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	24000090 	.word	0x24000090

08008024 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800802a:	2301      	movs	r3, #1
 800802c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800802e:	f000 f80b 	bl	8008048 <BSP_PlatformIsDetected>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008038:	2300      	movs	r3, #0
 800803a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	b2db      	uxtb	r3, r3
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800804e:	2301      	movs	r3, #1
 8008050:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008052:	2110      	movs	r1, #16
 8008054:	4806      	ldr	r0, [pc, #24]	; (8008070 <BSP_PlatformIsDetected+0x28>)
 8008056:	f7f9 fb3f 	bl	80016d8 <HAL_GPIO_ReadPin>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008060:	2300      	movs	r3, #0
 8008062:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008064:	79fb      	ldrb	r3, [r7, #7]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	58020800 	.word	0x58020800

08008074 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <SD_CheckStatus+0x38>)
 8008080:	2201      	movs	r2, #1
 8008082:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008084:	f7ff ffb0 	bl	8007fe8 <BSP_SD_GetCardState>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d107      	bne.n	800809e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800808e:	4b07      	ldr	r3, [pc, #28]	; (80080ac <SD_CheckStatus+0x38>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f023 0301 	bic.w	r3, r3, #1
 8008098:	b2da      	uxtb	r2, r3
 800809a:	4b04      	ldr	r3, [pc, #16]	; (80080ac <SD_CheckStatus+0x38>)
 800809c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800809e:	4b03      	ldr	r3, [pc, #12]	; (80080ac <SD_CheckStatus+0x38>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	b2db      	uxtb	r3, r3
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	2400000d 	.word	0x2400000d

080080b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80080ba:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <SD_initialize+0x38>)
 80080bc:	2201      	movs	r2, #1
 80080be:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80080c0:	f7ff ff30 	bl	8007f24 <BSP_SD_Init>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d107      	bne.n	80080da <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff ffd1 	bl	8008074 <SD_CheckStatus>
 80080d2:	4603      	mov	r3, r0
 80080d4:	461a      	mov	r2, r3
 80080d6:	4b04      	ldr	r3, [pc, #16]	; (80080e8 <SD_initialize+0x38>)
 80080d8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80080da:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <SD_initialize+0x38>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b2db      	uxtb	r3, r3
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	2400000d 	.word	0x2400000d

080080ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7ff ffbb 	bl	8008074 <SD_CheckStatus>
 80080fe:	4603      	mov	r3, r0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	607a      	str	r2, [r7, #4]
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	4603      	mov	r3, r0
 8008116:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800811c:	f04f 33ff 	mov.w	r3, #4294967295
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	6879      	ldr	r1, [r7, #4]
 8008124:	68b8      	ldr	r0, [r7, #8]
 8008126:	f7ff ff23 	bl	8007f70 <BSP_SD_ReadBlocks>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d107      	bne.n	8008140 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008130:	bf00      	nop
 8008132:	f7ff ff59 	bl	8007fe8 <BSP_SD_GetCardState>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1fa      	bne.n	8008132 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008140:	7dfb      	ldrb	r3, [r7, #23]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b086      	sub	sp, #24
 800814e:	af00      	add	r7, sp, #0
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800815e:	f04f 33ff 	mov.w	r3, #4294967295
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	68b8      	ldr	r0, [r7, #8]
 8008168:	f7ff ff20 	bl	8007fac <BSP_SD_WriteBlocks>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d107      	bne.n	8008182 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8008172:	bf00      	nop
 8008174:	f7ff ff38 	bl	8007fe8 <BSP_SD_GetCardState>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1fa      	bne.n	8008174 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008182:	7dfb      	ldrb	r3, [r7, #23]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08c      	sub	sp, #48	; 0x30
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	603a      	str	r2, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
 8008198:	460b      	mov	r3, r1
 800819a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80081a2:	4b25      	ldr	r3, [pc, #148]	; (8008238 <SD_ioctl+0xac>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <SD_ioctl+0x28>
 80081b0:	2303      	movs	r3, #3
 80081b2:	e03c      	b.n	800822e <SD_ioctl+0xa2>

  switch (cmd)
 80081b4:	79bb      	ldrb	r3, [r7, #6]
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d834      	bhi.n	8008224 <SD_ioctl+0x98>
 80081ba:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <SD_ioctl+0x34>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081d1 	.word	0x080081d1
 80081c4:	080081d9 	.word	0x080081d9
 80081c8:	080081f1 	.word	0x080081f1
 80081cc:	0800820b 	.word	0x0800820b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80081d6:	e028      	b.n	800822a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80081d8:	f107 0308 	add.w	r3, r7, #8
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff ff13 	bl	8008008 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80081e2:	6a3a      	ldr	r2, [r7, #32]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80081ee:	e01c      	b.n	800822a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80081f0:	f107 0308 	add.w	r3, r7, #8
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff ff07 	bl	8008008 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008208:	e00f      	b.n	800822a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800820a:	f107 0308 	add.w	r3, r7, #8
 800820e:	4618      	mov	r0, r3
 8008210:	f7ff fefa 	bl	8008008 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	0a5a      	lsrs	r2, r3, #9
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008222:	e002      	b.n	800822a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008224:	2304      	movs	r3, #4
 8008226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800822a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800822e:	4618      	mov	r0, r3
 8008230:	3730      	adds	r7, #48	; 0x30
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	2400000d 	.word	0x2400000d

0800823c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	4a08      	ldr	r2, [pc, #32]	; (800826c <disk_status+0x30>)
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	79fa      	ldrb	r2, [r7, #7]
 8008254:	4905      	ldr	r1, [pc, #20]	; (800826c <disk_status+0x30>)
 8008256:	440a      	add	r2, r1
 8008258:	7a12      	ldrb	r2, [r2, #8]
 800825a:	4610      	mov	r0, r2
 800825c:	4798      	blx	r3
 800825e:	4603      	mov	r3, r0
 8008260:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	240001d4 	.word	0x240001d4

08008270 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800827e:	79fb      	ldrb	r3, [r7, #7]
 8008280:	4a0d      	ldr	r2, [pc, #52]	; (80082b8 <disk_initialize+0x48>)
 8008282:	5cd3      	ldrb	r3, [r2, r3]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d111      	bne.n	80082ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	4a0b      	ldr	r2, [pc, #44]	; (80082b8 <disk_initialize+0x48>)
 800828c:	2101      	movs	r1, #1
 800828e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008290:	79fb      	ldrb	r3, [r7, #7]
 8008292:	4a09      	ldr	r2, [pc, #36]	; (80082b8 <disk_initialize+0x48>)
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	79fa      	ldrb	r2, [r7, #7]
 800829e:	4906      	ldr	r1, [pc, #24]	; (80082b8 <disk_initialize+0x48>)
 80082a0:	440a      	add	r2, r1
 80082a2:	7a12      	ldrb	r2, [r2, #8]
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
 80082a8:	4603      	mov	r3, r0
 80082aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	240001d4 	.word	0x240001d4

080082bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	4603      	mov	r3, r0
 80082ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	4a0a      	ldr	r2, [pc, #40]	; (80082f8 <disk_read+0x3c>)
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	689c      	ldr	r4, [r3, #8]
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	4a07      	ldr	r2, [pc, #28]	; (80082f8 <disk_read+0x3c>)
 80082dc:	4413      	add	r3, r2
 80082de:	7a18      	ldrb	r0, [r3, #8]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	47a0      	blx	r4
 80082e8:	4603      	mov	r3, r0
 80082ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	371c      	adds	r7, #28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd90      	pop	{r4, r7, pc}
 80082f6:	bf00      	nop
 80082f8:	240001d4 	.word	0x240001d4

080082fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80082fc:	b590      	push	{r4, r7, lr}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	607a      	str	r2, [r7, #4]
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	4a0a      	ldr	r2, [pc, #40]	; (8008338 <disk_write+0x3c>)
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	68dc      	ldr	r4, [r3, #12]
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	4a07      	ldr	r2, [pc, #28]	; (8008338 <disk_write+0x3c>)
 800831c:	4413      	add	r3, r2
 800831e:	7a18      	ldrb	r0, [r3, #8]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	47a0      	blx	r4
 8008328:	4603      	mov	r3, r0
 800832a:	75fb      	strb	r3, [r7, #23]
  return res;
 800832c:	7dfb      	ldrb	r3, [r7, #23]
}
 800832e:	4618      	mov	r0, r3
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	bd90      	pop	{r4, r7, pc}
 8008336:	bf00      	nop
 8008338:	240001d4 	.word	0x240001d4

0800833c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3301      	adds	r3, #1
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800834c:	89fb      	ldrh	r3, [r7, #14]
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	b21a      	sxth	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	b21b      	sxth	r3, r3
 8008358:	4313      	orrs	r3, r2
 800835a:	b21b      	sxth	r3, r3
 800835c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800835e:	89fb      	ldrh	r3, [r7, #14]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3303      	adds	r3, #3
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	3202      	adds	r2, #2
 8008384:	7812      	ldrb	r2, [r2, #0]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	3201      	adds	r2, #1
 8008392:	7812      	ldrb	r2, [r2, #0]
 8008394:	4313      	orrs	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	7812      	ldrb	r2, [r2, #0]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80083a4:	68fb      	ldr	r3, [r7, #12]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
	...

080083b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	e010      	b.n	80083e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80083c2:	4a0d      	ldr	r2, [pc, #52]	; (80083f8 <clear_lock+0x44>)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	011b      	lsls	r3, r3, #4
 80083c8:	4413      	add	r3, r2
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d105      	bne.n	80083de <clear_lock+0x2a>
 80083d2:	4a09      	ldr	r2, [pc, #36]	; (80083f8 <clear_lock+0x44>)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	4413      	add	r3, r2
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d9eb      	bls.n	80083c2 <clear_lock+0xe>
	}
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	240001b4 	.word	0x240001b4

080083fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	78db      	ldrb	r3, [r3, #3]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d034      	beq.n	800847a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7858      	ldrb	r0, [r3, #1]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008420:	2301      	movs	r3, #1
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	f7ff ff6a 	bl	80082fc <disk_write>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <sync_window+0x38>
			res = FR_DISK_ERR;
 800842e:	2301      	movs	r3, #1
 8008430:	73fb      	strb	r3, [r7, #15]
 8008432:	e022      	b.n	800847a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	1ad2      	subs	r2, r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	429a      	cmp	r2, r3
 8008448:	d217      	bcs.n	800847a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	789b      	ldrb	r3, [r3, #2]
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	e010      	b.n	8008474 <sync_window+0x78>
					wsect += fs->fsize;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4413      	add	r3, r2
 800845a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7858      	ldrb	r0, [r3, #1]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008466:	2301      	movs	r3, #1
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	f7ff ff47 	bl	80082fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	3b01      	subs	r3, #1
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d8eb      	bhi.n	8008452 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800847a:	7bfb      	ldrb	r3, [r7, #15]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d01b      	beq.n	80084d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff ffad 	bl	80083fc <sync_window>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d113      	bne.n	80084d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	7858      	ldrb	r0, [r3, #1]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084b6:	2301      	movs	r3, #1
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	f7ff feff 	bl	80082bc <disk_read>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d004      	beq.n	80084ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80084c4:	f04f 33ff 	mov.w	r3, #4294967295
 80084c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d904      	bls.n	80084fe <get_fat+0x20>
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d302      	bcc.n	8008504 <get_fat+0x26>
		val = 1;	/* Internal error */
 80084fe:	2301      	movs	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	e08f      	b.n	8008624 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008504:	f04f 33ff 	mov.w	r3, #4294967295
 8008508:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b03      	cmp	r3, #3
 8008510:	d062      	beq.n	80085d8 <get_fat+0xfa>
 8008512:	2b03      	cmp	r3, #3
 8008514:	dc7c      	bgt.n	8008610 <get_fat+0x132>
 8008516:	2b01      	cmp	r3, #1
 8008518:	d002      	beq.n	8008520 <get_fat+0x42>
 800851a:	2b02      	cmp	r3, #2
 800851c:	d042      	beq.n	80085a4 <get_fat+0xc6>
 800851e:	e077      	b.n	8008610 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	085b      	lsrs	r3, r3, #1
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	6a1a      	ldr	r2, [r3, #32]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	0a5b      	lsrs	r3, r3, #9
 8008536:	4413      	add	r3, r2
 8008538:	4619      	mov	r1, r3
 800853a:	6938      	ldr	r0, [r7, #16]
 800853c:	f7ff ffa2 	bl	8008484 <move_window>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d167      	bne.n	8008616 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	60fa      	str	r2, [r7, #12]
 800854c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	4413      	add	r3, r2
 8008554:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008558:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	6a1a      	ldr	r2, [r3, #32]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	0a5b      	lsrs	r3, r3, #9
 8008562:	4413      	add	r3, r2
 8008564:	4619      	mov	r1, r3
 8008566:	6938      	ldr	r0, [r7, #16]
 8008568:	f7ff ff8c 	bl	8008484 <move_window>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d153      	bne.n	800861a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4413      	add	r3, r2
 800857c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	461a      	mov	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4313      	orrs	r3, r2
 8008588:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <get_fat+0xbc>
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	091b      	lsrs	r3, r3, #4
 8008598:	e002      	b.n	80085a0 <get_fat+0xc2>
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085a0:	617b      	str	r3, [r7, #20]
			break;
 80085a2:	e03f      	b.n	8008624 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	6a1a      	ldr	r2, [r3, #32]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	0a1b      	lsrs	r3, r3, #8
 80085ac:	4413      	add	r3, r2
 80085ae:	4619      	mov	r1, r3
 80085b0:	6938      	ldr	r0, [r7, #16]
 80085b2:	f7ff ff67 	bl	8008484 <move_window>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d130      	bne.n	800861e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80085ca:	4413      	add	r3, r2
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7ff feb5 	bl	800833c <ld_word>
 80085d2:	4603      	mov	r3, r0
 80085d4:	617b      	str	r3, [r7, #20]
			break;
 80085d6:	e025      	b.n	8008624 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	6a1a      	ldr	r2, [r3, #32]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	09db      	lsrs	r3, r3, #7
 80085e0:	4413      	add	r3, r2
 80085e2:	4619      	mov	r1, r3
 80085e4:	6938      	ldr	r0, [r7, #16]
 80085e6:	f7ff ff4d 	bl	8008484 <move_window>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d118      	bne.n	8008622 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80085fe:	4413      	add	r3, r2
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff feb3 	bl	800836c <ld_dword>
 8008606:	4603      	mov	r3, r0
 8008608:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800860c:	617b      	str	r3, [r7, #20]
			break;
 800860e:	e009      	b.n	8008624 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008610:	2301      	movs	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	e006      	b.n	8008624 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008616:	bf00      	nop
 8008618:	e004      	b.n	8008624 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800861a:	bf00      	nop
 800861c:	e002      	b.n	8008624 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800861e:	bf00      	nop
 8008620:	e000      	b.n	8008624 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008622:	bf00      	nop
		}
	}

	return val;
 8008624:	697b      	ldr	r3, [r7, #20]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800862e:	b480      	push	{r7}
 8008630:	b087      	sub	sp, #28
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008636:	f04f 33ff 	mov.w	r3, #4294967295
 800863a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d031      	beq.n	80086a8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	617b      	str	r3, [r7, #20]
 800864a:	e002      	b.n	8008652 <get_ldnumber+0x24>
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	3301      	adds	r3, #1
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b20      	cmp	r3, #32
 8008658:	d903      	bls.n	8008662 <get_ldnumber+0x34>
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b3a      	cmp	r3, #58	; 0x3a
 8008660:	d1f4      	bne.n	800864c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b3a      	cmp	r3, #58	; 0x3a
 8008668:	d11c      	bne.n	80086a4 <get_ldnumber+0x76>
			tp = *path;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	60fa      	str	r2, [r7, #12]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	3b30      	subs	r3, #48	; 0x30
 800867a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2b09      	cmp	r3, #9
 8008680:	d80e      	bhi.n	80086a0 <get_ldnumber+0x72>
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	429a      	cmp	r2, r3
 8008688:	d10a      	bne.n	80086a0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d107      	bne.n	80086a0 <get_ldnumber+0x72>
					vol = (int)i;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	3301      	adds	r3, #1
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	e002      	b.n	80086aa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80086a4:	2300      	movs	r3, #0
 80086a6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80086a8:	693b      	ldr	r3, [r7, #16]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	70da      	strb	r2, [r3, #3]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f04f 32ff 	mov.w	r2, #4294967295
 80086ce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff fed6 	bl	8008484 <move_window>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <check_fs+0x2a>
 80086de:	2304      	movs	r3, #4
 80086e0:	e038      	b.n	8008754 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3330      	adds	r3, #48	; 0x30
 80086e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff fe26 	bl	800833c <ld_word>
 80086f0:	4603      	mov	r3, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d001      	beq.n	8008700 <check_fs+0x48>
 80086fc:	2303      	movs	r3, #3
 80086fe:	e029      	b.n	8008754 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008706:	2be9      	cmp	r3, #233	; 0xe9
 8008708:	d009      	beq.n	800871e <check_fs+0x66>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008710:	2beb      	cmp	r3, #235	; 0xeb
 8008712:	d11e      	bne.n	8008752 <check_fs+0x9a>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800871a:	2b90      	cmp	r3, #144	; 0x90
 800871c:	d119      	bne.n	8008752 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3330      	adds	r3, #48	; 0x30
 8008722:	3336      	adds	r3, #54	; 0x36
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fe21 	bl	800836c <ld_dword>
 800872a:	4603      	mov	r3, r0
 800872c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008730:	4a0a      	ldr	r2, [pc, #40]	; (800875c <check_fs+0xa4>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d101      	bne.n	800873a <check_fs+0x82>
 8008736:	2300      	movs	r3, #0
 8008738:	e00c      	b.n	8008754 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3330      	adds	r3, #48	; 0x30
 800873e:	3352      	adds	r3, #82	; 0x52
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff fe13 	bl	800836c <ld_dword>
 8008746:	4603      	mov	r3, r0
 8008748:	4a05      	ldr	r2, [pc, #20]	; (8008760 <check_fs+0xa8>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d101      	bne.n	8008752 <check_fs+0x9a>
 800874e:	2300      	movs	r3, #0
 8008750:	e000      	b.n	8008754 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008752:	2302      	movs	r3, #2
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	00544146 	.word	0x00544146
 8008760:	33544146 	.word	0x33544146

08008764 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b096      	sub	sp, #88	; 0x58
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	4613      	mov	r3, r2
 8008770:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f7ff ff58 	bl	800862e <get_ldnumber>
 800877e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008782:	2b00      	cmp	r3, #0
 8008784:	da01      	bge.n	800878a <find_volume+0x26>
 8008786:	230b      	movs	r3, #11
 8008788:	e22d      	b.n	8008be6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800878a:	4aa1      	ldr	r2, [pc, #644]	; (8008a10 <find_volume+0x2ac>)
 800878c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008792:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <find_volume+0x3a>
 800879a:	230c      	movs	r3, #12
 800879c:	e223      	b.n	8008be6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	f023 0301 	bic.w	r3, r3, #1
 80087aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d01a      	beq.n	80087ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	785b      	ldrb	r3, [r3, #1]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fd3f 	bl	800823c <disk_status>
 80087be:	4603      	mov	r3, r0
 80087c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80087c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10c      	bne.n	80087ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d007      	beq.n	80087e6 <find_volume+0x82>
 80087d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80087e2:	230a      	movs	r3, #10
 80087e4:	e1ff      	b.n	8008be6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80087e6:	2300      	movs	r3, #0
 80087e8:	e1fd      	b.n	8008be6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80087f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80087f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fa:	785b      	ldrb	r3, [r3, #1]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff fd37 	bl	8008270 <disk_initialize>
 8008802:	4603      	mov	r3, r0
 8008804:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008814:	2303      	movs	r3, #3
 8008816:	e1e6      	b.n	8008be6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <find_volume+0xca>
 800881e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008822:	f003 0304 	and.w	r3, r3, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800882a:	230a      	movs	r3, #10
 800882c:	e1db      	b.n	8008be6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008832:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008836:	f7ff ff3f 	bl	80086b8 <check_fs>
 800883a:	4603      	mov	r3, r0
 800883c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008844:	2b02      	cmp	r3, #2
 8008846:	d149      	bne.n	80088dc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008848:	2300      	movs	r3, #0
 800884a:	643b      	str	r3, [r7, #64]	; 0x40
 800884c:	e01e      	b.n	800888c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800885c:	4413      	add	r3, r2
 800885e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	3304      	adds	r3, #4
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d006      	beq.n	8008878 <find_volume+0x114>
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	3308      	adds	r3, #8
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fd7c 	bl	800836c <ld_dword>
 8008874:	4602      	mov	r2, r0
 8008876:	e000      	b.n	800887a <find_volume+0x116>
 8008878:	2200      	movs	r2, #0
 800887a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	3358      	adds	r3, #88	; 0x58
 8008880:	443b      	add	r3, r7
 8008882:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008888:	3301      	adds	r3, #1
 800888a:	643b      	str	r3, [r7, #64]	; 0x40
 800888c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800888e:	2b03      	cmp	r3, #3
 8008890:	d9dd      	bls.n	800884e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008892:	2300      	movs	r3, #0
 8008894:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <find_volume+0x13e>
 800889c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889e:	3b01      	subs	r3, #1
 80088a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80088a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	3358      	adds	r3, #88	; 0x58
 80088a8:	443b      	add	r3, r7
 80088aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80088ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80088b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d005      	beq.n	80088c2 <find_volume+0x15e>
 80088b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088ba:	f7ff fefd 	bl	80086b8 <check_fs>
 80088be:	4603      	mov	r3, r0
 80088c0:	e000      	b.n	80088c4 <find_volume+0x160>
 80088c2:	2303      	movs	r3, #3
 80088c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80088c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d905      	bls.n	80088dc <find_volume+0x178>
 80088d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d2:	3301      	adds	r3, #1
 80088d4:	643b      	str	r3, [r7, #64]	; 0x40
 80088d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d9e2      	bls.n	80088a2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80088dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	d101      	bne.n	80088e8 <find_volume+0x184>
 80088e4:	2301      	movs	r3, #1
 80088e6:	e17e      	b.n	8008be6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80088e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d901      	bls.n	80088f4 <find_volume+0x190>
 80088f0:	230d      	movs	r3, #13
 80088f2:	e178      	b.n	8008be6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	3330      	adds	r3, #48	; 0x30
 80088f8:	330b      	adds	r3, #11
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7ff fd1e 	bl	800833c <ld_word>
 8008900:	4603      	mov	r3, r0
 8008902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008906:	d001      	beq.n	800890c <find_volume+0x1a8>
 8008908:	230d      	movs	r3, #13
 800890a:	e16c      	b.n	8008be6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	3330      	adds	r3, #48	; 0x30
 8008910:	3316      	adds	r3, #22
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fd12 	bl	800833c <ld_word>
 8008918:	4603      	mov	r3, r0
 800891a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800891c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <find_volume+0x1cc>
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	3330      	adds	r3, #48	; 0x30
 8008926:	3324      	adds	r3, #36	; 0x24
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff fd1f 	bl	800836c <ld_dword>
 800892e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008934:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	789b      	ldrb	r3, [r3, #2]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d005      	beq.n	8008954 <find_volume+0x1f0>
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	789b      	ldrb	r3, [r3, #2]
 800894c:	2b02      	cmp	r3, #2
 800894e:	d001      	beq.n	8008954 <find_volume+0x1f0>
 8008950:	230d      	movs	r3, #13
 8008952:	e148      	b.n	8008be6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	789b      	ldrb	r3, [r3, #2]
 8008958:	461a      	mov	r2, r3
 800895a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800895c:	fb02 f303 	mul.w	r3, r2, r3
 8008960:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008968:	b29a      	uxth	r2, r3
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	895b      	ldrh	r3, [r3, #10]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d008      	beq.n	8008988 <find_volume+0x224>
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	895b      	ldrh	r3, [r3, #10]
 800897a:	461a      	mov	r2, r3
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	895b      	ldrh	r3, [r3, #10]
 8008980:	3b01      	subs	r3, #1
 8008982:	4013      	ands	r3, r2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <find_volume+0x228>
 8008988:	230d      	movs	r3, #13
 800898a:	e12c      	b.n	8008be6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	3330      	adds	r3, #48	; 0x30
 8008990:	3311      	adds	r3, #17
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff fcd2 	bl	800833c <ld_word>
 8008998:	4603      	mov	r3, r0
 800899a:	461a      	mov	r2, r3
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	891b      	ldrh	r3, [r3, #8]
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <find_volume+0x24e>
 80089ae:	230d      	movs	r3, #13
 80089b0:	e119      	b.n	8008be6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	3330      	adds	r3, #48	; 0x30
 80089b6:	3313      	adds	r3, #19
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7ff fcbf 	bl	800833c <ld_word>
 80089be:	4603      	mov	r3, r0
 80089c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80089c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d106      	bne.n	80089d6 <find_volume+0x272>
 80089c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ca:	3330      	adds	r3, #48	; 0x30
 80089cc:	3320      	adds	r3, #32
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7ff fccc 	bl	800836c <ld_dword>
 80089d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	3330      	adds	r3, #48	; 0x30
 80089da:	330e      	adds	r3, #14
 80089dc:	4618      	mov	r0, r3
 80089de:	f7ff fcad 	bl	800833c <ld_word>
 80089e2:	4603      	mov	r3, r0
 80089e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80089e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <find_volume+0x28c>
 80089ec:	230d      	movs	r3, #13
 80089ee:	e0fa      	b.n	8008be6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80089f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80089f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f4:	4413      	add	r3, r2
 80089f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089f8:	8912      	ldrh	r2, [r2, #8]
 80089fa:	0912      	lsrs	r2, r2, #4
 80089fc:	b292      	uxth	r2, r2
 80089fe:	4413      	add	r3, r2
 8008a00:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d204      	bcs.n	8008a14 <find_volume+0x2b0>
 8008a0a:	230d      	movs	r3, #13
 8008a0c:	e0eb      	b.n	8008be6 <find_volume+0x482>
 8008a0e:	bf00      	nop
 8008a10:	240001ac 	.word	0x240001ac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a1c:	8952      	ldrh	r2, [r2, #10]
 8008a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a22:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <find_volume+0x2ca>
 8008a2a:	230d      	movs	r3, #13
 8008a2c:	e0db      	b.n	8008be6 <find_volume+0x482>
		fmt = FS_FAT32;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d802      	bhi.n	8008a44 <find_volume+0x2e0>
 8008a3e:	2302      	movs	r3, #2
 8008a40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d802      	bhi.n	8008a54 <find_volume+0x2f0>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	1c9a      	adds	r2, r3, #2
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a60:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008a62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a66:	441a      	add	r2, r3
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008a6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	441a      	add	r2, r3
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008a76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d11e      	bne.n	8008abc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	3330      	adds	r3, #48	; 0x30
 8008a82:	332a      	adds	r3, #42	; 0x2a
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff fc59 	bl	800833c <ld_word>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <find_volume+0x330>
 8008a90:	230d      	movs	r3, #13
 8008a92:	e0a8      	b.n	8008be6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	891b      	ldrh	r3, [r3, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <find_volume+0x33c>
 8008a9c:	230d      	movs	r3, #13
 8008a9e:	e0a2      	b.n	8008be6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa2:	3330      	adds	r3, #48	; 0x30
 8008aa4:	332c      	adds	r3, #44	; 0x2c
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff fc60 	bl	800836c <ld_dword>
 8008aac:	4602      	mov	r2, r0
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8008aba:	e01f      	b.n	8008afc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	891b      	ldrh	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <find_volume+0x364>
 8008ac4:	230d      	movs	r3, #13
 8008ac6:	e08e      	b.n	8008be6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	6a1a      	ldr	r2, [r3, #32]
 8008acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ace:	441a      	add	r2, r3
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d103      	bne.n	8008ae4 <find_volume+0x380>
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	e00a      	b.n	8008afa <find_volume+0x396>
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	695a      	ldr	r2, [r3, #20]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	4413      	add	r3, r2
 8008aee:	085a      	lsrs	r2, r3, #1
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008afa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	699a      	ldr	r2, [r3, #24]
 8008b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b02:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008b06:	0a5b      	lsrs	r3, r3, #9
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d201      	bcs.n	8008b10 <find_volume+0x3ac>
 8008b0c:	230d      	movs	r3, #13
 8008b0e:	e06a      	b.n	8008be6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	f04f 32ff 	mov.w	r2, #4294967295
 8008b16:	611a      	str	r2, [r3, #16]
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	2280      	movs	r2, #128	; 0x80
 8008b24:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008b26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d149      	bne.n	8008bc2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	3330      	adds	r3, #48	; 0x30
 8008b32:	3330      	adds	r3, #48	; 0x30
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7ff fc01 	bl	800833c <ld_word>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d140      	bne.n	8008bc2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b42:	3301      	adds	r3, #1
 8008b44:	4619      	mov	r1, r3
 8008b46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b48:	f7ff fc9c 	bl	8008484 <move_window>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d137      	bne.n	8008bc2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b54:	2200      	movs	r2, #0
 8008b56:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	3330      	adds	r3, #48	; 0x30
 8008b5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fbeb 	bl	800833c <ld_word>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d127      	bne.n	8008bc2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b74:	3330      	adds	r3, #48	; 0x30
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff fbf8 	bl	800836c <ld_dword>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	4a1c      	ldr	r2, [pc, #112]	; (8008bf0 <find_volume+0x48c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d11e      	bne.n	8008bc2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	3330      	adds	r3, #48	; 0x30
 8008b88:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff fbed 	bl	800836c <ld_dword>
 8008b92:	4603      	mov	r3, r0
 8008b94:	4a17      	ldr	r2, [pc, #92]	; (8008bf4 <find_volume+0x490>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d113      	bne.n	8008bc2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9c:	3330      	adds	r3, #48	; 0x30
 8008b9e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff fbe2 	bl	800836c <ld_dword>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	3330      	adds	r3, #48	; 0x30
 8008bb2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7ff fbd8 	bl	800836c <ld_dword>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008bc8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008bca:	4b0b      	ldr	r3, [pc, #44]	; (8008bf8 <find_volume+0x494>)
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <find_volume+0x494>)
 8008bd4:	801a      	strh	r2, [r3, #0]
 8008bd6:	4b08      	ldr	r3, [pc, #32]	; (8008bf8 <find_volume+0x494>)
 8008bd8:	881a      	ldrh	r2, [r3, #0]
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008bde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008be0:	f7ff fbe8 	bl	80083b4 <clear_lock>
#endif
	return FR_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3758      	adds	r7, #88	; 0x58
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	41615252 	.word	0x41615252
 8008bf4:	61417272 	.word	0x61417272
 8008bf8:	240001b0 	.word	0x240001b0

08008bfc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	4613      	mov	r3, r2
 8008c08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008c0e:	f107 0310 	add.w	r3, r7, #16
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff fd0b 	bl	800862e <get_ldnumber>
 8008c18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	da01      	bge.n	8008c24 <f_mount+0x28>
 8008c20:	230b      	movs	r3, #11
 8008c22:	e02b      	b.n	8008c7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c24:	4a17      	ldr	r2, [pc, #92]	; (8008c84 <f_mount+0x88>)
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008c34:	69b8      	ldr	r0, [r7, #24]
 8008c36:	f7ff fbbd 	bl	80083b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	490d      	ldr	r1, [pc, #52]	; (8008c84 <f_mount+0x88>)
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <f_mount+0x66>
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d001      	beq.n	8008c66 <f_mount+0x6a>
 8008c62:	2300      	movs	r3, #0
 8008c64:	e00a      	b.n	8008c7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c66:	f107 010c 	add.w	r1, r7, #12
 8008c6a:	f107 0308 	add.w	r3, r7, #8
 8008c6e:	2200      	movs	r2, #0
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff fd77 	bl	8008764 <find_volume>
 8008c76:	4603      	mov	r3, r0
 8008c78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3720      	adds	r7, #32
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	240001ac 	.word	0x240001ac

08008c88 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b092      	sub	sp, #72	; 0x48
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008c94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008c98:	f107 030c 	add.w	r3, r7, #12
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff fd60 	bl	8008764 <find_volume>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8008caa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f040 8099 	bne.w	8008de6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	691a      	ldr	r2, [r3, #16]
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	3b02      	subs	r3, #2
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d804      	bhi.n	8008cd2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	691a      	ldr	r2, [r3, #16]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	e089      	b.n	8008de6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d128      	bne.n	8008d30 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008ce6:	f107 0314 	add.w	r3, r7, #20
 8008cea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff fbf6 	bl	80084de <get_fat>
 8008cf2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfa:	d103      	bne.n	8008d04 <f_getfree+0x7c>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d02:	e063      	b.n	8008dcc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d103      	bne.n	8008d12 <f_getfree+0x8a>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d10:	e05c      	b.n	8008dcc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d102      	bne.n	8008d1e <f_getfree+0x96>
 8008d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d20:	3301      	adds	r3, #1
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d3db      	bcc.n	8008ce6 <f_getfree+0x5e>
 8008d2e:	e04d      	b.n	8008dcc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d40:	2300      	movs	r3, #0
 8008d42:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8008d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d113      	bne.n	8008d72 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	63ba      	str	r2, [r7, #56]	; 0x38
 8008d52:	4619      	mov	r1, r3
 8008d54:	f7ff fb96 	bl	8008484 <move_window>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8008d5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d131      	bne.n	8008dca <f_getfree+0x142>
							p = fs->win;
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	3330      	adds	r3, #48	; 0x30
 8008d6a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8008d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d10f      	bne.n	8008d9a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008d7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d7c:	f7ff fade 	bl	800833c <ld_word>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <f_getfree+0x104>
 8008d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d88:	3301      	adds	r3, #1
 8008d8a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	3302      	adds	r3, #2
 8008d90:	633b      	str	r3, [r7, #48]	; 0x30
 8008d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d94:	3b02      	subs	r3, #2
 8008d96:	637b      	str	r3, [r7, #52]	; 0x34
 8008d98:	e010      	b.n	8008dbc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d9c:	f7ff fae6 	bl	800836c <ld_dword>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d102      	bne.n	8008db0 <f_getfree+0x128>
 8008daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dac:	3301      	adds	r3, #1
 8008dae:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	3304      	adds	r3, #4
 8008db4:	633b      	str	r3, [r7, #48]	; 0x30
 8008db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db8:	3b04      	subs	r3, #4
 8008dba:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1bd      	bne.n	8008d44 <f_getfree+0xbc>
 8008dc8:	e000      	b.n	8008dcc <f_getfree+0x144>
							if (res != FR_OK) break;
 8008dca:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dd0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dd6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	791a      	ldrb	r2, [r3, #4]
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	f042 0201 	orr.w	r2, r2, #1
 8008de2:	b2d2      	uxtb	r2, r2
 8008de4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008de6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3748      	adds	r7, #72	; 0x48
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008e02:	2301      	movs	r3, #1
 8008e04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008e0a:	4b1f      	ldr	r3, [pc, #124]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e0c:	7a5b      	ldrb	r3, [r3, #9]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d131      	bne.n	8008e78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008e14:	4b1c      	ldr	r3, [pc, #112]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e16:	7a5b      	ldrb	r3, [r3, #9]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4b1a      	ldr	r3, [pc, #104]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e1e:	2100      	movs	r1, #0
 8008e20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008e22:	4b19      	ldr	r3, [pc, #100]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e24:	7a5b      	ldrb	r3, [r3, #9]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008e32:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e34:	7a5b      	ldrb	r3, [r3, #9]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b13      	ldr	r3, [pc, #76]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e3c:	4413      	add	r3, r2
 8008e3e:	79fa      	ldrb	r2, [r7, #7]
 8008e40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008e42:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e44:	7a5b      	ldrb	r3, [r3, #9]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	1c5a      	adds	r2, r3, #1
 8008e4a:	b2d1      	uxtb	r1, r2
 8008e4c:	4a0e      	ldr	r2, [pc, #56]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e4e:	7251      	strb	r1, [r2, #9]
 8008e50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008e52:	7dbb      	ldrb	r3, [r7, #22]
 8008e54:	3330      	adds	r3, #48	; 0x30
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	223a      	movs	r2, #58	; 0x3a
 8008e62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	3302      	adds	r3, #2
 8008e68:	222f      	movs	r2, #47	; 0x2f
 8008e6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	3303      	adds	r3, #3
 8008e70:	2200      	movs	r2, #0
 8008e72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	240001d4 	.word	0x240001d4

08008e8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e96:	2200      	movs	r2, #0
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff ffaa 	bl	8008df4 <FATFS_LinkDriverEx>
 8008ea0:	4603      	mov	r3, r0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <__errno>:
 8008eac:	4b01      	ldr	r3, [pc, #4]	; (8008eb4 <__errno+0x8>)
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	24000010 	.word	0x24000010

08008eb8 <__libc_init_array>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	4d0d      	ldr	r5, [pc, #52]	; (8008ef0 <__libc_init_array+0x38>)
 8008ebc:	4c0d      	ldr	r4, [pc, #52]	; (8008ef4 <__libc_init_array+0x3c>)
 8008ebe:	1b64      	subs	r4, r4, r5
 8008ec0:	10a4      	asrs	r4, r4, #2
 8008ec2:	2600      	movs	r6, #0
 8008ec4:	42a6      	cmp	r6, r4
 8008ec6:	d109      	bne.n	8008edc <__libc_init_array+0x24>
 8008ec8:	4d0b      	ldr	r5, [pc, #44]	; (8008ef8 <__libc_init_array+0x40>)
 8008eca:	4c0c      	ldr	r4, [pc, #48]	; (8008efc <__libc_init_array+0x44>)
 8008ecc:	f001 f882 	bl	8009fd4 <_init>
 8008ed0:	1b64      	subs	r4, r4, r5
 8008ed2:	10a4      	asrs	r4, r4, #2
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	42a6      	cmp	r6, r4
 8008ed8:	d105      	bne.n	8008ee6 <__libc_init_array+0x2e>
 8008eda:	bd70      	pop	{r4, r5, r6, pc}
 8008edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee0:	4798      	blx	r3
 8008ee2:	3601      	adds	r6, #1
 8008ee4:	e7ee      	b.n	8008ec4 <__libc_init_array+0xc>
 8008ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eea:	4798      	blx	r3
 8008eec:	3601      	adds	r6, #1
 8008eee:	e7f2      	b.n	8008ed6 <__libc_init_array+0x1e>
 8008ef0:	0800a190 	.word	0x0800a190
 8008ef4:	0800a190 	.word	0x0800a190
 8008ef8:	0800a190 	.word	0x0800a190
 8008efc:	0800a194 	.word	0x0800a194

08008f00 <memset>:
 8008f00:	4402      	add	r2, r0
 8008f02:	4603      	mov	r3, r0
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d100      	bne.n	8008f0a <memset+0xa>
 8008f08:	4770      	bx	lr
 8008f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f0e:	e7f9      	b.n	8008f04 <memset+0x4>

08008f10 <iprintf>:
 8008f10:	b40f      	push	{r0, r1, r2, r3}
 8008f12:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <iprintf+0x2c>)
 8008f14:	b513      	push	{r0, r1, r4, lr}
 8008f16:	681c      	ldr	r4, [r3, #0]
 8008f18:	b124      	cbz	r4, 8008f24 <iprintf+0x14>
 8008f1a:	69a3      	ldr	r3, [r4, #24]
 8008f1c:	b913      	cbnz	r3, 8008f24 <iprintf+0x14>
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fa74 	bl	800940c <__sinit>
 8008f24:	ab05      	add	r3, sp, #20
 8008f26:	9a04      	ldr	r2, [sp, #16]
 8008f28:	68a1      	ldr	r1, [r4, #8]
 8008f2a:	9301      	str	r3, [sp, #4]
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 fc7d 	bl	800982c <_vfiprintf_r>
 8008f32:	b002      	add	sp, #8
 8008f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f38:	b004      	add	sp, #16
 8008f3a:	4770      	bx	lr
 8008f3c:	24000010 	.word	0x24000010

08008f40 <putchar>:
 8008f40:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <putchar+0x28>)
 8008f42:	b513      	push	{r0, r1, r4, lr}
 8008f44:	681c      	ldr	r4, [r3, #0]
 8008f46:	4601      	mov	r1, r0
 8008f48:	b134      	cbz	r4, 8008f58 <putchar+0x18>
 8008f4a:	69a3      	ldr	r3, [r4, #24]
 8008f4c:	b923      	cbnz	r3, 8008f58 <putchar+0x18>
 8008f4e:	9001      	str	r0, [sp, #4]
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 fa5b 	bl	800940c <__sinit>
 8008f56:	9901      	ldr	r1, [sp, #4]
 8008f58:	68a2      	ldr	r2, [r4, #8]
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	b002      	add	sp, #8
 8008f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f62:	f000 bf27 	b.w	8009db4 <_putc_r>
 8008f66:	bf00      	nop
 8008f68:	24000010 	.word	0x24000010

08008f6c <_puts_r>:
 8008f6c:	b570      	push	{r4, r5, r6, lr}
 8008f6e:	460e      	mov	r6, r1
 8008f70:	4605      	mov	r5, r0
 8008f72:	b118      	cbz	r0, 8008f7c <_puts_r+0x10>
 8008f74:	6983      	ldr	r3, [r0, #24]
 8008f76:	b90b      	cbnz	r3, 8008f7c <_puts_r+0x10>
 8008f78:	f000 fa48 	bl	800940c <__sinit>
 8008f7c:	69ab      	ldr	r3, [r5, #24]
 8008f7e:	68ac      	ldr	r4, [r5, #8]
 8008f80:	b913      	cbnz	r3, 8008f88 <_puts_r+0x1c>
 8008f82:	4628      	mov	r0, r5
 8008f84:	f000 fa42 	bl	800940c <__sinit>
 8008f88:	4b2c      	ldr	r3, [pc, #176]	; (800903c <_puts_r+0xd0>)
 8008f8a:	429c      	cmp	r4, r3
 8008f8c:	d120      	bne.n	8008fd0 <_puts_r+0x64>
 8008f8e:	686c      	ldr	r4, [r5, #4]
 8008f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f92:	07db      	lsls	r3, r3, #31
 8008f94:	d405      	bmi.n	8008fa2 <_puts_r+0x36>
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	0598      	lsls	r0, r3, #22
 8008f9a:	d402      	bmi.n	8008fa2 <_puts_r+0x36>
 8008f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f9e:	f000 fad3 	bl	8009548 <__retarget_lock_acquire_recursive>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	0719      	lsls	r1, r3, #28
 8008fa6:	d51d      	bpl.n	8008fe4 <_puts_r+0x78>
 8008fa8:	6923      	ldr	r3, [r4, #16]
 8008faa:	b1db      	cbz	r3, 8008fe4 <_puts_r+0x78>
 8008fac:	3e01      	subs	r6, #1
 8008fae:	68a3      	ldr	r3, [r4, #8]
 8008fb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	60a3      	str	r3, [r4, #8]
 8008fb8:	bb39      	cbnz	r1, 800900a <_puts_r+0x9e>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da38      	bge.n	8009030 <_puts_r+0xc4>
 8008fbe:	4622      	mov	r2, r4
 8008fc0:	210a      	movs	r1, #10
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 f848 	bl	8009058 <__swbuf_r>
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d011      	beq.n	8008ff0 <_puts_r+0x84>
 8008fcc:	250a      	movs	r5, #10
 8008fce:	e011      	b.n	8008ff4 <_puts_r+0x88>
 8008fd0:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <_puts_r+0xd4>)
 8008fd2:	429c      	cmp	r4, r3
 8008fd4:	d101      	bne.n	8008fda <_puts_r+0x6e>
 8008fd6:	68ac      	ldr	r4, [r5, #8]
 8008fd8:	e7da      	b.n	8008f90 <_puts_r+0x24>
 8008fda:	4b1a      	ldr	r3, [pc, #104]	; (8009044 <_puts_r+0xd8>)
 8008fdc:	429c      	cmp	r4, r3
 8008fde:	bf08      	it	eq
 8008fe0:	68ec      	ldreq	r4, [r5, #12]
 8008fe2:	e7d5      	b.n	8008f90 <_puts_r+0x24>
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 f888 	bl	80090fc <__swsetup_r>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d0dd      	beq.n	8008fac <_puts_r+0x40>
 8008ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8008ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ff6:	07da      	lsls	r2, r3, #31
 8008ff8:	d405      	bmi.n	8009006 <_puts_r+0x9a>
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	059b      	lsls	r3, r3, #22
 8008ffe:	d402      	bmi.n	8009006 <_puts_r+0x9a>
 8009000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009002:	f000 faa2 	bl	800954a <__retarget_lock_release_recursive>
 8009006:	4628      	mov	r0, r5
 8009008:	bd70      	pop	{r4, r5, r6, pc}
 800900a:	2b00      	cmp	r3, #0
 800900c:	da04      	bge.n	8009018 <_puts_r+0xac>
 800900e:	69a2      	ldr	r2, [r4, #24]
 8009010:	429a      	cmp	r2, r3
 8009012:	dc06      	bgt.n	8009022 <_puts_r+0xb6>
 8009014:	290a      	cmp	r1, #10
 8009016:	d004      	beq.n	8009022 <_puts_r+0xb6>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	6022      	str	r2, [r4, #0]
 800901e:	7019      	strb	r1, [r3, #0]
 8009020:	e7c5      	b.n	8008fae <_puts_r+0x42>
 8009022:	4622      	mov	r2, r4
 8009024:	4628      	mov	r0, r5
 8009026:	f000 f817 	bl	8009058 <__swbuf_r>
 800902a:	3001      	adds	r0, #1
 800902c:	d1bf      	bne.n	8008fae <_puts_r+0x42>
 800902e:	e7df      	b.n	8008ff0 <_puts_r+0x84>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	250a      	movs	r5, #10
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	6022      	str	r2, [r4, #0]
 8009038:	701d      	strb	r5, [r3, #0]
 800903a:	e7db      	b.n	8008ff4 <_puts_r+0x88>
 800903c:	0800a114 	.word	0x0800a114
 8009040:	0800a134 	.word	0x0800a134
 8009044:	0800a0f4 	.word	0x0800a0f4

08009048 <puts>:
 8009048:	4b02      	ldr	r3, [pc, #8]	; (8009054 <puts+0xc>)
 800904a:	4601      	mov	r1, r0
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	f7ff bf8d 	b.w	8008f6c <_puts_r>
 8009052:	bf00      	nop
 8009054:	24000010 	.word	0x24000010

08009058 <__swbuf_r>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	460e      	mov	r6, r1
 800905c:	4614      	mov	r4, r2
 800905e:	4605      	mov	r5, r0
 8009060:	b118      	cbz	r0, 800906a <__swbuf_r+0x12>
 8009062:	6983      	ldr	r3, [r0, #24]
 8009064:	b90b      	cbnz	r3, 800906a <__swbuf_r+0x12>
 8009066:	f000 f9d1 	bl	800940c <__sinit>
 800906a:	4b21      	ldr	r3, [pc, #132]	; (80090f0 <__swbuf_r+0x98>)
 800906c:	429c      	cmp	r4, r3
 800906e:	d12b      	bne.n	80090c8 <__swbuf_r+0x70>
 8009070:	686c      	ldr	r4, [r5, #4]
 8009072:	69a3      	ldr	r3, [r4, #24]
 8009074:	60a3      	str	r3, [r4, #8]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	071a      	lsls	r2, r3, #28
 800907a:	d52f      	bpl.n	80090dc <__swbuf_r+0x84>
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	b36b      	cbz	r3, 80090dc <__swbuf_r+0x84>
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	6820      	ldr	r0, [r4, #0]
 8009084:	1ac0      	subs	r0, r0, r3
 8009086:	6963      	ldr	r3, [r4, #20]
 8009088:	b2f6      	uxtb	r6, r6
 800908a:	4283      	cmp	r3, r0
 800908c:	4637      	mov	r7, r6
 800908e:	dc04      	bgt.n	800909a <__swbuf_r+0x42>
 8009090:	4621      	mov	r1, r4
 8009092:	4628      	mov	r0, r5
 8009094:	f000 f926 	bl	80092e4 <_fflush_r>
 8009098:	bb30      	cbnz	r0, 80090e8 <__swbuf_r+0x90>
 800909a:	68a3      	ldr	r3, [r4, #8]
 800909c:	3b01      	subs	r3, #1
 800909e:	60a3      	str	r3, [r4, #8]
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	6022      	str	r2, [r4, #0]
 80090a6:	701e      	strb	r6, [r3, #0]
 80090a8:	6963      	ldr	r3, [r4, #20]
 80090aa:	3001      	adds	r0, #1
 80090ac:	4283      	cmp	r3, r0
 80090ae:	d004      	beq.n	80090ba <__swbuf_r+0x62>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	07db      	lsls	r3, r3, #31
 80090b4:	d506      	bpl.n	80090c4 <__swbuf_r+0x6c>
 80090b6:	2e0a      	cmp	r6, #10
 80090b8:	d104      	bne.n	80090c4 <__swbuf_r+0x6c>
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 f911 	bl	80092e4 <_fflush_r>
 80090c2:	b988      	cbnz	r0, 80090e8 <__swbuf_r+0x90>
 80090c4:	4638      	mov	r0, r7
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <__swbuf_r+0x9c>)
 80090ca:	429c      	cmp	r4, r3
 80090cc:	d101      	bne.n	80090d2 <__swbuf_r+0x7a>
 80090ce:	68ac      	ldr	r4, [r5, #8]
 80090d0:	e7cf      	b.n	8009072 <__swbuf_r+0x1a>
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <__swbuf_r+0xa0>)
 80090d4:	429c      	cmp	r4, r3
 80090d6:	bf08      	it	eq
 80090d8:	68ec      	ldreq	r4, [r5, #12]
 80090da:	e7ca      	b.n	8009072 <__swbuf_r+0x1a>
 80090dc:	4621      	mov	r1, r4
 80090de:	4628      	mov	r0, r5
 80090e0:	f000 f80c 	bl	80090fc <__swsetup_r>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d0cb      	beq.n	8009080 <__swbuf_r+0x28>
 80090e8:	f04f 37ff 	mov.w	r7, #4294967295
 80090ec:	e7ea      	b.n	80090c4 <__swbuf_r+0x6c>
 80090ee:	bf00      	nop
 80090f0:	0800a114 	.word	0x0800a114
 80090f4:	0800a134 	.word	0x0800a134
 80090f8:	0800a0f4 	.word	0x0800a0f4

080090fc <__swsetup_r>:
 80090fc:	4b32      	ldr	r3, [pc, #200]	; (80091c8 <__swsetup_r+0xcc>)
 80090fe:	b570      	push	{r4, r5, r6, lr}
 8009100:	681d      	ldr	r5, [r3, #0]
 8009102:	4606      	mov	r6, r0
 8009104:	460c      	mov	r4, r1
 8009106:	b125      	cbz	r5, 8009112 <__swsetup_r+0x16>
 8009108:	69ab      	ldr	r3, [r5, #24]
 800910a:	b913      	cbnz	r3, 8009112 <__swsetup_r+0x16>
 800910c:	4628      	mov	r0, r5
 800910e:	f000 f97d 	bl	800940c <__sinit>
 8009112:	4b2e      	ldr	r3, [pc, #184]	; (80091cc <__swsetup_r+0xd0>)
 8009114:	429c      	cmp	r4, r3
 8009116:	d10f      	bne.n	8009138 <__swsetup_r+0x3c>
 8009118:	686c      	ldr	r4, [r5, #4]
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009120:	0719      	lsls	r1, r3, #28
 8009122:	d42c      	bmi.n	800917e <__swsetup_r+0x82>
 8009124:	06dd      	lsls	r5, r3, #27
 8009126:	d411      	bmi.n	800914c <__swsetup_r+0x50>
 8009128:	2309      	movs	r3, #9
 800912a:	6033      	str	r3, [r6, #0]
 800912c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009130:	81a3      	strh	r3, [r4, #12]
 8009132:	f04f 30ff 	mov.w	r0, #4294967295
 8009136:	e03e      	b.n	80091b6 <__swsetup_r+0xba>
 8009138:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <__swsetup_r+0xd4>)
 800913a:	429c      	cmp	r4, r3
 800913c:	d101      	bne.n	8009142 <__swsetup_r+0x46>
 800913e:	68ac      	ldr	r4, [r5, #8]
 8009140:	e7eb      	b.n	800911a <__swsetup_r+0x1e>
 8009142:	4b24      	ldr	r3, [pc, #144]	; (80091d4 <__swsetup_r+0xd8>)
 8009144:	429c      	cmp	r4, r3
 8009146:	bf08      	it	eq
 8009148:	68ec      	ldreq	r4, [r5, #12]
 800914a:	e7e6      	b.n	800911a <__swsetup_r+0x1e>
 800914c:	0758      	lsls	r0, r3, #29
 800914e:	d512      	bpl.n	8009176 <__swsetup_r+0x7a>
 8009150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009152:	b141      	cbz	r1, 8009166 <__swsetup_r+0x6a>
 8009154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009158:	4299      	cmp	r1, r3
 800915a:	d002      	beq.n	8009162 <__swsetup_r+0x66>
 800915c:	4630      	mov	r0, r6
 800915e:	f000 fa5b 	bl	8009618 <_free_r>
 8009162:	2300      	movs	r3, #0
 8009164:	6363      	str	r3, [r4, #52]	; 0x34
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800916c:	81a3      	strh	r3, [r4, #12]
 800916e:	2300      	movs	r3, #0
 8009170:	6063      	str	r3, [r4, #4]
 8009172:	6923      	ldr	r3, [r4, #16]
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	f043 0308 	orr.w	r3, r3, #8
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	6923      	ldr	r3, [r4, #16]
 8009180:	b94b      	cbnz	r3, 8009196 <__swsetup_r+0x9a>
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800918c:	d003      	beq.n	8009196 <__swsetup_r+0x9a>
 800918e:	4621      	mov	r1, r4
 8009190:	4630      	mov	r0, r6
 8009192:	f000 fa01 	bl	8009598 <__smakebuf_r>
 8009196:	89a0      	ldrh	r0, [r4, #12]
 8009198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800919c:	f010 0301 	ands.w	r3, r0, #1
 80091a0:	d00a      	beq.n	80091b8 <__swsetup_r+0xbc>
 80091a2:	2300      	movs	r3, #0
 80091a4:	60a3      	str	r3, [r4, #8]
 80091a6:	6963      	ldr	r3, [r4, #20]
 80091a8:	425b      	negs	r3, r3
 80091aa:	61a3      	str	r3, [r4, #24]
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	b943      	cbnz	r3, 80091c2 <__swsetup_r+0xc6>
 80091b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091b4:	d1ba      	bne.n	800912c <__swsetup_r+0x30>
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	0781      	lsls	r1, r0, #30
 80091ba:	bf58      	it	pl
 80091bc:	6963      	ldrpl	r3, [r4, #20]
 80091be:	60a3      	str	r3, [r4, #8]
 80091c0:	e7f4      	b.n	80091ac <__swsetup_r+0xb0>
 80091c2:	2000      	movs	r0, #0
 80091c4:	e7f7      	b.n	80091b6 <__swsetup_r+0xba>
 80091c6:	bf00      	nop
 80091c8:	24000010 	.word	0x24000010
 80091cc:	0800a114 	.word	0x0800a114
 80091d0:	0800a134 	.word	0x0800a134
 80091d4:	0800a0f4 	.word	0x0800a0f4

080091d8 <__sflush_r>:
 80091d8:	898a      	ldrh	r2, [r1, #12]
 80091da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091de:	4605      	mov	r5, r0
 80091e0:	0710      	lsls	r0, r2, #28
 80091e2:	460c      	mov	r4, r1
 80091e4:	d458      	bmi.n	8009298 <__sflush_r+0xc0>
 80091e6:	684b      	ldr	r3, [r1, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	dc05      	bgt.n	80091f8 <__sflush_r+0x20>
 80091ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	dc02      	bgt.n	80091f8 <__sflush_r+0x20>
 80091f2:	2000      	movs	r0, #0
 80091f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091fa:	2e00      	cmp	r6, #0
 80091fc:	d0f9      	beq.n	80091f2 <__sflush_r+0x1a>
 80091fe:	2300      	movs	r3, #0
 8009200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009204:	682f      	ldr	r7, [r5, #0]
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	d032      	beq.n	8009270 <__sflush_r+0x98>
 800920a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	075a      	lsls	r2, r3, #29
 8009210:	d505      	bpl.n	800921e <__sflush_r+0x46>
 8009212:	6863      	ldr	r3, [r4, #4]
 8009214:	1ac0      	subs	r0, r0, r3
 8009216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009218:	b10b      	cbz	r3, 800921e <__sflush_r+0x46>
 800921a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800921c:	1ac0      	subs	r0, r0, r3
 800921e:	2300      	movs	r3, #0
 8009220:	4602      	mov	r2, r0
 8009222:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009224:	6a21      	ldr	r1, [r4, #32]
 8009226:	4628      	mov	r0, r5
 8009228:	47b0      	blx	r6
 800922a:	1c43      	adds	r3, r0, #1
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	d106      	bne.n	800923e <__sflush_r+0x66>
 8009230:	6829      	ldr	r1, [r5, #0]
 8009232:	291d      	cmp	r1, #29
 8009234:	d82c      	bhi.n	8009290 <__sflush_r+0xb8>
 8009236:	4a2a      	ldr	r2, [pc, #168]	; (80092e0 <__sflush_r+0x108>)
 8009238:	40ca      	lsrs	r2, r1
 800923a:	07d6      	lsls	r6, r2, #31
 800923c:	d528      	bpl.n	8009290 <__sflush_r+0xb8>
 800923e:	2200      	movs	r2, #0
 8009240:	6062      	str	r2, [r4, #4]
 8009242:	04d9      	lsls	r1, r3, #19
 8009244:	6922      	ldr	r2, [r4, #16]
 8009246:	6022      	str	r2, [r4, #0]
 8009248:	d504      	bpl.n	8009254 <__sflush_r+0x7c>
 800924a:	1c42      	adds	r2, r0, #1
 800924c:	d101      	bne.n	8009252 <__sflush_r+0x7a>
 800924e:	682b      	ldr	r3, [r5, #0]
 8009250:	b903      	cbnz	r3, 8009254 <__sflush_r+0x7c>
 8009252:	6560      	str	r0, [r4, #84]	; 0x54
 8009254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009256:	602f      	str	r7, [r5, #0]
 8009258:	2900      	cmp	r1, #0
 800925a:	d0ca      	beq.n	80091f2 <__sflush_r+0x1a>
 800925c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009260:	4299      	cmp	r1, r3
 8009262:	d002      	beq.n	800926a <__sflush_r+0x92>
 8009264:	4628      	mov	r0, r5
 8009266:	f000 f9d7 	bl	8009618 <_free_r>
 800926a:	2000      	movs	r0, #0
 800926c:	6360      	str	r0, [r4, #52]	; 0x34
 800926e:	e7c1      	b.n	80091f4 <__sflush_r+0x1c>
 8009270:	6a21      	ldr	r1, [r4, #32]
 8009272:	2301      	movs	r3, #1
 8009274:	4628      	mov	r0, r5
 8009276:	47b0      	blx	r6
 8009278:	1c41      	adds	r1, r0, #1
 800927a:	d1c7      	bne.n	800920c <__sflush_r+0x34>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0c4      	beq.n	800920c <__sflush_r+0x34>
 8009282:	2b1d      	cmp	r3, #29
 8009284:	d001      	beq.n	800928a <__sflush_r+0xb2>
 8009286:	2b16      	cmp	r3, #22
 8009288:	d101      	bne.n	800928e <__sflush_r+0xb6>
 800928a:	602f      	str	r7, [r5, #0]
 800928c:	e7b1      	b.n	80091f2 <__sflush_r+0x1a>
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009294:	81a3      	strh	r3, [r4, #12]
 8009296:	e7ad      	b.n	80091f4 <__sflush_r+0x1c>
 8009298:	690f      	ldr	r7, [r1, #16]
 800929a:	2f00      	cmp	r7, #0
 800929c:	d0a9      	beq.n	80091f2 <__sflush_r+0x1a>
 800929e:	0793      	lsls	r3, r2, #30
 80092a0:	680e      	ldr	r6, [r1, #0]
 80092a2:	bf08      	it	eq
 80092a4:	694b      	ldreq	r3, [r1, #20]
 80092a6:	600f      	str	r7, [r1, #0]
 80092a8:	bf18      	it	ne
 80092aa:	2300      	movne	r3, #0
 80092ac:	eba6 0807 	sub.w	r8, r6, r7
 80092b0:	608b      	str	r3, [r1, #8]
 80092b2:	f1b8 0f00 	cmp.w	r8, #0
 80092b6:	dd9c      	ble.n	80091f2 <__sflush_r+0x1a>
 80092b8:	6a21      	ldr	r1, [r4, #32]
 80092ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092bc:	4643      	mov	r3, r8
 80092be:	463a      	mov	r2, r7
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b0      	blx	r6
 80092c4:	2800      	cmp	r0, #0
 80092c6:	dc06      	bgt.n	80092d6 <__sflush_r+0xfe>
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ce:	81a3      	strh	r3, [r4, #12]
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
 80092d4:	e78e      	b.n	80091f4 <__sflush_r+0x1c>
 80092d6:	4407      	add	r7, r0
 80092d8:	eba8 0800 	sub.w	r8, r8, r0
 80092dc:	e7e9      	b.n	80092b2 <__sflush_r+0xda>
 80092de:	bf00      	nop
 80092e0:	20400001 	.word	0x20400001

080092e4 <_fflush_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	690b      	ldr	r3, [r1, #16]
 80092e8:	4605      	mov	r5, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	b913      	cbnz	r3, 80092f4 <_fflush_r+0x10>
 80092ee:	2500      	movs	r5, #0
 80092f0:	4628      	mov	r0, r5
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	b118      	cbz	r0, 80092fe <_fflush_r+0x1a>
 80092f6:	6983      	ldr	r3, [r0, #24]
 80092f8:	b90b      	cbnz	r3, 80092fe <_fflush_r+0x1a>
 80092fa:	f000 f887 	bl	800940c <__sinit>
 80092fe:	4b14      	ldr	r3, [pc, #80]	; (8009350 <_fflush_r+0x6c>)
 8009300:	429c      	cmp	r4, r3
 8009302:	d11b      	bne.n	800933c <_fflush_r+0x58>
 8009304:	686c      	ldr	r4, [r5, #4]
 8009306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0ef      	beq.n	80092ee <_fflush_r+0xa>
 800930e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009310:	07d0      	lsls	r0, r2, #31
 8009312:	d404      	bmi.n	800931e <_fflush_r+0x3a>
 8009314:	0599      	lsls	r1, r3, #22
 8009316:	d402      	bmi.n	800931e <_fflush_r+0x3a>
 8009318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800931a:	f000 f915 	bl	8009548 <__retarget_lock_acquire_recursive>
 800931e:	4628      	mov	r0, r5
 8009320:	4621      	mov	r1, r4
 8009322:	f7ff ff59 	bl	80091d8 <__sflush_r>
 8009326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009328:	07da      	lsls	r2, r3, #31
 800932a:	4605      	mov	r5, r0
 800932c:	d4e0      	bmi.n	80092f0 <_fflush_r+0xc>
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	059b      	lsls	r3, r3, #22
 8009332:	d4dd      	bmi.n	80092f0 <_fflush_r+0xc>
 8009334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009336:	f000 f908 	bl	800954a <__retarget_lock_release_recursive>
 800933a:	e7d9      	b.n	80092f0 <_fflush_r+0xc>
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <_fflush_r+0x70>)
 800933e:	429c      	cmp	r4, r3
 8009340:	d101      	bne.n	8009346 <_fflush_r+0x62>
 8009342:	68ac      	ldr	r4, [r5, #8]
 8009344:	e7df      	b.n	8009306 <_fflush_r+0x22>
 8009346:	4b04      	ldr	r3, [pc, #16]	; (8009358 <_fflush_r+0x74>)
 8009348:	429c      	cmp	r4, r3
 800934a:	bf08      	it	eq
 800934c:	68ec      	ldreq	r4, [r5, #12]
 800934e:	e7da      	b.n	8009306 <_fflush_r+0x22>
 8009350:	0800a114 	.word	0x0800a114
 8009354:	0800a134 	.word	0x0800a134
 8009358:	0800a0f4 	.word	0x0800a0f4

0800935c <std>:
 800935c:	2300      	movs	r3, #0
 800935e:	b510      	push	{r4, lr}
 8009360:	4604      	mov	r4, r0
 8009362:	e9c0 3300 	strd	r3, r3, [r0]
 8009366:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800936a:	6083      	str	r3, [r0, #8]
 800936c:	8181      	strh	r1, [r0, #12]
 800936e:	6643      	str	r3, [r0, #100]	; 0x64
 8009370:	81c2      	strh	r2, [r0, #14]
 8009372:	6183      	str	r3, [r0, #24]
 8009374:	4619      	mov	r1, r3
 8009376:	2208      	movs	r2, #8
 8009378:	305c      	adds	r0, #92	; 0x5c
 800937a:	f7ff fdc1 	bl	8008f00 <memset>
 800937e:	4b05      	ldr	r3, [pc, #20]	; (8009394 <std+0x38>)
 8009380:	6263      	str	r3, [r4, #36]	; 0x24
 8009382:	4b05      	ldr	r3, [pc, #20]	; (8009398 <std+0x3c>)
 8009384:	62a3      	str	r3, [r4, #40]	; 0x28
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <std+0x40>)
 8009388:	62e3      	str	r3, [r4, #44]	; 0x2c
 800938a:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <std+0x44>)
 800938c:	6224      	str	r4, [r4, #32]
 800938e:	6323      	str	r3, [r4, #48]	; 0x30
 8009390:	bd10      	pop	{r4, pc}
 8009392:	bf00      	nop
 8009394:	08009e65 	.word	0x08009e65
 8009398:	08009e87 	.word	0x08009e87
 800939c:	08009ebf 	.word	0x08009ebf
 80093a0:	08009ee3 	.word	0x08009ee3

080093a4 <_cleanup_r>:
 80093a4:	4901      	ldr	r1, [pc, #4]	; (80093ac <_cleanup_r+0x8>)
 80093a6:	f000 b8af 	b.w	8009508 <_fwalk_reent>
 80093aa:	bf00      	nop
 80093ac:	080092e5 	.word	0x080092e5

080093b0 <__sfmoreglue>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	2268      	movs	r2, #104	; 0x68
 80093b4:	1e4d      	subs	r5, r1, #1
 80093b6:	4355      	muls	r5, r2
 80093b8:	460e      	mov	r6, r1
 80093ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093be:	f000 f997 	bl	80096f0 <_malloc_r>
 80093c2:	4604      	mov	r4, r0
 80093c4:	b140      	cbz	r0, 80093d8 <__sfmoreglue+0x28>
 80093c6:	2100      	movs	r1, #0
 80093c8:	e9c0 1600 	strd	r1, r6, [r0]
 80093cc:	300c      	adds	r0, #12
 80093ce:	60a0      	str	r0, [r4, #8]
 80093d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093d4:	f7ff fd94 	bl	8008f00 <memset>
 80093d8:	4620      	mov	r0, r4
 80093da:	bd70      	pop	{r4, r5, r6, pc}

080093dc <__sfp_lock_acquire>:
 80093dc:	4801      	ldr	r0, [pc, #4]	; (80093e4 <__sfp_lock_acquire+0x8>)
 80093de:	f000 b8b3 	b.w	8009548 <__retarget_lock_acquire_recursive>
 80093e2:	bf00      	nop
 80093e4:	240001e1 	.word	0x240001e1

080093e8 <__sfp_lock_release>:
 80093e8:	4801      	ldr	r0, [pc, #4]	; (80093f0 <__sfp_lock_release+0x8>)
 80093ea:	f000 b8ae 	b.w	800954a <__retarget_lock_release_recursive>
 80093ee:	bf00      	nop
 80093f0:	240001e1 	.word	0x240001e1

080093f4 <__sinit_lock_acquire>:
 80093f4:	4801      	ldr	r0, [pc, #4]	; (80093fc <__sinit_lock_acquire+0x8>)
 80093f6:	f000 b8a7 	b.w	8009548 <__retarget_lock_acquire_recursive>
 80093fa:	bf00      	nop
 80093fc:	240001e2 	.word	0x240001e2

08009400 <__sinit_lock_release>:
 8009400:	4801      	ldr	r0, [pc, #4]	; (8009408 <__sinit_lock_release+0x8>)
 8009402:	f000 b8a2 	b.w	800954a <__retarget_lock_release_recursive>
 8009406:	bf00      	nop
 8009408:	240001e2 	.word	0x240001e2

0800940c <__sinit>:
 800940c:	b510      	push	{r4, lr}
 800940e:	4604      	mov	r4, r0
 8009410:	f7ff fff0 	bl	80093f4 <__sinit_lock_acquire>
 8009414:	69a3      	ldr	r3, [r4, #24]
 8009416:	b11b      	cbz	r3, 8009420 <__sinit+0x14>
 8009418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800941c:	f7ff bff0 	b.w	8009400 <__sinit_lock_release>
 8009420:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009424:	6523      	str	r3, [r4, #80]	; 0x50
 8009426:	4b13      	ldr	r3, [pc, #76]	; (8009474 <__sinit+0x68>)
 8009428:	4a13      	ldr	r2, [pc, #76]	; (8009478 <__sinit+0x6c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	62a2      	str	r2, [r4, #40]	; 0x28
 800942e:	42a3      	cmp	r3, r4
 8009430:	bf04      	itt	eq
 8009432:	2301      	moveq	r3, #1
 8009434:	61a3      	streq	r3, [r4, #24]
 8009436:	4620      	mov	r0, r4
 8009438:	f000 f820 	bl	800947c <__sfp>
 800943c:	6060      	str	r0, [r4, #4]
 800943e:	4620      	mov	r0, r4
 8009440:	f000 f81c 	bl	800947c <__sfp>
 8009444:	60a0      	str	r0, [r4, #8]
 8009446:	4620      	mov	r0, r4
 8009448:	f000 f818 	bl	800947c <__sfp>
 800944c:	2200      	movs	r2, #0
 800944e:	60e0      	str	r0, [r4, #12]
 8009450:	2104      	movs	r1, #4
 8009452:	6860      	ldr	r0, [r4, #4]
 8009454:	f7ff ff82 	bl	800935c <std>
 8009458:	68a0      	ldr	r0, [r4, #8]
 800945a:	2201      	movs	r2, #1
 800945c:	2109      	movs	r1, #9
 800945e:	f7ff ff7d 	bl	800935c <std>
 8009462:	68e0      	ldr	r0, [r4, #12]
 8009464:	2202      	movs	r2, #2
 8009466:	2112      	movs	r1, #18
 8009468:	f7ff ff78 	bl	800935c <std>
 800946c:	2301      	movs	r3, #1
 800946e:	61a3      	str	r3, [r4, #24]
 8009470:	e7d2      	b.n	8009418 <__sinit+0xc>
 8009472:	bf00      	nop
 8009474:	0800a0f0 	.word	0x0800a0f0
 8009478:	080093a5 	.word	0x080093a5

0800947c <__sfp>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	4607      	mov	r7, r0
 8009480:	f7ff ffac 	bl	80093dc <__sfp_lock_acquire>
 8009484:	4b1e      	ldr	r3, [pc, #120]	; (8009500 <__sfp+0x84>)
 8009486:	681e      	ldr	r6, [r3, #0]
 8009488:	69b3      	ldr	r3, [r6, #24]
 800948a:	b913      	cbnz	r3, 8009492 <__sfp+0x16>
 800948c:	4630      	mov	r0, r6
 800948e:	f7ff ffbd 	bl	800940c <__sinit>
 8009492:	3648      	adds	r6, #72	; 0x48
 8009494:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009498:	3b01      	subs	r3, #1
 800949a:	d503      	bpl.n	80094a4 <__sfp+0x28>
 800949c:	6833      	ldr	r3, [r6, #0]
 800949e:	b30b      	cbz	r3, 80094e4 <__sfp+0x68>
 80094a0:	6836      	ldr	r6, [r6, #0]
 80094a2:	e7f7      	b.n	8009494 <__sfp+0x18>
 80094a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094a8:	b9d5      	cbnz	r5, 80094e0 <__sfp+0x64>
 80094aa:	4b16      	ldr	r3, [pc, #88]	; (8009504 <__sfp+0x88>)
 80094ac:	60e3      	str	r3, [r4, #12]
 80094ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094b2:	6665      	str	r5, [r4, #100]	; 0x64
 80094b4:	f000 f847 	bl	8009546 <__retarget_lock_init_recursive>
 80094b8:	f7ff ff96 	bl	80093e8 <__sfp_lock_release>
 80094bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094c4:	6025      	str	r5, [r4, #0]
 80094c6:	61a5      	str	r5, [r4, #24]
 80094c8:	2208      	movs	r2, #8
 80094ca:	4629      	mov	r1, r5
 80094cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094d0:	f7ff fd16 	bl	8008f00 <memset>
 80094d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094dc:	4620      	mov	r0, r4
 80094de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e0:	3468      	adds	r4, #104	; 0x68
 80094e2:	e7d9      	b.n	8009498 <__sfp+0x1c>
 80094e4:	2104      	movs	r1, #4
 80094e6:	4638      	mov	r0, r7
 80094e8:	f7ff ff62 	bl	80093b0 <__sfmoreglue>
 80094ec:	4604      	mov	r4, r0
 80094ee:	6030      	str	r0, [r6, #0]
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d1d5      	bne.n	80094a0 <__sfp+0x24>
 80094f4:	f7ff ff78 	bl	80093e8 <__sfp_lock_release>
 80094f8:	230c      	movs	r3, #12
 80094fa:	603b      	str	r3, [r7, #0]
 80094fc:	e7ee      	b.n	80094dc <__sfp+0x60>
 80094fe:	bf00      	nop
 8009500:	0800a0f0 	.word	0x0800a0f0
 8009504:	ffff0001 	.word	0xffff0001

08009508 <_fwalk_reent>:
 8009508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800950c:	4606      	mov	r6, r0
 800950e:	4688      	mov	r8, r1
 8009510:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009514:	2700      	movs	r7, #0
 8009516:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800951a:	f1b9 0901 	subs.w	r9, r9, #1
 800951e:	d505      	bpl.n	800952c <_fwalk_reent+0x24>
 8009520:	6824      	ldr	r4, [r4, #0]
 8009522:	2c00      	cmp	r4, #0
 8009524:	d1f7      	bne.n	8009516 <_fwalk_reent+0xe>
 8009526:	4638      	mov	r0, r7
 8009528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800952c:	89ab      	ldrh	r3, [r5, #12]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d907      	bls.n	8009542 <_fwalk_reent+0x3a>
 8009532:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009536:	3301      	adds	r3, #1
 8009538:	d003      	beq.n	8009542 <_fwalk_reent+0x3a>
 800953a:	4629      	mov	r1, r5
 800953c:	4630      	mov	r0, r6
 800953e:	47c0      	blx	r8
 8009540:	4307      	orrs	r7, r0
 8009542:	3568      	adds	r5, #104	; 0x68
 8009544:	e7e9      	b.n	800951a <_fwalk_reent+0x12>

08009546 <__retarget_lock_init_recursive>:
 8009546:	4770      	bx	lr

08009548 <__retarget_lock_acquire_recursive>:
 8009548:	4770      	bx	lr

0800954a <__retarget_lock_release_recursive>:
 800954a:	4770      	bx	lr

0800954c <__swhatbuf_r>:
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	460e      	mov	r6, r1
 8009550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009554:	2900      	cmp	r1, #0
 8009556:	b096      	sub	sp, #88	; 0x58
 8009558:	4614      	mov	r4, r2
 800955a:	461d      	mov	r5, r3
 800955c:	da08      	bge.n	8009570 <__swhatbuf_r+0x24>
 800955e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	061a      	lsls	r2, r3, #24
 8009568:	d410      	bmi.n	800958c <__swhatbuf_r+0x40>
 800956a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800956e:	e00e      	b.n	800958e <__swhatbuf_r+0x42>
 8009570:	466a      	mov	r2, sp
 8009572:	f000 fcdd 	bl	8009f30 <_fstat_r>
 8009576:	2800      	cmp	r0, #0
 8009578:	dbf1      	blt.n	800955e <__swhatbuf_r+0x12>
 800957a:	9a01      	ldr	r2, [sp, #4]
 800957c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009580:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009584:	425a      	negs	r2, r3
 8009586:	415a      	adcs	r2, r3
 8009588:	602a      	str	r2, [r5, #0]
 800958a:	e7ee      	b.n	800956a <__swhatbuf_r+0x1e>
 800958c:	2340      	movs	r3, #64	; 0x40
 800958e:	2000      	movs	r0, #0
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	b016      	add	sp, #88	; 0x58
 8009594:	bd70      	pop	{r4, r5, r6, pc}
	...

08009598 <__smakebuf_r>:
 8009598:	898b      	ldrh	r3, [r1, #12]
 800959a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800959c:	079d      	lsls	r5, r3, #30
 800959e:	4606      	mov	r6, r0
 80095a0:	460c      	mov	r4, r1
 80095a2:	d507      	bpl.n	80095b4 <__smakebuf_r+0x1c>
 80095a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	6123      	str	r3, [r4, #16]
 80095ac:	2301      	movs	r3, #1
 80095ae:	6163      	str	r3, [r4, #20]
 80095b0:	b002      	add	sp, #8
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
 80095b4:	ab01      	add	r3, sp, #4
 80095b6:	466a      	mov	r2, sp
 80095b8:	f7ff ffc8 	bl	800954c <__swhatbuf_r>
 80095bc:	9900      	ldr	r1, [sp, #0]
 80095be:	4605      	mov	r5, r0
 80095c0:	4630      	mov	r0, r6
 80095c2:	f000 f895 	bl	80096f0 <_malloc_r>
 80095c6:	b948      	cbnz	r0, 80095dc <__smakebuf_r+0x44>
 80095c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095cc:	059a      	lsls	r2, r3, #22
 80095ce:	d4ef      	bmi.n	80095b0 <__smakebuf_r+0x18>
 80095d0:	f023 0303 	bic.w	r3, r3, #3
 80095d4:	f043 0302 	orr.w	r3, r3, #2
 80095d8:	81a3      	strh	r3, [r4, #12]
 80095da:	e7e3      	b.n	80095a4 <__smakebuf_r+0xc>
 80095dc:	4b0d      	ldr	r3, [pc, #52]	; (8009614 <__smakebuf_r+0x7c>)
 80095de:	62b3      	str	r3, [r6, #40]	; 0x28
 80095e0:	89a3      	ldrh	r3, [r4, #12]
 80095e2:	6020      	str	r0, [r4, #0]
 80095e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e8:	81a3      	strh	r3, [r4, #12]
 80095ea:	9b00      	ldr	r3, [sp, #0]
 80095ec:	6163      	str	r3, [r4, #20]
 80095ee:	9b01      	ldr	r3, [sp, #4]
 80095f0:	6120      	str	r0, [r4, #16]
 80095f2:	b15b      	cbz	r3, 800960c <__smakebuf_r+0x74>
 80095f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095f8:	4630      	mov	r0, r6
 80095fa:	f000 fcab 	bl	8009f54 <_isatty_r>
 80095fe:	b128      	cbz	r0, 800960c <__smakebuf_r+0x74>
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	f023 0303 	bic.w	r3, r3, #3
 8009606:	f043 0301 	orr.w	r3, r3, #1
 800960a:	81a3      	strh	r3, [r4, #12]
 800960c:	89a0      	ldrh	r0, [r4, #12]
 800960e:	4305      	orrs	r5, r0
 8009610:	81a5      	strh	r5, [r4, #12]
 8009612:	e7cd      	b.n	80095b0 <__smakebuf_r+0x18>
 8009614:	080093a5 	.word	0x080093a5

08009618 <_free_r>:
 8009618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800961a:	2900      	cmp	r1, #0
 800961c:	d044      	beq.n	80096a8 <_free_r+0x90>
 800961e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009622:	9001      	str	r0, [sp, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f1a1 0404 	sub.w	r4, r1, #4
 800962a:	bfb8      	it	lt
 800962c:	18e4      	addlt	r4, r4, r3
 800962e:	f000 fcb3 	bl	8009f98 <__malloc_lock>
 8009632:	4a1e      	ldr	r2, [pc, #120]	; (80096ac <_free_r+0x94>)
 8009634:	9801      	ldr	r0, [sp, #4]
 8009636:	6813      	ldr	r3, [r2, #0]
 8009638:	b933      	cbnz	r3, 8009648 <_free_r+0x30>
 800963a:	6063      	str	r3, [r4, #4]
 800963c:	6014      	str	r4, [r2, #0]
 800963e:	b003      	add	sp, #12
 8009640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009644:	f000 bcae 	b.w	8009fa4 <__malloc_unlock>
 8009648:	42a3      	cmp	r3, r4
 800964a:	d908      	bls.n	800965e <_free_r+0x46>
 800964c:	6825      	ldr	r5, [r4, #0]
 800964e:	1961      	adds	r1, r4, r5
 8009650:	428b      	cmp	r3, r1
 8009652:	bf01      	itttt	eq
 8009654:	6819      	ldreq	r1, [r3, #0]
 8009656:	685b      	ldreq	r3, [r3, #4]
 8009658:	1949      	addeq	r1, r1, r5
 800965a:	6021      	streq	r1, [r4, #0]
 800965c:	e7ed      	b.n	800963a <_free_r+0x22>
 800965e:	461a      	mov	r2, r3
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	b10b      	cbz	r3, 8009668 <_free_r+0x50>
 8009664:	42a3      	cmp	r3, r4
 8009666:	d9fa      	bls.n	800965e <_free_r+0x46>
 8009668:	6811      	ldr	r1, [r2, #0]
 800966a:	1855      	adds	r5, r2, r1
 800966c:	42a5      	cmp	r5, r4
 800966e:	d10b      	bne.n	8009688 <_free_r+0x70>
 8009670:	6824      	ldr	r4, [r4, #0]
 8009672:	4421      	add	r1, r4
 8009674:	1854      	adds	r4, r2, r1
 8009676:	42a3      	cmp	r3, r4
 8009678:	6011      	str	r1, [r2, #0]
 800967a:	d1e0      	bne.n	800963e <_free_r+0x26>
 800967c:	681c      	ldr	r4, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	6053      	str	r3, [r2, #4]
 8009682:	4421      	add	r1, r4
 8009684:	6011      	str	r1, [r2, #0]
 8009686:	e7da      	b.n	800963e <_free_r+0x26>
 8009688:	d902      	bls.n	8009690 <_free_r+0x78>
 800968a:	230c      	movs	r3, #12
 800968c:	6003      	str	r3, [r0, #0]
 800968e:	e7d6      	b.n	800963e <_free_r+0x26>
 8009690:	6825      	ldr	r5, [r4, #0]
 8009692:	1961      	adds	r1, r4, r5
 8009694:	428b      	cmp	r3, r1
 8009696:	bf04      	itt	eq
 8009698:	6819      	ldreq	r1, [r3, #0]
 800969a:	685b      	ldreq	r3, [r3, #4]
 800969c:	6063      	str	r3, [r4, #4]
 800969e:	bf04      	itt	eq
 80096a0:	1949      	addeq	r1, r1, r5
 80096a2:	6021      	streq	r1, [r4, #0]
 80096a4:	6054      	str	r4, [r2, #4]
 80096a6:	e7ca      	b.n	800963e <_free_r+0x26>
 80096a8:	b003      	add	sp, #12
 80096aa:	bd30      	pop	{r4, r5, pc}
 80096ac:	240001e4 	.word	0x240001e4

080096b0 <sbrk_aligned>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	4e0e      	ldr	r6, [pc, #56]	; (80096ec <sbrk_aligned+0x3c>)
 80096b4:	460c      	mov	r4, r1
 80096b6:	6831      	ldr	r1, [r6, #0]
 80096b8:	4605      	mov	r5, r0
 80096ba:	b911      	cbnz	r1, 80096c2 <sbrk_aligned+0x12>
 80096bc:	f000 fbc2 	bl	8009e44 <_sbrk_r>
 80096c0:	6030      	str	r0, [r6, #0]
 80096c2:	4621      	mov	r1, r4
 80096c4:	4628      	mov	r0, r5
 80096c6:	f000 fbbd 	bl	8009e44 <_sbrk_r>
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	d00a      	beq.n	80096e4 <sbrk_aligned+0x34>
 80096ce:	1cc4      	adds	r4, r0, #3
 80096d0:	f024 0403 	bic.w	r4, r4, #3
 80096d4:	42a0      	cmp	r0, r4
 80096d6:	d007      	beq.n	80096e8 <sbrk_aligned+0x38>
 80096d8:	1a21      	subs	r1, r4, r0
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 fbb2 	bl	8009e44 <_sbrk_r>
 80096e0:	3001      	adds	r0, #1
 80096e2:	d101      	bne.n	80096e8 <sbrk_aligned+0x38>
 80096e4:	f04f 34ff 	mov.w	r4, #4294967295
 80096e8:	4620      	mov	r0, r4
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	240001e8 	.word	0x240001e8

080096f0 <_malloc_r>:
 80096f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f4:	1ccd      	adds	r5, r1, #3
 80096f6:	f025 0503 	bic.w	r5, r5, #3
 80096fa:	3508      	adds	r5, #8
 80096fc:	2d0c      	cmp	r5, #12
 80096fe:	bf38      	it	cc
 8009700:	250c      	movcc	r5, #12
 8009702:	2d00      	cmp	r5, #0
 8009704:	4607      	mov	r7, r0
 8009706:	db01      	blt.n	800970c <_malloc_r+0x1c>
 8009708:	42a9      	cmp	r1, r5
 800970a:	d905      	bls.n	8009718 <_malloc_r+0x28>
 800970c:	230c      	movs	r3, #12
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	2600      	movs	r6, #0
 8009712:	4630      	mov	r0, r6
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009718:	4e2e      	ldr	r6, [pc, #184]	; (80097d4 <_malloc_r+0xe4>)
 800971a:	f000 fc3d 	bl	8009f98 <__malloc_lock>
 800971e:	6833      	ldr	r3, [r6, #0]
 8009720:	461c      	mov	r4, r3
 8009722:	bb34      	cbnz	r4, 8009772 <_malloc_r+0x82>
 8009724:	4629      	mov	r1, r5
 8009726:	4638      	mov	r0, r7
 8009728:	f7ff ffc2 	bl	80096b0 <sbrk_aligned>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	4604      	mov	r4, r0
 8009730:	d14d      	bne.n	80097ce <_malloc_r+0xde>
 8009732:	6834      	ldr	r4, [r6, #0]
 8009734:	4626      	mov	r6, r4
 8009736:	2e00      	cmp	r6, #0
 8009738:	d140      	bne.n	80097bc <_malloc_r+0xcc>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	4631      	mov	r1, r6
 800973e:	4638      	mov	r0, r7
 8009740:	eb04 0803 	add.w	r8, r4, r3
 8009744:	f000 fb7e 	bl	8009e44 <_sbrk_r>
 8009748:	4580      	cmp	r8, r0
 800974a:	d13a      	bne.n	80097c2 <_malloc_r+0xd2>
 800974c:	6821      	ldr	r1, [r4, #0]
 800974e:	3503      	adds	r5, #3
 8009750:	1a6d      	subs	r5, r5, r1
 8009752:	f025 0503 	bic.w	r5, r5, #3
 8009756:	3508      	adds	r5, #8
 8009758:	2d0c      	cmp	r5, #12
 800975a:	bf38      	it	cc
 800975c:	250c      	movcc	r5, #12
 800975e:	4629      	mov	r1, r5
 8009760:	4638      	mov	r0, r7
 8009762:	f7ff ffa5 	bl	80096b0 <sbrk_aligned>
 8009766:	3001      	adds	r0, #1
 8009768:	d02b      	beq.n	80097c2 <_malloc_r+0xd2>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	442b      	add	r3, r5
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	e00e      	b.n	8009790 <_malloc_r+0xa0>
 8009772:	6822      	ldr	r2, [r4, #0]
 8009774:	1b52      	subs	r2, r2, r5
 8009776:	d41e      	bmi.n	80097b6 <_malloc_r+0xc6>
 8009778:	2a0b      	cmp	r2, #11
 800977a:	d916      	bls.n	80097aa <_malloc_r+0xba>
 800977c:	1961      	adds	r1, r4, r5
 800977e:	42a3      	cmp	r3, r4
 8009780:	6025      	str	r5, [r4, #0]
 8009782:	bf18      	it	ne
 8009784:	6059      	strne	r1, [r3, #4]
 8009786:	6863      	ldr	r3, [r4, #4]
 8009788:	bf08      	it	eq
 800978a:	6031      	streq	r1, [r6, #0]
 800978c:	5162      	str	r2, [r4, r5]
 800978e:	604b      	str	r3, [r1, #4]
 8009790:	4638      	mov	r0, r7
 8009792:	f104 060b 	add.w	r6, r4, #11
 8009796:	f000 fc05 	bl	8009fa4 <__malloc_unlock>
 800979a:	f026 0607 	bic.w	r6, r6, #7
 800979e:	1d23      	adds	r3, r4, #4
 80097a0:	1af2      	subs	r2, r6, r3
 80097a2:	d0b6      	beq.n	8009712 <_malloc_r+0x22>
 80097a4:	1b9b      	subs	r3, r3, r6
 80097a6:	50a3      	str	r3, [r4, r2]
 80097a8:	e7b3      	b.n	8009712 <_malloc_r+0x22>
 80097aa:	6862      	ldr	r2, [r4, #4]
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	bf0c      	ite	eq
 80097b0:	6032      	streq	r2, [r6, #0]
 80097b2:	605a      	strne	r2, [r3, #4]
 80097b4:	e7ec      	b.n	8009790 <_malloc_r+0xa0>
 80097b6:	4623      	mov	r3, r4
 80097b8:	6864      	ldr	r4, [r4, #4]
 80097ba:	e7b2      	b.n	8009722 <_malloc_r+0x32>
 80097bc:	4634      	mov	r4, r6
 80097be:	6876      	ldr	r6, [r6, #4]
 80097c0:	e7b9      	b.n	8009736 <_malloc_r+0x46>
 80097c2:	230c      	movs	r3, #12
 80097c4:	603b      	str	r3, [r7, #0]
 80097c6:	4638      	mov	r0, r7
 80097c8:	f000 fbec 	bl	8009fa4 <__malloc_unlock>
 80097cc:	e7a1      	b.n	8009712 <_malloc_r+0x22>
 80097ce:	6025      	str	r5, [r4, #0]
 80097d0:	e7de      	b.n	8009790 <_malloc_r+0xa0>
 80097d2:	bf00      	nop
 80097d4:	240001e4 	.word	0x240001e4

080097d8 <__sfputc_r>:
 80097d8:	6893      	ldr	r3, [r2, #8]
 80097da:	3b01      	subs	r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	b410      	push	{r4}
 80097e0:	6093      	str	r3, [r2, #8]
 80097e2:	da08      	bge.n	80097f6 <__sfputc_r+0x1e>
 80097e4:	6994      	ldr	r4, [r2, #24]
 80097e6:	42a3      	cmp	r3, r4
 80097e8:	db01      	blt.n	80097ee <__sfputc_r+0x16>
 80097ea:	290a      	cmp	r1, #10
 80097ec:	d103      	bne.n	80097f6 <__sfputc_r+0x1e>
 80097ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097f2:	f7ff bc31 	b.w	8009058 <__swbuf_r>
 80097f6:	6813      	ldr	r3, [r2, #0]
 80097f8:	1c58      	adds	r0, r3, #1
 80097fa:	6010      	str	r0, [r2, #0]
 80097fc:	7019      	strb	r1, [r3, #0]
 80097fe:	4608      	mov	r0, r1
 8009800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009804:	4770      	bx	lr

08009806 <__sfputs_r>:
 8009806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009808:	4606      	mov	r6, r0
 800980a:	460f      	mov	r7, r1
 800980c:	4614      	mov	r4, r2
 800980e:	18d5      	adds	r5, r2, r3
 8009810:	42ac      	cmp	r4, r5
 8009812:	d101      	bne.n	8009818 <__sfputs_r+0x12>
 8009814:	2000      	movs	r0, #0
 8009816:	e007      	b.n	8009828 <__sfputs_r+0x22>
 8009818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981c:	463a      	mov	r2, r7
 800981e:	4630      	mov	r0, r6
 8009820:	f7ff ffda 	bl	80097d8 <__sfputc_r>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d1f3      	bne.n	8009810 <__sfputs_r+0xa>
 8009828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800982c <_vfiprintf_r>:
 800982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009830:	460d      	mov	r5, r1
 8009832:	b09d      	sub	sp, #116	; 0x74
 8009834:	4614      	mov	r4, r2
 8009836:	4698      	mov	r8, r3
 8009838:	4606      	mov	r6, r0
 800983a:	b118      	cbz	r0, 8009844 <_vfiprintf_r+0x18>
 800983c:	6983      	ldr	r3, [r0, #24]
 800983e:	b90b      	cbnz	r3, 8009844 <_vfiprintf_r+0x18>
 8009840:	f7ff fde4 	bl	800940c <__sinit>
 8009844:	4b89      	ldr	r3, [pc, #548]	; (8009a6c <_vfiprintf_r+0x240>)
 8009846:	429d      	cmp	r5, r3
 8009848:	d11b      	bne.n	8009882 <_vfiprintf_r+0x56>
 800984a:	6875      	ldr	r5, [r6, #4]
 800984c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800984e:	07d9      	lsls	r1, r3, #31
 8009850:	d405      	bmi.n	800985e <_vfiprintf_r+0x32>
 8009852:	89ab      	ldrh	r3, [r5, #12]
 8009854:	059a      	lsls	r2, r3, #22
 8009856:	d402      	bmi.n	800985e <_vfiprintf_r+0x32>
 8009858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800985a:	f7ff fe75 	bl	8009548 <__retarget_lock_acquire_recursive>
 800985e:	89ab      	ldrh	r3, [r5, #12]
 8009860:	071b      	lsls	r3, r3, #28
 8009862:	d501      	bpl.n	8009868 <_vfiprintf_r+0x3c>
 8009864:	692b      	ldr	r3, [r5, #16]
 8009866:	b9eb      	cbnz	r3, 80098a4 <_vfiprintf_r+0x78>
 8009868:	4629      	mov	r1, r5
 800986a:	4630      	mov	r0, r6
 800986c:	f7ff fc46 	bl	80090fc <__swsetup_r>
 8009870:	b1c0      	cbz	r0, 80098a4 <_vfiprintf_r+0x78>
 8009872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009874:	07dc      	lsls	r4, r3, #31
 8009876:	d50e      	bpl.n	8009896 <_vfiprintf_r+0x6a>
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	b01d      	add	sp, #116	; 0x74
 800987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009882:	4b7b      	ldr	r3, [pc, #492]	; (8009a70 <_vfiprintf_r+0x244>)
 8009884:	429d      	cmp	r5, r3
 8009886:	d101      	bne.n	800988c <_vfiprintf_r+0x60>
 8009888:	68b5      	ldr	r5, [r6, #8]
 800988a:	e7df      	b.n	800984c <_vfiprintf_r+0x20>
 800988c:	4b79      	ldr	r3, [pc, #484]	; (8009a74 <_vfiprintf_r+0x248>)
 800988e:	429d      	cmp	r5, r3
 8009890:	bf08      	it	eq
 8009892:	68f5      	ldreq	r5, [r6, #12]
 8009894:	e7da      	b.n	800984c <_vfiprintf_r+0x20>
 8009896:	89ab      	ldrh	r3, [r5, #12]
 8009898:	0598      	lsls	r0, r3, #22
 800989a:	d4ed      	bmi.n	8009878 <_vfiprintf_r+0x4c>
 800989c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800989e:	f7ff fe54 	bl	800954a <__retarget_lock_release_recursive>
 80098a2:	e7e9      	b.n	8009878 <_vfiprintf_r+0x4c>
 80098a4:	2300      	movs	r3, #0
 80098a6:	9309      	str	r3, [sp, #36]	; 0x24
 80098a8:	2320      	movs	r3, #32
 80098aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80098b2:	2330      	movs	r3, #48	; 0x30
 80098b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a78 <_vfiprintf_r+0x24c>
 80098b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098bc:	f04f 0901 	mov.w	r9, #1
 80098c0:	4623      	mov	r3, r4
 80098c2:	469a      	mov	sl, r3
 80098c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098c8:	b10a      	cbz	r2, 80098ce <_vfiprintf_r+0xa2>
 80098ca:	2a25      	cmp	r2, #37	; 0x25
 80098cc:	d1f9      	bne.n	80098c2 <_vfiprintf_r+0x96>
 80098ce:	ebba 0b04 	subs.w	fp, sl, r4
 80098d2:	d00b      	beq.n	80098ec <_vfiprintf_r+0xc0>
 80098d4:	465b      	mov	r3, fp
 80098d6:	4622      	mov	r2, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff ff93 	bl	8009806 <__sfputs_r>
 80098e0:	3001      	adds	r0, #1
 80098e2:	f000 80aa 	beq.w	8009a3a <_vfiprintf_r+0x20e>
 80098e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098e8:	445a      	add	r2, fp
 80098ea:	9209      	str	r2, [sp, #36]	; 0x24
 80098ec:	f89a 3000 	ldrb.w	r3, [sl]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 80a2 	beq.w	8009a3a <_vfiprintf_r+0x20e>
 80098f6:	2300      	movs	r3, #0
 80098f8:	f04f 32ff 	mov.w	r2, #4294967295
 80098fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009900:	f10a 0a01 	add.w	sl, sl, #1
 8009904:	9304      	str	r3, [sp, #16]
 8009906:	9307      	str	r3, [sp, #28]
 8009908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800990c:	931a      	str	r3, [sp, #104]	; 0x68
 800990e:	4654      	mov	r4, sl
 8009910:	2205      	movs	r2, #5
 8009912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009916:	4858      	ldr	r0, [pc, #352]	; (8009a78 <_vfiprintf_r+0x24c>)
 8009918:	f7f6 fce2 	bl	80002e0 <memchr>
 800991c:	9a04      	ldr	r2, [sp, #16]
 800991e:	b9d8      	cbnz	r0, 8009958 <_vfiprintf_r+0x12c>
 8009920:	06d1      	lsls	r1, r2, #27
 8009922:	bf44      	itt	mi
 8009924:	2320      	movmi	r3, #32
 8009926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800992a:	0713      	lsls	r3, r2, #28
 800992c:	bf44      	itt	mi
 800992e:	232b      	movmi	r3, #43	; 0x2b
 8009930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b2a      	cmp	r3, #42	; 0x2a
 800993a:	d015      	beq.n	8009968 <_vfiprintf_r+0x13c>
 800993c:	9a07      	ldr	r2, [sp, #28]
 800993e:	4654      	mov	r4, sl
 8009940:	2000      	movs	r0, #0
 8009942:	f04f 0c0a 	mov.w	ip, #10
 8009946:	4621      	mov	r1, r4
 8009948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800994c:	3b30      	subs	r3, #48	; 0x30
 800994e:	2b09      	cmp	r3, #9
 8009950:	d94e      	bls.n	80099f0 <_vfiprintf_r+0x1c4>
 8009952:	b1b0      	cbz	r0, 8009982 <_vfiprintf_r+0x156>
 8009954:	9207      	str	r2, [sp, #28]
 8009956:	e014      	b.n	8009982 <_vfiprintf_r+0x156>
 8009958:	eba0 0308 	sub.w	r3, r0, r8
 800995c:	fa09 f303 	lsl.w	r3, r9, r3
 8009960:	4313      	orrs	r3, r2
 8009962:	9304      	str	r3, [sp, #16]
 8009964:	46a2      	mov	sl, r4
 8009966:	e7d2      	b.n	800990e <_vfiprintf_r+0xe2>
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	1d19      	adds	r1, r3, #4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	9103      	str	r1, [sp, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	bfbb      	ittet	lt
 8009974:	425b      	neglt	r3, r3
 8009976:	f042 0202 	orrlt.w	r2, r2, #2
 800997a:	9307      	strge	r3, [sp, #28]
 800997c:	9307      	strlt	r3, [sp, #28]
 800997e:	bfb8      	it	lt
 8009980:	9204      	strlt	r2, [sp, #16]
 8009982:	7823      	ldrb	r3, [r4, #0]
 8009984:	2b2e      	cmp	r3, #46	; 0x2e
 8009986:	d10c      	bne.n	80099a2 <_vfiprintf_r+0x176>
 8009988:	7863      	ldrb	r3, [r4, #1]
 800998a:	2b2a      	cmp	r3, #42	; 0x2a
 800998c:	d135      	bne.n	80099fa <_vfiprintf_r+0x1ce>
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	1d1a      	adds	r2, r3, #4
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	9203      	str	r2, [sp, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	bfb8      	it	lt
 800999a:	f04f 33ff 	movlt.w	r3, #4294967295
 800999e:	3402      	adds	r4, #2
 80099a0:	9305      	str	r3, [sp, #20]
 80099a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a88 <_vfiprintf_r+0x25c>
 80099a6:	7821      	ldrb	r1, [r4, #0]
 80099a8:	2203      	movs	r2, #3
 80099aa:	4650      	mov	r0, sl
 80099ac:	f7f6 fc98 	bl	80002e0 <memchr>
 80099b0:	b140      	cbz	r0, 80099c4 <_vfiprintf_r+0x198>
 80099b2:	2340      	movs	r3, #64	; 0x40
 80099b4:	eba0 000a 	sub.w	r0, r0, sl
 80099b8:	fa03 f000 	lsl.w	r0, r3, r0
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	4303      	orrs	r3, r0
 80099c0:	3401      	adds	r4, #1
 80099c2:	9304      	str	r3, [sp, #16]
 80099c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c8:	482c      	ldr	r0, [pc, #176]	; (8009a7c <_vfiprintf_r+0x250>)
 80099ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099ce:	2206      	movs	r2, #6
 80099d0:	f7f6 fc86 	bl	80002e0 <memchr>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d03f      	beq.n	8009a58 <_vfiprintf_r+0x22c>
 80099d8:	4b29      	ldr	r3, [pc, #164]	; (8009a80 <_vfiprintf_r+0x254>)
 80099da:	bb1b      	cbnz	r3, 8009a24 <_vfiprintf_r+0x1f8>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	3307      	adds	r3, #7
 80099e0:	f023 0307 	bic.w	r3, r3, #7
 80099e4:	3308      	adds	r3, #8
 80099e6:	9303      	str	r3, [sp, #12]
 80099e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ea:	443b      	add	r3, r7
 80099ec:	9309      	str	r3, [sp, #36]	; 0x24
 80099ee:	e767      	b.n	80098c0 <_vfiprintf_r+0x94>
 80099f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f4:	460c      	mov	r4, r1
 80099f6:	2001      	movs	r0, #1
 80099f8:	e7a5      	b.n	8009946 <_vfiprintf_r+0x11a>
 80099fa:	2300      	movs	r3, #0
 80099fc:	3401      	adds	r4, #1
 80099fe:	9305      	str	r3, [sp, #20]
 8009a00:	4619      	mov	r1, r3
 8009a02:	f04f 0c0a 	mov.w	ip, #10
 8009a06:	4620      	mov	r0, r4
 8009a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0c:	3a30      	subs	r2, #48	; 0x30
 8009a0e:	2a09      	cmp	r2, #9
 8009a10:	d903      	bls.n	8009a1a <_vfiprintf_r+0x1ee>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0c5      	beq.n	80099a2 <_vfiprintf_r+0x176>
 8009a16:	9105      	str	r1, [sp, #20]
 8009a18:	e7c3      	b.n	80099a2 <_vfiprintf_r+0x176>
 8009a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a1e:	4604      	mov	r4, r0
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7f0      	b.n	8009a06 <_vfiprintf_r+0x1da>
 8009a24:	ab03      	add	r3, sp, #12
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4b16      	ldr	r3, [pc, #88]	; (8009a84 <_vfiprintf_r+0x258>)
 8009a2c:	a904      	add	r1, sp, #16
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f3af 8000 	nop.w
 8009a34:	4607      	mov	r7, r0
 8009a36:	1c78      	adds	r0, r7, #1
 8009a38:	d1d6      	bne.n	80099e8 <_vfiprintf_r+0x1bc>
 8009a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a3c:	07d9      	lsls	r1, r3, #31
 8009a3e:	d405      	bmi.n	8009a4c <_vfiprintf_r+0x220>
 8009a40:	89ab      	ldrh	r3, [r5, #12]
 8009a42:	059a      	lsls	r2, r3, #22
 8009a44:	d402      	bmi.n	8009a4c <_vfiprintf_r+0x220>
 8009a46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a48:	f7ff fd7f 	bl	800954a <__retarget_lock_release_recursive>
 8009a4c:	89ab      	ldrh	r3, [r5, #12]
 8009a4e:	065b      	lsls	r3, r3, #25
 8009a50:	f53f af12 	bmi.w	8009878 <_vfiprintf_r+0x4c>
 8009a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a56:	e711      	b.n	800987c <_vfiprintf_r+0x50>
 8009a58:	ab03      	add	r3, sp, #12
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <_vfiprintf_r+0x258>)
 8009a60:	a904      	add	r1, sp, #16
 8009a62:	4630      	mov	r0, r6
 8009a64:	f000 f880 	bl	8009b68 <_printf_i>
 8009a68:	e7e4      	b.n	8009a34 <_vfiprintf_r+0x208>
 8009a6a:	bf00      	nop
 8009a6c:	0800a114 	.word	0x0800a114
 8009a70:	0800a134 	.word	0x0800a134
 8009a74:	0800a0f4 	.word	0x0800a0f4
 8009a78:	0800a154 	.word	0x0800a154
 8009a7c:	0800a15e 	.word	0x0800a15e
 8009a80:	00000000 	.word	0x00000000
 8009a84:	08009807 	.word	0x08009807
 8009a88:	0800a15a 	.word	0x0800a15a

08009a8c <_printf_common>:
 8009a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a90:	4616      	mov	r6, r2
 8009a92:	4699      	mov	r9, r3
 8009a94:	688a      	ldr	r2, [r1, #8]
 8009a96:	690b      	ldr	r3, [r1, #16]
 8009a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	bfb8      	it	lt
 8009aa0:	4613      	movlt	r3, r2
 8009aa2:	6033      	str	r3, [r6, #0]
 8009aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009aa8:	4607      	mov	r7, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	b10a      	cbz	r2, 8009ab2 <_printf_common+0x26>
 8009aae:	3301      	adds	r3, #1
 8009ab0:	6033      	str	r3, [r6, #0]
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	0699      	lsls	r1, r3, #26
 8009ab6:	bf42      	ittt	mi
 8009ab8:	6833      	ldrmi	r3, [r6, #0]
 8009aba:	3302      	addmi	r3, #2
 8009abc:	6033      	strmi	r3, [r6, #0]
 8009abe:	6825      	ldr	r5, [r4, #0]
 8009ac0:	f015 0506 	ands.w	r5, r5, #6
 8009ac4:	d106      	bne.n	8009ad4 <_printf_common+0x48>
 8009ac6:	f104 0a19 	add.w	sl, r4, #25
 8009aca:	68e3      	ldr	r3, [r4, #12]
 8009acc:	6832      	ldr	r2, [r6, #0]
 8009ace:	1a9b      	subs	r3, r3, r2
 8009ad0:	42ab      	cmp	r3, r5
 8009ad2:	dc26      	bgt.n	8009b22 <_printf_common+0x96>
 8009ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ad8:	1e13      	subs	r3, r2, #0
 8009ada:	6822      	ldr	r2, [r4, #0]
 8009adc:	bf18      	it	ne
 8009ade:	2301      	movne	r3, #1
 8009ae0:	0692      	lsls	r2, r2, #26
 8009ae2:	d42b      	bmi.n	8009b3c <_printf_common+0xb0>
 8009ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ae8:	4649      	mov	r1, r9
 8009aea:	4638      	mov	r0, r7
 8009aec:	47c0      	blx	r8
 8009aee:	3001      	adds	r0, #1
 8009af0:	d01e      	beq.n	8009b30 <_printf_common+0xa4>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	68e5      	ldr	r5, [r4, #12]
 8009af6:	6832      	ldr	r2, [r6, #0]
 8009af8:	f003 0306 	and.w	r3, r3, #6
 8009afc:	2b04      	cmp	r3, #4
 8009afe:	bf08      	it	eq
 8009b00:	1aad      	subeq	r5, r5, r2
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	6922      	ldr	r2, [r4, #16]
 8009b06:	bf0c      	ite	eq
 8009b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b0c:	2500      	movne	r5, #0
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	bfc4      	itt	gt
 8009b12:	1a9b      	subgt	r3, r3, r2
 8009b14:	18ed      	addgt	r5, r5, r3
 8009b16:	2600      	movs	r6, #0
 8009b18:	341a      	adds	r4, #26
 8009b1a:	42b5      	cmp	r5, r6
 8009b1c:	d11a      	bne.n	8009b54 <_printf_common+0xc8>
 8009b1e:	2000      	movs	r0, #0
 8009b20:	e008      	b.n	8009b34 <_printf_common+0xa8>
 8009b22:	2301      	movs	r3, #1
 8009b24:	4652      	mov	r2, sl
 8009b26:	4649      	mov	r1, r9
 8009b28:	4638      	mov	r0, r7
 8009b2a:	47c0      	blx	r8
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d103      	bne.n	8009b38 <_printf_common+0xac>
 8009b30:	f04f 30ff 	mov.w	r0, #4294967295
 8009b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b38:	3501      	adds	r5, #1
 8009b3a:	e7c6      	b.n	8009aca <_printf_common+0x3e>
 8009b3c:	18e1      	adds	r1, r4, r3
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	2030      	movs	r0, #48	; 0x30
 8009b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b46:	4422      	add	r2, r4
 8009b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b50:	3302      	adds	r3, #2
 8009b52:	e7c7      	b.n	8009ae4 <_printf_common+0x58>
 8009b54:	2301      	movs	r3, #1
 8009b56:	4622      	mov	r2, r4
 8009b58:	4649      	mov	r1, r9
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	47c0      	blx	r8
 8009b5e:	3001      	adds	r0, #1
 8009b60:	d0e6      	beq.n	8009b30 <_printf_common+0xa4>
 8009b62:	3601      	adds	r6, #1
 8009b64:	e7d9      	b.n	8009b1a <_printf_common+0x8e>
	...

08009b68 <_printf_i>:
 8009b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b6c:	7e0f      	ldrb	r7, [r1, #24]
 8009b6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b70:	2f78      	cmp	r7, #120	; 0x78
 8009b72:	4691      	mov	r9, r2
 8009b74:	4680      	mov	r8, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	469a      	mov	sl, r3
 8009b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b7e:	d807      	bhi.n	8009b90 <_printf_i+0x28>
 8009b80:	2f62      	cmp	r7, #98	; 0x62
 8009b82:	d80a      	bhi.n	8009b9a <_printf_i+0x32>
 8009b84:	2f00      	cmp	r7, #0
 8009b86:	f000 80d8 	beq.w	8009d3a <_printf_i+0x1d2>
 8009b8a:	2f58      	cmp	r7, #88	; 0x58
 8009b8c:	f000 80a3 	beq.w	8009cd6 <_printf_i+0x16e>
 8009b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b98:	e03a      	b.n	8009c10 <_printf_i+0xa8>
 8009b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b9e:	2b15      	cmp	r3, #21
 8009ba0:	d8f6      	bhi.n	8009b90 <_printf_i+0x28>
 8009ba2:	a101      	add	r1, pc, #4	; (adr r1, 8009ba8 <_printf_i+0x40>)
 8009ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ba8:	08009c01 	.word	0x08009c01
 8009bac:	08009c15 	.word	0x08009c15
 8009bb0:	08009b91 	.word	0x08009b91
 8009bb4:	08009b91 	.word	0x08009b91
 8009bb8:	08009b91 	.word	0x08009b91
 8009bbc:	08009b91 	.word	0x08009b91
 8009bc0:	08009c15 	.word	0x08009c15
 8009bc4:	08009b91 	.word	0x08009b91
 8009bc8:	08009b91 	.word	0x08009b91
 8009bcc:	08009b91 	.word	0x08009b91
 8009bd0:	08009b91 	.word	0x08009b91
 8009bd4:	08009d21 	.word	0x08009d21
 8009bd8:	08009c45 	.word	0x08009c45
 8009bdc:	08009d03 	.word	0x08009d03
 8009be0:	08009b91 	.word	0x08009b91
 8009be4:	08009b91 	.word	0x08009b91
 8009be8:	08009d43 	.word	0x08009d43
 8009bec:	08009b91 	.word	0x08009b91
 8009bf0:	08009c45 	.word	0x08009c45
 8009bf4:	08009b91 	.word	0x08009b91
 8009bf8:	08009b91 	.word	0x08009b91
 8009bfc:	08009d0b 	.word	0x08009d0b
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	1d1a      	adds	r2, r3, #4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	602a      	str	r2, [r5, #0]
 8009c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c10:	2301      	movs	r3, #1
 8009c12:	e0a3      	b.n	8009d5c <_printf_i+0x1f4>
 8009c14:	6820      	ldr	r0, [r4, #0]
 8009c16:	6829      	ldr	r1, [r5, #0]
 8009c18:	0606      	lsls	r6, r0, #24
 8009c1a:	f101 0304 	add.w	r3, r1, #4
 8009c1e:	d50a      	bpl.n	8009c36 <_printf_i+0xce>
 8009c20:	680e      	ldr	r6, [r1, #0]
 8009c22:	602b      	str	r3, [r5, #0]
 8009c24:	2e00      	cmp	r6, #0
 8009c26:	da03      	bge.n	8009c30 <_printf_i+0xc8>
 8009c28:	232d      	movs	r3, #45	; 0x2d
 8009c2a:	4276      	negs	r6, r6
 8009c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c30:	485e      	ldr	r0, [pc, #376]	; (8009dac <_printf_i+0x244>)
 8009c32:	230a      	movs	r3, #10
 8009c34:	e019      	b.n	8009c6a <_printf_i+0x102>
 8009c36:	680e      	ldr	r6, [r1, #0]
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c3e:	bf18      	it	ne
 8009c40:	b236      	sxthne	r6, r6
 8009c42:	e7ef      	b.n	8009c24 <_printf_i+0xbc>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	6820      	ldr	r0, [r4, #0]
 8009c48:	1d19      	adds	r1, r3, #4
 8009c4a:	6029      	str	r1, [r5, #0]
 8009c4c:	0601      	lsls	r1, r0, #24
 8009c4e:	d501      	bpl.n	8009c54 <_printf_i+0xec>
 8009c50:	681e      	ldr	r6, [r3, #0]
 8009c52:	e002      	b.n	8009c5a <_printf_i+0xf2>
 8009c54:	0646      	lsls	r6, r0, #25
 8009c56:	d5fb      	bpl.n	8009c50 <_printf_i+0xe8>
 8009c58:	881e      	ldrh	r6, [r3, #0]
 8009c5a:	4854      	ldr	r0, [pc, #336]	; (8009dac <_printf_i+0x244>)
 8009c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c5e:	bf0c      	ite	eq
 8009c60:	2308      	moveq	r3, #8
 8009c62:	230a      	movne	r3, #10
 8009c64:	2100      	movs	r1, #0
 8009c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c6a:	6865      	ldr	r5, [r4, #4]
 8009c6c:	60a5      	str	r5, [r4, #8]
 8009c6e:	2d00      	cmp	r5, #0
 8009c70:	bfa2      	ittt	ge
 8009c72:	6821      	ldrge	r1, [r4, #0]
 8009c74:	f021 0104 	bicge.w	r1, r1, #4
 8009c78:	6021      	strge	r1, [r4, #0]
 8009c7a:	b90e      	cbnz	r6, 8009c80 <_printf_i+0x118>
 8009c7c:	2d00      	cmp	r5, #0
 8009c7e:	d04d      	beq.n	8009d1c <_printf_i+0x1b4>
 8009c80:	4615      	mov	r5, r2
 8009c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c86:	fb03 6711 	mls	r7, r3, r1, r6
 8009c8a:	5dc7      	ldrb	r7, [r0, r7]
 8009c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c90:	4637      	mov	r7, r6
 8009c92:	42bb      	cmp	r3, r7
 8009c94:	460e      	mov	r6, r1
 8009c96:	d9f4      	bls.n	8009c82 <_printf_i+0x11a>
 8009c98:	2b08      	cmp	r3, #8
 8009c9a:	d10b      	bne.n	8009cb4 <_printf_i+0x14c>
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	07de      	lsls	r6, r3, #31
 8009ca0:	d508      	bpl.n	8009cb4 <_printf_i+0x14c>
 8009ca2:	6923      	ldr	r3, [r4, #16]
 8009ca4:	6861      	ldr	r1, [r4, #4]
 8009ca6:	4299      	cmp	r1, r3
 8009ca8:	bfde      	ittt	le
 8009caa:	2330      	movle	r3, #48	; 0x30
 8009cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cb4:	1b52      	subs	r2, r2, r5
 8009cb6:	6122      	str	r2, [r4, #16]
 8009cb8:	f8cd a000 	str.w	sl, [sp]
 8009cbc:	464b      	mov	r3, r9
 8009cbe:	aa03      	add	r2, sp, #12
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	f7ff fee2 	bl	8009a8c <_printf_common>
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d14c      	bne.n	8009d66 <_printf_i+0x1fe>
 8009ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd0:	b004      	add	sp, #16
 8009cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd6:	4835      	ldr	r0, [pc, #212]	; (8009dac <_printf_i+0x244>)
 8009cd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cdc:	6829      	ldr	r1, [r5, #0]
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ce4:	6029      	str	r1, [r5, #0]
 8009ce6:	061d      	lsls	r5, r3, #24
 8009ce8:	d514      	bpl.n	8009d14 <_printf_i+0x1ac>
 8009cea:	07df      	lsls	r7, r3, #31
 8009cec:	bf44      	itt	mi
 8009cee:	f043 0320 	orrmi.w	r3, r3, #32
 8009cf2:	6023      	strmi	r3, [r4, #0]
 8009cf4:	b91e      	cbnz	r6, 8009cfe <_printf_i+0x196>
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	f023 0320 	bic.w	r3, r3, #32
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	2310      	movs	r3, #16
 8009d00:	e7b0      	b.n	8009c64 <_printf_i+0xfc>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	f043 0320 	orr.w	r3, r3, #32
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	2378      	movs	r3, #120	; 0x78
 8009d0c:	4828      	ldr	r0, [pc, #160]	; (8009db0 <_printf_i+0x248>)
 8009d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d12:	e7e3      	b.n	8009cdc <_printf_i+0x174>
 8009d14:	0659      	lsls	r1, r3, #25
 8009d16:	bf48      	it	mi
 8009d18:	b2b6      	uxthmi	r6, r6
 8009d1a:	e7e6      	b.n	8009cea <_printf_i+0x182>
 8009d1c:	4615      	mov	r5, r2
 8009d1e:	e7bb      	b.n	8009c98 <_printf_i+0x130>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	6826      	ldr	r6, [r4, #0]
 8009d24:	6961      	ldr	r1, [r4, #20]
 8009d26:	1d18      	adds	r0, r3, #4
 8009d28:	6028      	str	r0, [r5, #0]
 8009d2a:	0635      	lsls	r5, r6, #24
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	d501      	bpl.n	8009d34 <_printf_i+0x1cc>
 8009d30:	6019      	str	r1, [r3, #0]
 8009d32:	e002      	b.n	8009d3a <_printf_i+0x1d2>
 8009d34:	0670      	lsls	r0, r6, #25
 8009d36:	d5fb      	bpl.n	8009d30 <_printf_i+0x1c8>
 8009d38:	8019      	strh	r1, [r3, #0]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	6123      	str	r3, [r4, #16]
 8009d3e:	4615      	mov	r5, r2
 8009d40:	e7ba      	b.n	8009cb8 <_printf_i+0x150>
 8009d42:	682b      	ldr	r3, [r5, #0]
 8009d44:	1d1a      	adds	r2, r3, #4
 8009d46:	602a      	str	r2, [r5, #0]
 8009d48:	681d      	ldr	r5, [r3, #0]
 8009d4a:	6862      	ldr	r2, [r4, #4]
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f7f6 fac6 	bl	80002e0 <memchr>
 8009d54:	b108      	cbz	r0, 8009d5a <_printf_i+0x1f2>
 8009d56:	1b40      	subs	r0, r0, r5
 8009d58:	6060      	str	r0, [r4, #4]
 8009d5a:	6863      	ldr	r3, [r4, #4]
 8009d5c:	6123      	str	r3, [r4, #16]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d64:	e7a8      	b.n	8009cb8 <_printf_i+0x150>
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	462a      	mov	r2, r5
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	47d0      	blx	sl
 8009d70:	3001      	adds	r0, #1
 8009d72:	d0ab      	beq.n	8009ccc <_printf_i+0x164>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	079b      	lsls	r3, r3, #30
 8009d78:	d413      	bmi.n	8009da2 <_printf_i+0x23a>
 8009d7a:	68e0      	ldr	r0, [r4, #12]
 8009d7c:	9b03      	ldr	r3, [sp, #12]
 8009d7e:	4298      	cmp	r0, r3
 8009d80:	bfb8      	it	lt
 8009d82:	4618      	movlt	r0, r3
 8009d84:	e7a4      	b.n	8009cd0 <_printf_i+0x168>
 8009d86:	2301      	movs	r3, #1
 8009d88:	4632      	mov	r2, r6
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	47d0      	blx	sl
 8009d90:	3001      	adds	r0, #1
 8009d92:	d09b      	beq.n	8009ccc <_printf_i+0x164>
 8009d94:	3501      	adds	r5, #1
 8009d96:	68e3      	ldr	r3, [r4, #12]
 8009d98:	9903      	ldr	r1, [sp, #12]
 8009d9a:	1a5b      	subs	r3, r3, r1
 8009d9c:	42ab      	cmp	r3, r5
 8009d9e:	dcf2      	bgt.n	8009d86 <_printf_i+0x21e>
 8009da0:	e7eb      	b.n	8009d7a <_printf_i+0x212>
 8009da2:	2500      	movs	r5, #0
 8009da4:	f104 0619 	add.w	r6, r4, #25
 8009da8:	e7f5      	b.n	8009d96 <_printf_i+0x22e>
 8009daa:	bf00      	nop
 8009dac:	0800a165 	.word	0x0800a165
 8009db0:	0800a176 	.word	0x0800a176

08009db4 <_putc_r>:
 8009db4:	b570      	push	{r4, r5, r6, lr}
 8009db6:	460d      	mov	r5, r1
 8009db8:	4614      	mov	r4, r2
 8009dba:	4606      	mov	r6, r0
 8009dbc:	b118      	cbz	r0, 8009dc6 <_putc_r+0x12>
 8009dbe:	6983      	ldr	r3, [r0, #24]
 8009dc0:	b90b      	cbnz	r3, 8009dc6 <_putc_r+0x12>
 8009dc2:	f7ff fb23 	bl	800940c <__sinit>
 8009dc6:	4b1c      	ldr	r3, [pc, #112]	; (8009e38 <_putc_r+0x84>)
 8009dc8:	429c      	cmp	r4, r3
 8009dca:	d124      	bne.n	8009e16 <_putc_r+0x62>
 8009dcc:	6874      	ldr	r4, [r6, #4]
 8009dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd0:	07d8      	lsls	r0, r3, #31
 8009dd2:	d405      	bmi.n	8009de0 <_putc_r+0x2c>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	0599      	lsls	r1, r3, #22
 8009dd8:	d402      	bmi.n	8009de0 <_putc_r+0x2c>
 8009dda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ddc:	f7ff fbb4 	bl	8009548 <__retarget_lock_acquire_recursive>
 8009de0:	68a3      	ldr	r3, [r4, #8]
 8009de2:	3b01      	subs	r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	60a3      	str	r3, [r4, #8]
 8009de8:	da05      	bge.n	8009df6 <_putc_r+0x42>
 8009dea:	69a2      	ldr	r2, [r4, #24]
 8009dec:	4293      	cmp	r3, r2
 8009dee:	db1c      	blt.n	8009e2a <_putc_r+0x76>
 8009df0:	b2eb      	uxtb	r3, r5
 8009df2:	2b0a      	cmp	r3, #10
 8009df4:	d019      	beq.n	8009e2a <_putc_r+0x76>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	1c5a      	adds	r2, r3, #1
 8009dfa:	6022      	str	r2, [r4, #0]
 8009dfc:	701d      	strb	r5, [r3, #0]
 8009dfe:	b2ed      	uxtb	r5, r5
 8009e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e02:	07da      	lsls	r2, r3, #31
 8009e04:	d405      	bmi.n	8009e12 <_putc_r+0x5e>
 8009e06:	89a3      	ldrh	r3, [r4, #12]
 8009e08:	059b      	lsls	r3, r3, #22
 8009e0a:	d402      	bmi.n	8009e12 <_putc_r+0x5e>
 8009e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e0e:	f7ff fb9c 	bl	800954a <__retarget_lock_release_recursive>
 8009e12:	4628      	mov	r0, r5
 8009e14:	bd70      	pop	{r4, r5, r6, pc}
 8009e16:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <_putc_r+0x88>)
 8009e18:	429c      	cmp	r4, r3
 8009e1a:	d101      	bne.n	8009e20 <_putc_r+0x6c>
 8009e1c:	68b4      	ldr	r4, [r6, #8]
 8009e1e:	e7d6      	b.n	8009dce <_putc_r+0x1a>
 8009e20:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <_putc_r+0x8c>)
 8009e22:	429c      	cmp	r4, r3
 8009e24:	bf08      	it	eq
 8009e26:	68f4      	ldreq	r4, [r6, #12]
 8009e28:	e7d1      	b.n	8009dce <_putc_r+0x1a>
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f7ff f912 	bl	8009058 <__swbuf_r>
 8009e34:	4605      	mov	r5, r0
 8009e36:	e7e3      	b.n	8009e00 <_putc_r+0x4c>
 8009e38:	0800a114 	.word	0x0800a114
 8009e3c:	0800a134 	.word	0x0800a134
 8009e40:	0800a0f4 	.word	0x0800a0f4

08009e44 <_sbrk_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4d06      	ldr	r5, [pc, #24]	; (8009e60 <_sbrk_r+0x1c>)
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	f7f7 f804 	bl	8000e5c <_sbrk>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d102      	bne.n	8009e5e <_sbrk_r+0x1a>
 8009e58:	682b      	ldr	r3, [r5, #0]
 8009e5a:	b103      	cbz	r3, 8009e5e <_sbrk_r+0x1a>
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	240001ec 	.word	0x240001ec

08009e64 <__sread>:
 8009e64:	b510      	push	{r4, lr}
 8009e66:	460c      	mov	r4, r1
 8009e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6c:	f000 f8a0 	bl	8009fb0 <_read_r>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	bfab      	itete	ge
 8009e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e76:	89a3      	ldrhlt	r3, [r4, #12]
 8009e78:	181b      	addge	r3, r3, r0
 8009e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e7e:	bfac      	ite	ge
 8009e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e82:	81a3      	strhlt	r3, [r4, #12]
 8009e84:	bd10      	pop	{r4, pc}

08009e86 <__swrite>:
 8009e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8a:	461f      	mov	r7, r3
 8009e8c:	898b      	ldrh	r3, [r1, #12]
 8009e8e:	05db      	lsls	r3, r3, #23
 8009e90:	4605      	mov	r5, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	4616      	mov	r6, r2
 8009e96:	d505      	bpl.n	8009ea4 <__swrite+0x1e>
 8009e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f000 f868 	bl	8009f74 <_lseek_r>
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	4632      	mov	r2, r6
 8009eb2:	463b      	mov	r3, r7
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eba:	f000 b817 	b.w	8009eec <_write_r>

08009ebe <__sseek>:
 8009ebe:	b510      	push	{r4, lr}
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec6:	f000 f855 	bl	8009f74 <_lseek_r>
 8009eca:	1c43      	adds	r3, r0, #1
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	bf15      	itete	ne
 8009ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eda:	81a3      	strheq	r3, [r4, #12]
 8009edc:	bf18      	it	ne
 8009ede:	81a3      	strhne	r3, [r4, #12]
 8009ee0:	bd10      	pop	{r4, pc}

08009ee2 <__sclose>:
 8009ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee6:	f000 b813 	b.w	8009f10 <_close_r>
	...

08009eec <_write_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4d07      	ldr	r5, [pc, #28]	; (8009f0c <_write_r+0x20>)
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	602a      	str	r2, [r5, #0]
 8009efa:	461a      	mov	r2, r3
 8009efc:	f7f6 ff5d 	bl	8000dba <_write>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d102      	bne.n	8009f0a <_write_r+0x1e>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	b103      	cbz	r3, 8009f0a <_write_r+0x1e>
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
 8009f0c:	240001ec 	.word	0x240001ec

08009f10 <_close_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d06      	ldr	r5, [pc, #24]	; (8009f2c <_close_r+0x1c>)
 8009f14:	2300      	movs	r3, #0
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	602b      	str	r3, [r5, #0]
 8009f1c:	f7f6 ff69 	bl	8000df2 <_close>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_close_r+0x1a>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_close_r+0x1a>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	240001ec 	.word	0x240001ec

08009f30 <_fstat_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4d07      	ldr	r5, [pc, #28]	; (8009f50 <_fstat_r+0x20>)
 8009f34:	2300      	movs	r3, #0
 8009f36:	4604      	mov	r4, r0
 8009f38:	4608      	mov	r0, r1
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	f7f6 ff64 	bl	8000e0a <_fstat>
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	d102      	bne.n	8009f4c <_fstat_r+0x1c>
 8009f46:	682b      	ldr	r3, [r5, #0]
 8009f48:	b103      	cbz	r3, 8009f4c <_fstat_r+0x1c>
 8009f4a:	6023      	str	r3, [r4, #0]
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	bf00      	nop
 8009f50:	240001ec 	.word	0x240001ec

08009f54 <_isatty_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4d06      	ldr	r5, [pc, #24]	; (8009f70 <_isatty_r+0x1c>)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	602b      	str	r3, [r5, #0]
 8009f60:	f7f6 ff63 	bl	8000e2a <_isatty>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	d102      	bne.n	8009f6e <_isatty_r+0x1a>
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	b103      	cbz	r3, 8009f6e <_isatty_r+0x1a>
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	240001ec 	.word	0x240001ec

08009f74 <_lseek_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	4d07      	ldr	r5, [pc, #28]	; (8009f94 <_lseek_r+0x20>)
 8009f78:	4604      	mov	r4, r0
 8009f7a:	4608      	mov	r0, r1
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	2200      	movs	r2, #0
 8009f80:	602a      	str	r2, [r5, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	f7f6 ff5c 	bl	8000e40 <_lseek>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_lseek_r+0x1e>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_lseek_r+0x1e>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	240001ec 	.word	0x240001ec

08009f98 <__malloc_lock>:
 8009f98:	4801      	ldr	r0, [pc, #4]	; (8009fa0 <__malloc_lock+0x8>)
 8009f9a:	f7ff bad5 	b.w	8009548 <__retarget_lock_acquire_recursive>
 8009f9e:	bf00      	nop
 8009fa0:	240001e0 	.word	0x240001e0

08009fa4 <__malloc_unlock>:
 8009fa4:	4801      	ldr	r0, [pc, #4]	; (8009fac <__malloc_unlock+0x8>)
 8009fa6:	f7ff bad0 	b.w	800954a <__retarget_lock_release_recursive>
 8009faa:	bf00      	nop
 8009fac:	240001e0 	.word	0x240001e0

08009fb0 <_read_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4d07      	ldr	r5, [pc, #28]	; (8009fd0 <_read_r+0x20>)
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	4608      	mov	r0, r1
 8009fb8:	4611      	mov	r1, r2
 8009fba:	2200      	movs	r2, #0
 8009fbc:	602a      	str	r2, [r5, #0]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f7f6 fede 	bl	8000d80 <_read>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d102      	bne.n	8009fce <_read_r+0x1e>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	b103      	cbz	r3, 8009fce <_read_r+0x1e>
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	240001ec 	.word	0x240001ec

08009fd4 <_init>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	bf00      	nop
 8009fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fda:	bc08      	pop	{r3}
 8009fdc:	469e      	mov	lr, r3
 8009fde:	4770      	bx	lr

08009fe0 <_fini>:
 8009fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe2:	bf00      	nop
 8009fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe6:	bc08      	pop	{r3}
 8009fe8:	469e      	mov	lr, r3
 8009fea:	4770      	bx	lr
